/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the StreamTextResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamTextResponse{}

// StreamTextResponse Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries. 
type StreamTextResponse struct {
	// This field is always set to `text_generation` for this event. 
	EventType *string `json:"event_type,omitempty"`
	// A fragment of the generated text. 
	Text *string `json:"text,omitempty"`
}

// NewStreamTextResponse instantiates a new StreamTextResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamTextResponse() *StreamTextResponse {
	this := StreamTextResponse{}
	return &this
}

// NewStreamTextResponseWithDefaults instantiates a new StreamTextResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamTextResponseWithDefaults() *StreamTextResponse {
	this := StreamTextResponse{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *StreamTextResponse) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamTextResponse) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *StreamTextResponse) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *StreamTextResponse) SetEventType(v string) {
	o.EventType = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *StreamTextResponse) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamTextResponse) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *StreamTextResponse) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *StreamTextResponse) SetText(v string) {
	o.Text = &v
}

func (o StreamTextResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamTextResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableStreamTextResponse struct {
	value *StreamTextResponse
	isSet bool
}

func (v NullableStreamTextResponse) Get() *StreamTextResponse {
	return v.value
}

func (v *NullableStreamTextResponse) Set(val *StreamTextResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamTextResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamTextResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamTextResponse(val *StreamTextResponse) *NullableStreamTextResponse {
	return &NullableStreamTextResponse{value: val, isSet: true}
}

func (v NullableStreamTextResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamTextResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


