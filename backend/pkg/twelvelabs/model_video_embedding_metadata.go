/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the VideoEmbeddingMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoEmbeddingMetadata{}

// VideoEmbeddingMetadata An object containing metadata associated with the embedding. 
type VideoEmbeddingMetadata struct {
	// The URL of the media file used to generate the embedding. Present if a URL was provided in the request. 
	InputUrl *string `json:"input_url,omitempty"`
	// The name of the media file used to generate the embedding. Present if a file was provided in the request. 
	InputFilename *string `json:"input_filename,omitempty"`
	// The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/v1.3/api-reference/video-embeddings/create) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
	VideoClipLength *float32 `json:"video_clip_length,omitempty"`
	// The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video']. 
	VideoEmbeddingScope []string `json:"video_embedding_scope,omitempty"`
	// The total duration of the video in seconds.
	Duration *float32 `json:"duration,omitempty"`
}

// NewVideoEmbeddingMetadata instantiates a new VideoEmbeddingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoEmbeddingMetadata() *VideoEmbeddingMetadata {
	this := VideoEmbeddingMetadata{}
	return &this
}

// NewVideoEmbeddingMetadataWithDefaults instantiates a new VideoEmbeddingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoEmbeddingMetadataWithDefaults() *VideoEmbeddingMetadata {
	this := VideoEmbeddingMetadata{}
	return &this
}

// GetInputUrl returns the InputUrl field value if set, zero value otherwise.
func (o *VideoEmbeddingMetadata) GetInputUrl() string {
	if o == nil || IsNil(o.InputUrl) {
		var ret string
		return ret
	}
	return *o.InputUrl
}

// GetInputUrlOk returns a tuple with the InputUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoEmbeddingMetadata) GetInputUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InputUrl) {
		return nil, false
	}
	return o.InputUrl, true
}

// HasInputUrl returns a boolean if a field has been set.
func (o *VideoEmbeddingMetadata) HasInputUrl() bool {
	if o != nil && !IsNil(o.InputUrl) {
		return true
	}

	return false
}

// SetInputUrl gets a reference to the given string and assigns it to the InputUrl field.
func (o *VideoEmbeddingMetadata) SetInputUrl(v string) {
	o.InputUrl = &v
}

// GetInputFilename returns the InputFilename field value if set, zero value otherwise.
func (o *VideoEmbeddingMetadata) GetInputFilename() string {
	if o == nil || IsNil(o.InputFilename) {
		var ret string
		return ret
	}
	return *o.InputFilename
}

// GetInputFilenameOk returns a tuple with the InputFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoEmbeddingMetadata) GetInputFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.InputFilename) {
		return nil, false
	}
	return o.InputFilename, true
}

// HasInputFilename returns a boolean if a field has been set.
func (o *VideoEmbeddingMetadata) HasInputFilename() bool {
	if o != nil && !IsNil(o.InputFilename) {
		return true
	}

	return false
}

// SetInputFilename gets a reference to the given string and assigns it to the InputFilename field.
func (o *VideoEmbeddingMetadata) SetInputFilename(v string) {
	o.InputFilename = &v
}

// GetVideoClipLength returns the VideoClipLength field value if set, zero value otherwise.
func (o *VideoEmbeddingMetadata) GetVideoClipLength() float32 {
	if o == nil || IsNil(o.VideoClipLength) {
		var ret float32
		return ret
	}
	return *o.VideoClipLength
}

// GetVideoClipLengthOk returns a tuple with the VideoClipLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoEmbeddingMetadata) GetVideoClipLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.VideoClipLength) {
		return nil, false
	}
	return o.VideoClipLength, true
}

// HasVideoClipLength returns a boolean if a field has been set.
func (o *VideoEmbeddingMetadata) HasVideoClipLength() bool {
	if o != nil && !IsNil(o.VideoClipLength) {
		return true
	}

	return false
}

// SetVideoClipLength gets a reference to the given float32 and assigns it to the VideoClipLength field.
func (o *VideoEmbeddingMetadata) SetVideoClipLength(v float32) {
	o.VideoClipLength = &v
}

// GetVideoEmbeddingScope returns the VideoEmbeddingScope field value if set, zero value otherwise.
func (o *VideoEmbeddingMetadata) GetVideoEmbeddingScope() []string {
	if o == nil || IsNil(o.VideoEmbeddingScope) {
		var ret []string
		return ret
	}
	return o.VideoEmbeddingScope
}

// GetVideoEmbeddingScopeOk returns a tuple with the VideoEmbeddingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoEmbeddingMetadata) GetVideoEmbeddingScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.VideoEmbeddingScope) {
		return nil, false
	}
	return o.VideoEmbeddingScope, true
}

// HasVideoEmbeddingScope returns a boolean if a field has been set.
func (o *VideoEmbeddingMetadata) HasVideoEmbeddingScope() bool {
	if o != nil && !IsNil(o.VideoEmbeddingScope) {
		return true
	}

	return false
}

// SetVideoEmbeddingScope gets a reference to the given []string and assigns it to the VideoEmbeddingScope field.
func (o *VideoEmbeddingMetadata) SetVideoEmbeddingScope(v []string) {
	o.VideoEmbeddingScope = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *VideoEmbeddingMetadata) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoEmbeddingMetadata) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *VideoEmbeddingMetadata) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *VideoEmbeddingMetadata) SetDuration(v float32) {
	o.Duration = &v
}

func (o VideoEmbeddingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoEmbeddingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputUrl) {
		toSerialize["input_url"] = o.InputUrl
	}
	if !IsNil(o.InputFilename) {
		toSerialize["input_filename"] = o.InputFilename
	}
	if !IsNil(o.VideoClipLength) {
		toSerialize["video_clip_length"] = o.VideoClipLength
	}
	if !IsNil(o.VideoEmbeddingScope) {
		toSerialize["video_embedding_scope"] = o.VideoEmbeddingScope
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return toSerialize, nil
}

type NullableVideoEmbeddingMetadata struct {
	value *VideoEmbeddingMetadata
	isSet bool
}

func (v NullableVideoEmbeddingMetadata) Get() *VideoEmbeddingMetadata {
	return v.value
}

func (v *NullableVideoEmbeddingMetadata) Set(val *VideoEmbeddingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoEmbeddingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoEmbeddingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoEmbeddingMetadata(val *VideoEmbeddingMetadata) *NullableVideoEmbeddingMetadata {
	return &NullableVideoEmbeddingMetadata{value: val, isSet: true}
}

func (v NullableVideoEmbeddingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoEmbeddingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


