/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the HighlightHighlightsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighlightHighlightsInner{}

// HighlightHighlightsInner An object that provides a brief snapshot of a specific part of the video. 
type HighlightHighlightsInner struct {
	// The starting time of the highlight, measured in seconds from the beginning of the video. 
	Start *int32 `json:"start,omitempty"`
	// The ending time of the highlight, measured in seconds from the beginning of the video. 
	End *int32 `json:"end,omitempty"`
	// The tile of the highlight. 
	Highlight *string `json:"highlight,omitempty"`
	// A brief description that captures the essence of this part of the video. 
	HighlightSummary *string `json:"highlight_summary,omitempty"`
}

// NewHighlightHighlightsInner instantiates a new HighlightHighlightsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlightHighlightsInner() *HighlightHighlightsInner {
	this := HighlightHighlightsInner{}
	return &this
}

// NewHighlightHighlightsInnerWithDefaults instantiates a new HighlightHighlightsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightHighlightsInnerWithDefaults() *HighlightHighlightsInner {
	this := HighlightHighlightsInner{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *HighlightHighlightsInner) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightHighlightsInner) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *HighlightHighlightsInner) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *HighlightHighlightsInner) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *HighlightHighlightsInner) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightHighlightsInner) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *HighlightHighlightsInner) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *HighlightHighlightsInner) SetEnd(v int32) {
	o.End = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *HighlightHighlightsInner) GetHighlight() string {
	if o == nil || IsNil(o.Highlight) {
		var ret string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightHighlightsInner) GetHighlightOk() (*string, bool) {
	if o == nil || IsNil(o.Highlight) {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *HighlightHighlightsInner) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given string and assigns it to the Highlight field.
func (o *HighlightHighlightsInner) SetHighlight(v string) {
	o.Highlight = &v
}

// GetHighlightSummary returns the HighlightSummary field value if set, zero value otherwise.
func (o *HighlightHighlightsInner) GetHighlightSummary() string {
	if o == nil || IsNil(o.HighlightSummary) {
		var ret string
		return ret
	}
	return *o.HighlightSummary
}

// GetHighlightSummaryOk returns a tuple with the HighlightSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightHighlightsInner) GetHighlightSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightSummary) {
		return nil, false
	}
	return o.HighlightSummary, true
}

// HasHighlightSummary returns a boolean if a field has been set.
func (o *HighlightHighlightsInner) HasHighlightSummary() bool {
	if o != nil && !IsNil(o.HighlightSummary) {
		return true
	}

	return false
}

// SetHighlightSummary gets a reference to the given string and assigns it to the HighlightSummary field.
func (o *HighlightHighlightsInner) SetHighlightSummary(v string) {
	o.HighlightSummary = &v
}

func (o HighlightHighlightsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighlightHighlightsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.HighlightSummary) {
		toSerialize["highlight_summary"] = o.HighlightSummary
	}
	return toSerialize, nil
}

type NullableHighlightHighlightsInner struct {
	value *HighlightHighlightsInner
	isSet bool
}

func (v NullableHighlightHighlightsInner) Get() *HighlightHighlightsInner {
	return v.value
}

func (v *NullableHighlightHighlightsInner) Set(val *HighlightHighlightsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlightHighlightsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlightHighlightsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlightHighlightsInner(val *HighlightHighlightsInner) *NullableHighlightHighlightsInner {
	return &NullableHighlightHighlightsInner{value: val, isSet: true}
}

func (v NullableHighlightHighlightsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlightHighlightsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


