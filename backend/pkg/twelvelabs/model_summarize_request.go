/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SummarizeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummarizeRequest{}

// SummarizeRequest struct for SummarizeRequest
type SummarizeRequest struct {
	// The unique identifier of the video that you want to summarize. 
	VideoId string `json:"video_id"`
	// Specifies the type of summary. Use one of the following values:   - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.   - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.   - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video. 
	Type string `json:"type"`
	// Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.  <Note title=\"Notes\"> - Your prompts can be instructive or descriptive, or you can also phrase them as questions. - The maximum length of a prompt is 2,000 tokens. </Note>  **Example**: Generate a summary of this video for a social media post, up to two sentences. 
	Prompt *string `json:"prompt,omitempty"`
	// Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.  **Default:** 0.2 **Min:** 0 **Max:** 1 
	Temperature *float32 `json:"temperature,omitempty"`
}

type _SummarizeRequest SummarizeRequest

// NewSummarizeRequest instantiates a new SummarizeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummarizeRequest(videoId string, type_ string) *SummarizeRequest {
	this := SummarizeRequest{}
	this.VideoId = videoId
	this.Type = type_
	var temperature float32 = 0.2
	this.Temperature = &temperature
	return &this
}

// NewSummarizeRequestWithDefaults instantiates a new SummarizeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummarizeRequestWithDefaults() *SummarizeRequest {
	this := SummarizeRequest{}
	var temperature float32 = 0.2
	this.Temperature = &temperature
	return &this
}

// GetVideoId returns the VideoId field value
func (o *SummarizeRequest) GetVideoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value
// and a boolean to check if the value has been set.
func (o *SummarizeRequest) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoId, true
}

// SetVideoId sets field value
func (o *SummarizeRequest) SetVideoId(v string) {
	o.VideoId = v
}

// GetType returns the Type field value
func (o *SummarizeRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SummarizeRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SummarizeRequest) SetType(v string) {
	o.Type = v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *SummarizeRequest) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarizeRequest) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *SummarizeRequest) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *SummarizeRequest) SetPrompt(v string) {
	o.Prompt = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *SummarizeRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarizeRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *SummarizeRequest) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *SummarizeRequest) SetTemperature(v float32) {
	o.Temperature = &v
}

func (o SummarizeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummarizeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_id"] = o.VideoId
	toSerialize["type"] = o.Type
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	return toSerialize, nil
}

func (o *SummarizeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSummarizeRequest := _SummarizeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSummarizeRequest)

	if err != nil {
		return err
	}

	*o = SummarizeRequest(varSummarizeRequest)

	return err
}

type NullableSummarizeRequest struct {
	value *SummarizeRequest
	isSet bool
}

func (v NullableSummarizeRequest) Get() *SummarizeRequest {
	return v.value
}

func (v *NullableSummarizeRequest) Set(val *SummarizeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSummarizeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSummarizeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummarizeRequest(val *SummarizeRequest) *NullableSummarizeRequest {
	return &NullableSummarizeRequest{value: val, isSet: true}
}

func (v NullableSummarizeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummarizeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


