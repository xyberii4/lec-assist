/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the SearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResults{}

// SearchResults An object that contains your search results. 
type SearchResults struct {
	// An array that contains your search results. For each match found, the model returns the following fields: 
	Data []SearchItem `json:"data,omitempty"`
	PageInfo *SearchResultsPageInfo `json:"page_info,omitempty"`
	SearchPool *SearchPool `json:"search_pool,omitempty"`
}

// NewSearchResults instantiates a new SearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResults() *SearchResults {
	this := SearchResults{}
	return &this
}

// NewSearchResultsWithDefaults instantiates a new SearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsWithDefaults() *SearchResults {
	this := SearchResults{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SearchResults) GetData() []SearchItem {
	if o == nil || IsNil(o.Data) {
		var ret []SearchItem
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetDataOk() ([]SearchItem, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SearchResults) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []SearchItem and assigns it to the Data field.
func (o *SearchResults) SetData(v []SearchItem) {
	o.Data = v
}

// GetPageInfo returns the PageInfo field value if set, zero value otherwise.
func (o *SearchResults) GetPageInfo() SearchResultsPageInfo {
	if o == nil || IsNil(o.PageInfo) {
		var ret SearchResultsPageInfo
		return ret
	}
	return *o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetPageInfoOk() (*SearchResultsPageInfo, bool) {
	if o == nil || IsNil(o.PageInfo) {
		return nil, false
	}
	return o.PageInfo, true
}

// HasPageInfo returns a boolean if a field has been set.
func (o *SearchResults) HasPageInfo() bool {
	if o != nil && !IsNil(o.PageInfo) {
		return true
	}

	return false
}

// SetPageInfo gets a reference to the given SearchResultsPageInfo and assigns it to the PageInfo field.
func (o *SearchResults) SetPageInfo(v SearchResultsPageInfo) {
	o.PageInfo = &v
}

// GetSearchPool returns the SearchPool field value if set, zero value otherwise.
func (o *SearchResults) GetSearchPool() SearchPool {
	if o == nil || IsNil(o.SearchPool) {
		var ret SearchPool
		return ret
	}
	return *o.SearchPool
}

// GetSearchPoolOk returns a tuple with the SearchPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetSearchPoolOk() (*SearchPool, bool) {
	if o == nil || IsNil(o.SearchPool) {
		return nil, false
	}
	return o.SearchPool, true
}

// HasSearchPool returns a boolean if a field has been set.
func (o *SearchResults) HasSearchPool() bool {
	if o != nil && !IsNil(o.SearchPool) {
		return true
	}

	return false
}

// SetSearchPool gets a reference to the given SearchPool and assigns it to the SearchPool field.
func (o *SearchResults) SetSearchPool(v SearchPool) {
	o.SearchPool = &v
}

func (o SearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.PageInfo) {
		toSerialize["page_info"] = o.PageInfo
	}
	if !IsNil(o.SearchPool) {
		toSerialize["search_pool"] = o.SearchPool
	}
	return toSerialize, nil
}

type NullableSearchResults struct {
	value *SearchResults
	isSet bool
}

func (v NullableSearchResults) Get() *SearchResults {
	return v.value
}

func (v *NullableSearchResults) Set(val *SearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResults(val *SearchResults) *NullableSearchResults {
	return &NullableSearchResults{value: val, isSet: true}
}

func (v NullableSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


