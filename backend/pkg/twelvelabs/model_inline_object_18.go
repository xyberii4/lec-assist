/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject18 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject18{}

// InlineObject18 struct for InlineObject18
type InlineObject18 struct {
	// The unique identifier of the video embedding task. You can use the identifier to: - Retrieve the status of your task by invoking the [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embedding-task-status) method of the `/embed/tasks/{task_id}/status` endpoint. - Retrieve the embedding by invoking the  [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embeddings) method of the `/embed/tasks/{task_id}` endpoint. 
	Id *string `json:"_id,omitempty"`
}

// NewInlineObject18 instantiates a new InlineObject18 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject18() *InlineObject18 {
	this := InlineObject18{}
	return &this
}

// NewInlineObject18WithDefaults instantiates a new InlineObject18 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject18WithDefaults() *InlineObject18 {
	this := InlineObject18{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineObject18) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject18) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineObject18) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineObject18) SetId(v string) {
	o.Id = &v
}

func (o InlineObject18) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject18) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	return toSerialize, nil
}

type NullableInlineObject18 struct {
	value *InlineObject18
	isSet bool
}

func (v NullableInlineObject18) Get() *InlineObject18 {
	return v.value
}

func (v *NullableInlineObject18) Set(val *InlineObject18) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject18) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject18) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject18(val *InlineObject18) *NullableInlineObject18 {
	return &NullableInlineObject18{value: val, isSet: true}
}

func (v NullableInlineObject18) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject18) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


