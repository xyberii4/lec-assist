/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"time"
)

// checks if the ImportLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportLog{}

// ImportLog An object that contains information about the import process. 
type ImportLog struct {
	// The unique identifier of the index associated with this import.
	IndexId *string `json:"index_id,omitempty"`
	// The name of the index associated with this import.
	IndexName *string `json:"index_name,omitempty"`
	// The date and time, in the RFC 3339 format when the import process was initiated.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time, in the RFC 3339 format, when the platform completed importing your videos. A `null` value indicates that the import process is still ongoing.
	EndedAt *time.Time `json:"ended_at,omitempty"`
	VideoStatus *ImportLogVideoStatus `json:"video_status,omitempty"`
	// An array containing the video files that failed to import, along with details about the error.
	FailedFiles []ImportLogFailedFilesInner `json:"failed_files,omitempty"`
}

// NewImportLog instantiates a new ImportLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportLog() *ImportLog {
	this := ImportLog{}
	return &this
}

// NewImportLogWithDefaults instantiates a new ImportLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportLogWithDefaults() *ImportLog {
	this := ImportLog{}
	return &this
}

// GetIndexId returns the IndexId field value if set, zero value otherwise.
func (o *ImportLog) GetIndexId() string {
	if o == nil || IsNil(o.IndexId) {
		var ret string
		return ret
	}
	return *o.IndexId
}

// GetIndexIdOk returns a tuple with the IndexId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetIndexIdOk() (*string, bool) {
	if o == nil || IsNil(o.IndexId) {
		return nil, false
	}
	return o.IndexId, true
}

// HasIndexId returns a boolean if a field has been set.
func (o *ImportLog) HasIndexId() bool {
	if o != nil && !IsNil(o.IndexId) {
		return true
	}

	return false
}

// SetIndexId gets a reference to the given string and assigns it to the IndexId field.
func (o *ImportLog) SetIndexId(v string) {
	o.IndexId = &v
}

// GetIndexName returns the IndexName field value if set, zero value otherwise.
func (o *ImportLog) GetIndexName() string {
	if o == nil || IsNil(o.IndexName) {
		var ret string
		return ret
	}
	return *o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetIndexNameOk() (*string, bool) {
	if o == nil || IsNil(o.IndexName) {
		return nil, false
	}
	return o.IndexName, true
}

// HasIndexName returns a boolean if a field has been set.
func (o *ImportLog) HasIndexName() bool {
	if o != nil && !IsNil(o.IndexName) {
		return true
	}

	return false
}

// SetIndexName gets a reference to the given string and assigns it to the IndexName field.
func (o *ImportLog) SetIndexName(v string) {
	o.IndexName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ImportLog) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ImportLog) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ImportLog) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *ImportLog) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *ImportLog) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *ImportLog) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetVideoStatus returns the VideoStatus field value if set, zero value otherwise.
func (o *ImportLog) GetVideoStatus() ImportLogVideoStatus {
	if o == nil || IsNil(o.VideoStatus) {
		var ret ImportLogVideoStatus
		return ret
	}
	return *o.VideoStatus
}

// GetVideoStatusOk returns a tuple with the VideoStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetVideoStatusOk() (*ImportLogVideoStatus, bool) {
	if o == nil || IsNil(o.VideoStatus) {
		return nil, false
	}
	return o.VideoStatus, true
}

// HasVideoStatus returns a boolean if a field has been set.
func (o *ImportLog) HasVideoStatus() bool {
	if o != nil && !IsNil(o.VideoStatus) {
		return true
	}

	return false
}

// SetVideoStatus gets a reference to the given ImportLogVideoStatus and assigns it to the VideoStatus field.
func (o *ImportLog) SetVideoStatus(v ImportLogVideoStatus) {
	o.VideoStatus = &v
}

// GetFailedFiles returns the FailedFiles field value if set, zero value otherwise.
func (o *ImportLog) GetFailedFiles() []ImportLogFailedFilesInner {
	if o == nil || IsNil(o.FailedFiles) {
		var ret []ImportLogFailedFilesInner
		return ret
	}
	return o.FailedFiles
}

// GetFailedFilesOk returns a tuple with the FailedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLog) GetFailedFilesOk() ([]ImportLogFailedFilesInner, bool) {
	if o == nil || IsNil(o.FailedFiles) {
		return nil, false
	}
	return o.FailedFiles, true
}

// HasFailedFiles returns a boolean if a field has been set.
func (o *ImportLog) HasFailedFiles() bool {
	if o != nil && !IsNil(o.FailedFiles) {
		return true
	}

	return false
}

// SetFailedFiles gets a reference to the given []ImportLogFailedFilesInner and assigns it to the FailedFiles field.
func (o *ImportLog) SetFailedFiles(v []ImportLogFailedFilesInner) {
	o.FailedFiles = v
}

func (o ImportLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexId) {
		toSerialize["index_id"] = o.IndexId
	}
	if !IsNil(o.IndexName) {
		toSerialize["index_name"] = o.IndexName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	if !IsNil(o.VideoStatus) {
		toSerialize["video_status"] = o.VideoStatus
	}
	if !IsNil(o.FailedFiles) {
		toSerialize["failed_files"] = o.FailedFiles
	}
	return toSerialize, nil
}

type NullableImportLog struct {
	value *ImportLog
	isSet bool
}

func (v NullableImportLog) Get() *ImportLog {
	return v.value
}

func (v *NullableImportLog) Set(val *ImportLog) {
	v.value = val
	v.isSet = true
}

func (v NullableImportLog) IsSet() bool {
	return v.isSet
}

func (v *NullableImportLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportLog(val *ImportLog) *NullableImportLog {
	return &NullableImportLog{value: val, isSet: true}
}

func (v NullableImportLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


