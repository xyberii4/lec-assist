/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the VideoVector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoVector{}

// VideoVector A video object that contains information about the video. 
type VideoVector struct {
	// A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs. 
	Id *string `json:"_id,omitempty"`
	// A string indicating the date and time, in the RFC RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created. 
	CreatedAt *string `json:"created_at,omitempty"`
	// A string indicating the date and time, in the RFC RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state. 
	UpdatedAt *string `json:"updated_at,omitempty"`
	// A string indicating the date and time, in the RFC RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed. 
	IndexedAt *string `json:"indexed_at,omitempty"`
	SystemMetadata *VideoVectorSystemMetadata `json:"system_metadata,omitempty"`
}

// NewVideoVector instantiates a new VideoVector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoVector() *VideoVector {
	this := VideoVector{}
	return &this
}

// NewVideoVectorWithDefaults instantiates a new VideoVector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoVectorWithDefaults() *VideoVector {
	this := VideoVector{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VideoVector) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoVector) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VideoVector) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VideoVector) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *VideoVector) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoVector) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *VideoVector) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *VideoVector) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *VideoVector) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoVector) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *VideoVector) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *VideoVector) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetIndexedAt returns the IndexedAt field value if set, zero value otherwise.
func (o *VideoVector) GetIndexedAt() string {
	if o == nil || IsNil(o.IndexedAt) {
		var ret string
		return ret
	}
	return *o.IndexedAt
}

// GetIndexedAtOk returns a tuple with the IndexedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoVector) GetIndexedAtOk() (*string, bool) {
	if o == nil || IsNil(o.IndexedAt) {
		return nil, false
	}
	return o.IndexedAt, true
}

// HasIndexedAt returns a boolean if a field has been set.
func (o *VideoVector) HasIndexedAt() bool {
	if o != nil && !IsNil(o.IndexedAt) {
		return true
	}

	return false
}

// SetIndexedAt gets a reference to the given string and assigns it to the IndexedAt field.
func (o *VideoVector) SetIndexedAt(v string) {
	o.IndexedAt = &v
}

// GetSystemMetadata returns the SystemMetadata field value if set, zero value otherwise.
func (o *VideoVector) GetSystemMetadata() VideoVectorSystemMetadata {
	if o == nil || IsNil(o.SystemMetadata) {
		var ret VideoVectorSystemMetadata
		return ret
	}
	return *o.SystemMetadata
}

// GetSystemMetadataOk returns a tuple with the SystemMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoVector) GetSystemMetadataOk() (*VideoVectorSystemMetadata, bool) {
	if o == nil || IsNil(o.SystemMetadata) {
		return nil, false
	}
	return o.SystemMetadata, true
}

// HasSystemMetadata returns a boolean if a field has been set.
func (o *VideoVector) HasSystemMetadata() bool {
	if o != nil && !IsNil(o.SystemMetadata) {
		return true
	}

	return false
}

// SetSystemMetadata gets a reference to the given VideoVectorSystemMetadata and assigns it to the SystemMetadata field.
func (o *VideoVector) SetSystemMetadata(v VideoVectorSystemMetadata) {
	o.SystemMetadata = &v
}

func (o VideoVector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoVector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.IndexedAt) {
		toSerialize["indexed_at"] = o.IndexedAt
	}
	if !IsNil(o.SystemMetadata) {
		toSerialize["system_metadata"] = o.SystemMetadata
	}
	return toSerialize, nil
}

type NullableVideoVector struct {
	value *VideoVector
	isSet bool
}

func (v NullableVideoVector) Get() *VideoVector {
	return v.value
}

func (v *NullableVideoVector) Set(val *VideoVector) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoVector) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoVector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoVector(val *VideoVector) *NullableVideoVector {
	return &NullableVideoVector{value: val, isSet: true}
}

func (v NullableVideoVector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoVector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


