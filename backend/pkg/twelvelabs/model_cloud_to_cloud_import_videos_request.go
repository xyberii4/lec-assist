/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloudToCloudImportVideosRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudToCloudImportVideosRequest{}

// CloudToCloudImportVideosRequest struct for CloudToCloudImportVideosRequest
type CloudToCloudImportVideosRequest struct {
	// The unique identifier of the index to which the videos are being uploaded. 
	IndexId string `json:"index_id"`
	// Specifies whether or not incremental sync is enabled. If set to `false`, the platform will synchronize all the files in the bucket.  **Default**: `true`. 
	IncrementalImport *bool `json:"incremental_import,omitempty"`
	// Determines whether the platform retries failed uploads. When set to `true`, the platform attempts to re-upload files that failed during the initial upload process.  **Default**: `false`. 
	RetryFailed *bool `json:"retry_failed,omitempty"`
	// Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.  <Note title=\"Notes\"> - The metadata you specify when calling this method applies to all videos imported in this request. -  If you want to store other types of data such as objects or arrays, you must convert your data into string values. - You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video. </Note> 
	UserMetadata map[string]interface{} `json:"user_metadata,omitempty"`
}

type _CloudToCloudImportVideosRequest CloudToCloudImportVideosRequest

// NewCloudToCloudImportVideosRequest instantiates a new CloudToCloudImportVideosRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudToCloudImportVideosRequest(indexId string) *CloudToCloudImportVideosRequest {
	this := CloudToCloudImportVideosRequest{}
	this.IndexId = indexId
	var incrementalImport bool = true
	this.IncrementalImport = &incrementalImport
	var retryFailed bool = false
	this.RetryFailed = &retryFailed
	return &this
}

// NewCloudToCloudImportVideosRequestWithDefaults instantiates a new CloudToCloudImportVideosRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudToCloudImportVideosRequestWithDefaults() *CloudToCloudImportVideosRequest {
	this := CloudToCloudImportVideosRequest{}
	var incrementalImport bool = true
	this.IncrementalImport = &incrementalImport
	var retryFailed bool = false
	this.RetryFailed = &retryFailed
	return &this
}

// GetIndexId returns the IndexId field value
func (o *CloudToCloudImportVideosRequest) GetIndexId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexId
}

// GetIndexIdOk returns a tuple with the IndexId field value
// and a boolean to check if the value has been set.
func (o *CloudToCloudImportVideosRequest) GetIndexIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexId, true
}

// SetIndexId sets field value
func (o *CloudToCloudImportVideosRequest) SetIndexId(v string) {
	o.IndexId = v
}

// GetIncrementalImport returns the IncrementalImport field value if set, zero value otherwise.
func (o *CloudToCloudImportVideosRequest) GetIncrementalImport() bool {
	if o == nil || IsNil(o.IncrementalImport) {
		var ret bool
		return ret
	}
	return *o.IncrementalImport
}

// GetIncrementalImportOk returns a tuple with the IncrementalImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudToCloudImportVideosRequest) GetIncrementalImportOk() (*bool, bool) {
	if o == nil || IsNil(o.IncrementalImport) {
		return nil, false
	}
	return o.IncrementalImport, true
}

// HasIncrementalImport returns a boolean if a field has been set.
func (o *CloudToCloudImportVideosRequest) HasIncrementalImport() bool {
	if o != nil && !IsNil(o.IncrementalImport) {
		return true
	}

	return false
}

// SetIncrementalImport gets a reference to the given bool and assigns it to the IncrementalImport field.
func (o *CloudToCloudImportVideosRequest) SetIncrementalImport(v bool) {
	o.IncrementalImport = &v
}

// GetRetryFailed returns the RetryFailed field value if set, zero value otherwise.
func (o *CloudToCloudImportVideosRequest) GetRetryFailed() bool {
	if o == nil || IsNil(o.RetryFailed) {
		var ret bool
		return ret
	}
	return *o.RetryFailed
}

// GetRetryFailedOk returns a tuple with the RetryFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudToCloudImportVideosRequest) GetRetryFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.RetryFailed) {
		return nil, false
	}
	return o.RetryFailed, true
}

// HasRetryFailed returns a boolean if a field has been set.
func (o *CloudToCloudImportVideosRequest) HasRetryFailed() bool {
	if o != nil && !IsNil(o.RetryFailed) {
		return true
	}

	return false
}

// SetRetryFailed gets a reference to the given bool and assigns it to the RetryFailed field.
func (o *CloudToCloudImportVideosRequest) SetRetryFailed(v bool) {
	o.RetryFailed = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *CloudToCloudImportVideosRequest) GetUserMetadata() map[string]interface{} {
	if o == nil || IsNil(o.UserMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudToCloudImportVideosRequest) GetUserMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *CloudToCloudImportVideosRequest) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]interface{} and assigns it to the UserMetadata field.
func (o *CloudToCloudImportVideosRequest) SetUserMetadata(v map[string]interface{}) {
	o.UserMetadata = v
}

func (o CloudToCloudImportVideosRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudToCloudImportVideosRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index_id"] = o.IndexId
	if !IsNil(o.IncrementalImport) {
		toSerialize["incremental_import"] = o.IncrementalImport
	}
	if !IsNil(o.RetryFailed) {
		toSerialize["retry_failed"] = o.RetryFailed
	}
	if !IsNil(o.UserMetadata) {
		toSerialize["user_metadata"] = o.UserMetadata
	}
	return toSerialize, nil
}

func (o *CloudToCloudImportVideosRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudToCloudImportVideosRequest := _CloudToCloudImportVideosRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudToCloudImportVideosRequest)

	if err != nil {
		return err
	}

	*o = CloudToCloudImportVideosRequest(varCloudToCloudImportVideosRequest)

	return err
}

type NullableCloudToCloudImportVideosRequest struct {
	value *CloudToCloudImportVideosRequest
	isSet bool
}

func (v NullableCloudToCloudImportVideosRequest) Get() *CloudToCloudImportVideosRequest {
	return v.value
}

func (v *NullableCloudToCloudImportVideosRequest) Set(val *CloudToCloudImportVideosRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudToCloudImportVideosRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudToCloudImportVideosRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudToCloudImportVideosRequest(val *CloudToCloudImportVideosRequest) *NullableCloudToCloudImportVideosRequest {
	return &NullableCloudToCloudImportVideosRequest{value: val, isSet: true}
}

func (v NullableCloudToCloudImportVideosRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudToCloudImportVideosRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


