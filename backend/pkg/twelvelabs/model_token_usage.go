/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the TokenUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenUsage{}

// TokenUsage The number of tokens used in the generation. 
type TokenUsage struct {
	// The number of tokens in the generated text. 
	OutputTokens *int32 `json:"output_tokens,omitempty"`
}

// NewTokenUsage instantiates a new TokenUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenUsage() *TokenUsage {
	this := TokenUsage{}
	return &this
}

// NewTokenUsageWithDefaults instantiates a new TokenUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenUsageWithDefaults() *TokenUsage {
	this := TokenUsage{}
	return &this
}

// GetOutputTokens returns the OutputTokens field value if set, zero value otherwise.
func (o *TokenUsage) GetOutputTokens() int32 {
	if o == nil || IsNil(o.OutputTokens) {
		var ret int32
		return ret
	}
	return *o.OutputTokens
}

// GetOutputTokensOk returns a tuple with the OutputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUsage) GetOutputTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.OutputTokens) {
		return nil, false
	}
	return o.OutputTokens, true
}

// HasOutputTokens returns a boolean if a field has been set.
func (o *TokenUsage) HasOutputTokens() bool {
	if o != nil && !IsNil(o.OutputTokens) {
		return true
	}

	return false
}

// SetOutputTokens gets a reference to the given int32 and assigns it to the OutputTokens field.
func (o *TokenUsage) SetOutputTokens(v int32) {
	o.OutputTokens = &v
}

func (o TokenUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OutputTokens) {
		toSerialize["output_tokens"] = o.OutputTokens
	}
	return toSerialize, nil
}

type NullableTokenUsage struct {
	value *TokenUsage
	isSet bool
}

func (v NullableTokenUsage) Get() *TokenUsage {
	return v.value
}

func (v *NullableTokenUsage) Set(val *TokenUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenUsage(val *TokenUsage) *NullableTokenUsage {
	return &NullableTokenUsage{value: val, isSet: true}
}

func (v NullableTokenUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


