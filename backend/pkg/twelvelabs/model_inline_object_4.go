/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject4{}

// InlineObject4 struct for InlineObject4
type InlineObject4 struct {
	// The unique identifier of the video.
	Id *string `json:"_id,omitempty"`
	// A string indicating the date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// A string indicating the date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the corresponding video indexing task was last updated. The platform updates this field every time the corresponding video indexing task transitions to a different state.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// A string indicating the date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed.
	IndexedAt *string `json:"indexed_at,omitempty"`
	SystemMetadata *InlineObject4SystemMetadata `json:"system_metadata,omitempty"`
	// User-generated metadata about the video.
	UserMetadata map[string]interface{} `json:"user_metadata,omitempty"`
	Hls *HLSObject `json:"hls,omitempty"`
	Embedding *InlineObject4Embedding `json:"embedding,omitempty"`
	// An array of objects that contains the transcription. For each time range for which the platform finds spoken words, it returns an object that contains the fields below. If the platform doesn't find any spoken words, the `data` field is set to `null`. Note that the official SDKs will support this feature in a future release.
	Transcription []TranscriptionDataInner `json:"transcription,omitempty"`
}

// NewInlineObject4 instantiates a new InlineObject4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject4() *InlineObject4 {
	this := InlineObject4{}
	return &this
}

// NewInlineObject4WithDefaults instantiates a new InlineObject4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject4WithDefaults() *InlineObject4 {
	this := InlineObject4{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineObject4) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineObject4) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineObject4) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *InlineObject4) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *InlineObject4) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *InlineObject4) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *InlineObject4) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *InlineObject4) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *InlineObject4) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetIndexedAt returns the IndexedAt field value if set, zero value otherwise.
func (o *InlineObject4) GetIndexedAt() string {
	if o == nil || IsNil(o.IndexedAt) {
		var ret string
		return ret
	}
	return *o.IndexedAt
}

// GetIndexedAtOk returns a tuple with the IndexedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetIndexedAtOk() (*string, bool) {
	if o == nil || IsNil(o.IndexedAt) {
		return nil, false
	}
	return o.IndexedAt, true
}

// HasIndexedAt returns a boolean if a field has been set.
func (o *InlineObject4) HasIndexedAt() bool {
	if o != nil && !IsNil(o.IndexedAt) {
		return true
	}

	return false
}

// SetIndexedAt gets a reference to the given string and assigns it to the IndexedAt field.
func (o *InlineObject4) SetIndexedAt(v string) {
	o.IndexedAt = &v
}

// GetSystemMetadata returns the SystemMetadata field value if set, zero value otherwise.
func (o *InlineObject4) GetSystemMetadata() InlineObject4SystemMetadata {
	if o == nil || IsNil(o.SystemMetadata) {
		var ret InlineObject4SystemMetadata
		return ret
	}
	return *o.SystemMetadata
}

// GetSystemMetadataOk returns a tuple with the SystemMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetSystemMetadataOk() (*InlineObject4SystemMetadata, bool) {
	if o == nil || IsNil(o.SystemMetadata) {
		return nil, false
	}
	return o.SystemMetadata, true
}

// HasSystemMetadata returns a boolean if a field has been set.
func (o *InlineObject4) HasSystemMetadata() bool {
	if o != nil && !IsNil(o.SystemMetadata) {
		return true
	}

	return false
}

// SetSystemMetadata gets a reference to the given InlineObject4SystemMetadata and assigns it to the SystemMetadata field.
func (o *InlineObject4) SetSystemMetadata(v InlineObject4SystemMetadata) {
	o.SystemMetadata = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *InlineObject4) GetUserMetadata() map[string]interface{} {
	if o == nil || IsNil(o.UserMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetUserMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *InlineObject4) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]interface{} and assigns it to the UserMetadata field.
func (o *InlineObject4) SetUserMetadata(v map[string]interface{}) {
	o.UserMetadata = v
}

// GetHls returns the Hls field value if set, zero value otherwise.
func (o *InlineObject4) GetHls() HLSObject {
	if o == nil || IsNil(o.Hls) {
		var ret HLSObject
		return ret
	}
	return *o.Hls
}

// GetHlsOk returns a tuple with the Hls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetHlsOk() (*HLSObject, bool) {
	if o == nil || IsNil(o.Hls) {
		return nil, false
	}
	return o.Hls, true
}

// HasHls returns a boolean if a field has been set.
func (o *InlineObject4) HasHls() bool {
	if o != nil && !IsNil(o.Hls) {
		return true
	}

	return false
}

// SetHls gets a reference to the given HLSObject and assigns it to the Hls field.
func (o *InlineObject4) SetHls(v HLSObject) {
	o.Hls = &v
}

// GetEmbedding returns the Embedding field value if set, zero value otherwise.
func (o *InlineObject4) GetEmbedding() InlineObject4Embedding {
	if o == nil || IsNil(o.Embedding) {
		var ret InlineObject4Embedding
		return ret
	}
	return *o.Embedding
}

// GetEmbeddingOk returns a tuple with the Embedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetEmbeddingOk() (*InlineObject4Embedding, bool) {
	if o == nil || IsNil(o.Embedding) {
		return nil, false
	}
	return o.Embedding, true
}

// HasEmbedding returns a boolean if a field has been set.
func (o *InlineObject4) HasEmbedding() bool {
	if o != nil && !IsNil(o.Embedding) {
		return true
	}

	return false
}

// SetEmbedding gets a reference to the given InlineObject4Embedding and assigns it to the Embedding field.
func (o *InlineObject4) SetEmbedding(v InlineObject4Embedding) {
	o.Embedding = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *InlineObject4) GetTranscription() []TranscriptionDataInner {
	if o == nil || IsNil(o.Transcription) {
		var ret []TranscriptionDataInner
		return ret
	}
	return o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetTranscriptionOk() ([]TranscriptionDataInner, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *InlineObject4) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given []TranscriptionDataInner and assigns it to the Transcription field.
func (o *InlineObject4) SetTranscription(v []TranscriptionDataInner) {
	o.Transcription = v
}

func (o InlineObject4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.IndexedAt) {
		toSerialize["indexed_at"] = o.IndexedAt
	}
	if !IsNil(o.SystemMetadata) {
		toSerialize["system_metadata"] = o.SystemMetadata
	}
	if !IsNil(o.UserMetadata) {
		toSerialize["user_metadata"] = o.UserMetadata
	}
	if !IsNil(o.Hls) {
		toSerialize["hls"] = o.Hls
	}
	if !IsNil(o.Embedding) {
		toSerialize["embedding"] = o.Embedding
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	return toSerialize, nil
}

type NullableInlineObject4 struct {
	value *InlineObject4
	isSet bool
}

func (v NullableInlineObject4) Get() *InlineObject4 {
	return v.value
}

func (v *NullableInlineObject4) Set(val *InlineObject4) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject4) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject4(val *InlineObject4) *NullableInlineObject4 {
	return &NullableInlineObject4{value: val, isSet: true}
}

func (v NullableInlineObject4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


