/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Analyze200Response - struct for Analyze200Response
type Analyze200Response struct {
	NonStreamGenerateResponse *NonStreamGenerateResponse
	StreamGenerateResponse *StreamGenerateResponse
}

// NonStreamGenerateResponseAsAnalyze200Response is a convenience function that returns NonStreamGenerateResponse wrapped in Analyze200Response
func NonStreamGenerateResponseAsAnalyze200Response(v *NonStreamGenerateResponse) Analyze200Response {
	return Analyze200Response{
		NonStreamGenerateResponse: v,
	}
}

// StreamGenerateResponseAsAnalyze200Response is a convenience function that returns StreamGenerateResponse wrapped in Analyze200Response
func StreamGenerateResponseAsAnalyze200Response(v *StreamGenerateResponse) Analyze200Response {
	return Analyze200Response{
		StreamGenerateResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Analyze200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NonStreamGenerateResponse
	err = newStrictDecoder(data).Decode(&dst.NonStreamGenerateResponse)
	if err == nil {
		jsonNonStreamGenerateResponse, _ := json.Marshal(dst.NonStreamGenerateResponse)
		if string(jsonNonStreamGenerateResponse) == "{}" { // empty struct
			dst.NonStreamGenerateResponse = nil
		} else {
			if err = validator.Validate(dst.NonStreamGenerateResponse); err != nil {
				dst.NonStreamGenerateResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.NonStreamGenerateResponse = nil
	}

	// try to unmarshal data into StreamGenerateResponse
	err = newStrictDecoder(data).Decode(&dst.StreamGenerateResponse)
	if err == nil {
		jsonStreamGenerateResponse, _ := json.Marshal(dst.StreamGenerateResponse)
		if string(jsonStreamGenerateResponse) == "{}" { // empty struct
			dst.StreamGenerateResponse = nil
		} else {
			if err = validator.Validate(dst.StreamGenerateResponse); err != nil {
				dst.StreamGenerateResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.StreamGenerateResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NonStreamGenerateResponse = nil
		dst.StreamGenerateResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Analyze200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Analyze200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Analyze200Response) MarshalJSON() ([]byte, error) {
	if src.NonStreamGenerateResponse != nil {
		return json.Marshal(&src.NonStreamGenerateResponse)
	}

	if src.StreamGenerateResponse != nil {
		return json.Marshal(&src.StreamGenerateResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Analyze200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NonStreamGenerateResponse != nil {
		return obj.NonStreamGenerateResponse
	}

	if obj.StreamGenerateResponse != nil {
		return obj.StreamGenerateResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Analyze200Response) GetActualInstanceValue() (interface{}) {
	if obj.NonStreamGenerateResponse != nil {
		return *obj.NonStreamGenerateResponse
	}

	if obj.StreamGenerateResponse != nil {
		return *obj.StreamGenerateResponse
	}

	// all schemas are nil
	return nil
}

type NullableAnalyze200Response struct {
	value *Analyze200Response
	isSet bool
}

func (v NullableAnalyze200Response) Get() *Analyze200Response {
	return v.value
}

func (v *NullableAnalyze200Response) Set(val *Analyze200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyze200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyze200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyze200Response(val *Analyze200Response) *NullableAnalyze200Response {
	return &NullableAnalyze200Response{value: val, isSet: true}
}

func (v NullableAnalyze200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyze200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


