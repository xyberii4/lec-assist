/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the SearchPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPool{}

// SearchPool An object that contains details about the index you queried.
type SearchPool struct {
	// The number of videos in the index you queried.
	TotalCount *int32 `json:"total_count,omitempty"`
	// The total duration of the videos.
	TotalDuration *float32 `json:"total_duration,omitempty"`
	// The unique identifier of the index.
	IndexId *string `json:"index_id,omitempty"`
}

// NewSearchPool instantiates a new SearchPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPool() *SearchPool {
	this := SearchPool{}
	return &this
}

// NewSearchPoolWithDefaults instantiates a new SearchPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPoolWithDefaults() *SearchPool {
	this := SearchPool{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *SearchPool) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPool) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *SearchPool) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *SearchPool) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetTotalDuration returns the TotalDuration field value if set, zero value otherwise.
func (o *SearchPool) GetTotalDuration() float32 {
	if o == nil || IsNil(o.TotalDuration) {
		var ret float32
		return ret
	}
	return *o.TotalDuration
}

// GetTotalDurationOk returns a tuple with the TotalDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPool) GetTotalDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalDuration) {
		return nil, false
	}
	return o.TotalDuration, true
}

// HasTotalDuration returns a boolean if a field has been set.
func (o *SearchPool) HasTotalDuration() bool {
	if o != nil && !IsNil(o.TotalDuration) {
		return true
	}

	return false
}

// SetTotalDuration gets a reference to the given float32 and assigns it to the TotalDuration field.
func (o *SearchPool) SetTotalDuration(v float32) {
	o.TotalDuration = &v
}

// GetIndexId returns the IndexId field value if set, zero value otherwise.
func (o *SearchPool) GetIndexId() string {
	if o == nil || IsNil(o.IndexId) {
		var ret string
		return ret
	}
	return *o.IndexId
}

// GetIndexIdOk returns a tuple with the IndexId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPool) GetIndexIdOk() (*string, bool) {
	if o == nil || IsNil(o.IndexId) {
		return nil, false
	}
	return o.IndexId, true
}

// HasIndexId returns a boolean if a field has been set.
func (o *SearchPool) HasIndexId() bool {
	if o != nil && !IsNil(o.IndexId) {
		return true
	}

	return false
}

// SetIndexId gets a reference to the given string and assigns it to the IndexId field.
func (o *SearchPool) SetIndexId(v string) {
	o.IndexId = &v
}

func (o SearchPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	if !IsNil(o.TotalDuration) {
		toSerialize["total_duration"] = o.TotalDuration
	}
	if !IsNil(o.IndexId) {
		toSerialize["index_id"] = o.IndexId
	}
	return toSerialize, nil
}

type NullableSearchPool struct {
	value *SearchPool
	isSet bool
}

func (v NullableSearchPool) Get() *SearchPool {
	return v.value
}

func (v *NullableSearchPool) Set(val *SearchPool) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPool) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPool(val *SearchPool) *NullableSearchPool {
	return &NullableSearchPool{value: val, isSet: true}
}

func (v NullableSearchPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


