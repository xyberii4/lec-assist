/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingResponse{}

// EmbeddingResponse An object that contains the generated embedding vector and associated information. 
type EmbeddingResponse struct {
	// The name of the video understanding model the platform has used to create this embedding.
	ModelName string `json:"model_name"`
	// An object that contains the generated text embedding vector and associated information. Present when a text was processed.
	TextEmbedding *TextEmbeddingResult `json:"text_embedding,omitempty"`
	// An object that contains the generated image embedding vector and associated information. Present when an image was processed.
	ImageEmbedding *ImageEmbeddingResult `json:"image_embedding,omitempty"`
	// An object that contains the generated audio embedding vector and associated information. Present when an audio file was processed.
	AudioEmbedding *AudioEmbeddingResult `json:"audio_embedding,omitempty"`
}

type _EmbeddingResponse EmbeddingResponse

// NewEmbeddingResponse instantiates a new EmbeddingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingResponse(modelName string) *EmbeddingResponse {
	this := EmbeddingResponse{}
	this.ModelName = modelName
	return &this
}

// NewEmbeddingResponseWithDefaults instantiates a new EmbeddingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingResponseWithDefaults() *EmbeddingResponse {
	this := EmbeddingResponse{}
	return &this
}

// GetModelName returns the ModelName field value
func (o *EmbeddingResponse) GetModelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetModelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelName, true
}

// SetModelName sets field value
func (o *EmbeddingResponse) SetModelName(v string) {
	o.ModelName = v
}

// GetTextEmbedding returns the TextEmbedding field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetTextEmbedding() TextEmbeddingResult {
	if o == nil || IsNil(o.TextEmbedding) {
		var ret TextEmbeddingResult
		return ret
	}
	return *o.TextEmbedding
}

// GetTextEmbeddingOk returns a tuple with the TextEmbedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetTextEmbeddingOk() (*TextEmbeddingResult, bool) {
	if o == nil || IsNil(o.TextEmbedding) {
		return nil, false
	}
	return o.TextEmbedding, true
}

// HasTextEmbedding returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasTextEmbedding() bool {
	if o != nil && !IsNil(o.TextEmbedding) {
		return true
	}

	return false
}

// SetTextEmbedding gets a reference to the given TextEmbeddingResult and assigns it to the TextEmbedding field.
func (o *EmbeddingResponse) SetTextEmbedding(v TextEmbeddingResult) {
	o.TextEmbedding = &v
}

// GetImageEmbedding returns the ImageEmbedding field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetImageEmbedding() ImageEmbeddingResult {
	if o == nil || IsNil(o.ImageEmbedding) {
		var ret ImageEmbeddingResult
		return ret
	}
	return *o.ImageEmbedding
}

// GetImageEmbeddingOk returns a tuple with the ImageEmbedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetImageEmbeddingOk() (*ImageEmbeddingResult, bool) {
	if o == nil || IsNil(o.ImageEmbedding) {
		return nil, false
	}
	return o.ImageEmbedding, true
}

// HasImageEmbedding returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasImageEmbedding() bool {
	if o != nil && !IsNil(o.ImageEmbedding) {
		return true
	}

	return false
}

// SetImageEmbedding gets a reference to the given ImageEmbeddingResult and assigns it to the ImageEmbedding field.
func (o *EmbeddingResponse) SetImageEmbedding(v ImageEmbeddingResult) {
	o.ImageEmbedding = &v
}

// GetAudioEmbedding returns the AudioEmbedding field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetAudioEmbedding() AudioEmbeddingResult {
	if o == nil || IsNil(o.AudioEmbedding) {
		var ret AudioEmbeddingResult
		return ret
	}
	return *o.AudioEmbedding
}

// GetAudioEmbeddingOk returns a tuple with the AudioEmbedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetAudioEmbeddingOk() (*AudioEmbeddingResult, bool) {
	if o == nil || IsNil(o.AudioEmbedding) {
		return nil, false
	}
	return o.AudioEmbedding, true
}

// HasAudioEmbedding returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasAudioEmbedding() bool {
	if o != nil && !IsNil(o.AudioEmbedding) {
		return true
	}

	return false
}

// SetAudioEmbedding gets a reference to the given AudioEmbeddingResult and assigns it to the AudioEmbedding field.
func (o *EmbeddingResponse) SetAudioEmbedding(v AudioEmbeddingResult) {
	o.AudioEmbedding = &v
}

func (o EmbeddingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model_name"] = o.ModelName
	if !IsNil(o.TextEmbedding) {
		toSerialize["text_embedding"] = o.TextEmbedding
	}
	if !IsNil(o.ImageEmbedding) {
		toSerialize["image_embedding"] = o.ImageEmbedding
	}
	if !IsNil(o.AudioEmbedding) {
		toSerialize["audio_embedding"] = o.AudioEmbedding
	}
	return toSerialize, nil
}

func (o *EmbeddingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingResponse := _EmbeddingResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddingResponse)

	if err != nil {
		return err
	}

	*o = EmbeddingResponse(varEmbeddingResponse)

	return err
}

type NullableEmbeddingResponse struct {
	value *EmbeddingResponse
	isSet bool
}

func (v NullableEmbeddingResponse) Get() *EmbeddingResponse {
	return v.value
}

func (v *NullableEmbeddingResponse) Set(val *EmbeddingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingResponse(val *EmbeddingResponse) *NullableEmbeddingResponse {
	return &NullableEmbeddingResponse{value: val, isSet: true}
}

func (v NullableEmbeddingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


