/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the Gist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gist{}

// Gist Generated title, topics, and hashtags for the specified video. 
type Gist struct {
	// Unique identifier of the response. 
	Id *string `json:"id,omitempty"`
	// Suggested title for the video. 
	Title *string `json:"title,omitempty"`
	// An array of topics that are relevant to the video. 
	Topics []string `json:"topics,omitempty"`
	// An array of hashtags that are relevant to the video. 
	Hashtags []string `json:"hashtags,omitempty"`
	Usage *TokenUsage `json:"usage,omitempty"`
}

// NewGist instantiates a new Gist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGist() *Gist {
	this := Gist{}
	return &this
}

// NewGistWithDefaults instantiates a new Gist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistWithDefaults() *Gist {
	this := Gist{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Gist) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gist) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Gist) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Gist) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Gist) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gist) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Gist) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Gist) SetTitle(v string) {
	o.Title = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *Gist) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gist) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *Gist) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *Gist) SetTopics(v []string) {
	o.Topics = v
}

// GetHashtags returns the Hashtags field value if set, zero value otherwise.
func (o *Gist) GetHashtags() []string {
	if o == nil || IsNil(o.Hashtags) {
		var ret []string
		return ret
	}
	return o.Hashtags
}

// GetHashtagsOk returns a tuple with the Hashtags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gist) GetHashtagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hashtags) {
		return nil, false
	}
	return o.Hashtags, true
}

// HasHashtags returns a boolean if a field has been set.
func (o *Gist) HasHashtags() bool {
	if o != nil && !IsNil(o.Hashtags) {
		return true
	}

	return false
}

// SetHashtags gets a reference to the given []string and assigns it to the Hashtags field.
func (o *Gist) SetHashtags(v []string) {
	o.Hashtags = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *Gist) GetUsage() TokenUsage {
	if o == nil || IsNil(o.Usage) {
		var ret TokenUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gist) GetUsageOk() (*TokenUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *Gist) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given TokenUsage and assigns it to the Usage field.
func (o *Gist) SetUsage(v TokenUsage) {
	o.Usage = &v
}

func (o Gist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.Hashtags) {
		toSerialize["hashtags"] = o.Hashtags
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableGist struct {
	value *Gist
	isSet bool
}

func (v NullableGist) Get() *Gist {
	return v.value
}

func (v *NullableGist) Set(val *Gist) {
	v.value = val
	v.isSet = true
}

func (v NullableGist) IsSet() bool {
	return v.isSet
}

func (v *NullableGist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGist(val *Gist) *NullableGist {
	return &NullableGist{value: val, isSet: true}
}

func (v NullableGist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


