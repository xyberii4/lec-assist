/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"fmt"
)

// ThresholdSearch Use this parameter to filter on the level of confidence that the results match your query.  **Default**: `low` 
type ThresholdSearch string

// List of threshold_search
const (
	HIGH ThresholdSearch = "high"
	MEDIUM ThresholdSearch = "medium"
	LOW ThresholdSearch = "low"
	NONE ThresholdSearch = "none"
)

// All allowed values of ThresholdSearch enum
var AllowedThresholdSearchEnumValues = []ThresholdSearch{
	"high",
	"medium",
	"low",
	"none",
}

func (v *ThresholdSearch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThresholdSearch(value)
	for _, existing := range AllowedThresholdSearchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThresholdSearch", value)
}

// NewThresholdSearchFromValue returns a pointer to a valid ThresholdSearch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThresholdSearchFromValue(v string) (*ThresholdSearch, error) {
	ev := ThresholdSearch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThresholdSearch: valid values are %v", v, AllowedThresholdSearchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThresholdSearch) IsValid() bool {
	for _, existing := range AllowedThresholdSearchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to threshold_search value
func (v ThresholdSearch) Ptr() *ThresholdSearch {
	return &v
}

type NullableThresholdSearch struct {
	value *ThresholdSearch
	isSet bool
}

func (v NullableThresholdSearch) Get() *ThresholdSearch {
	return v.value
}

func (v *NullableThresholdSearch) Set(val *ThresholdSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdSearch(val *ThresholdSearch) *NullableThresholdSearch {
	return &NullableThresholdSearch{value: val, isSet: true}
}

func (v NullableThresholdSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

