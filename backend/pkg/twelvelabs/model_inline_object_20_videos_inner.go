/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject20VideosInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject20VideosInner{}

// InlineObject20VideosInner struct for InlineObject20VideosInner
type InlineObject20VideosInner struct {
	// The unique identifier of a video. This identifier serves a dual purpose: - It identifies the video itself. - It identifies the associated video indexing task.  For example, due to this dual functionality, you can use this identifier to: - Retrieve details about the video itself by invoking the [`GET`](/v1.3/api-reference/videos/retrieve) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. - Retrieve the status of the video indexing task by invoking the [`GET`](/v1.3/api-reference/tasks/retrieve) method of the `/tasks/{task_id}` endpoint. 
	VideoId *string `json:"video_id,omitempty"`
	// The filename of the video.
	Filename *string `json:"filename,omitempty"`
}

// NewInlineObject20VideosInner instantiates a new InlineObject20VideosInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject20VideosInner() *InlineObject20VideosInner {
	this := InlineObject20VideosInner{}
	return &this
}

// NewInlineObject20VideosInnerWithDefaults instantiates a new InlineObject20VideosInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject20VideosInnerWithDefaults() *InlineObject20VideosInner {
	this := InlineObject20VideosInner{}
	return &this
}

// GetVideoId returns the VideoId field value if set, zero value otherwise.
func (o *InlineObject20VideosInner) GetVideoId() string {
	if o == nil || IsNil(o.VideoId) {
		var ret string
		return ret
	}
	return *o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject20VideosInner) GetVideoIdOk() (*string, bool) {
	if o == nil || IsNil(o.VideoId) {
		return nil, false
	}
	return o.VideoId, true
}

// HasVideoId returns a boolean if a field has been set.
func (o *InlineObject20VideosInner) HasVideoId() bool {
	if o != nil && !IsNil(o.VideoId) {
		return true
	}

	return false
}

// SetVideoId gets a reference to the given string and assigns it to the VideoId field.
func (o *InlineObject20VideosInner) SetVideoId(v string) {
	o.VideoId = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *InlineObject20VideosInner) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject20VideosInner) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *InlineObject20VideosInner) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *InlineObject20VideosInner) SetFilename(v string) {
	o.Filename = &v
}

func (o InlineObject20VideosInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject20VideosInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VideoId) {
		toSerialize["video_id"] = o.VideoId
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	return toSerialize, nil
}

type NullableInlineObject20VideosInner struct {
	value *InlineObject20VideosInner
	isSet bool
}

func (v NullableInlineObject20VideosInner) Get() *InlineObject20VideosInner {
	return v.value
}

func (v *NullableInlineObject20VideosInner) Set(val *InlineObject20VideosInner) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject20VideosInner) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject20VideosInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject20VideosInner(val *InlineObject20VideosInner) *NullableInlineObject20VideosInner {
	return &NullableInlineObject20VideosInner{value: val, isSet: true}
}

func (v NullableInlineObject20VideosInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject20VideosInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


