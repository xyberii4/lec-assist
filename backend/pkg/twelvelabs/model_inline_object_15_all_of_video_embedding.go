/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject15AllOfVideoEmbedding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject15AllOfVideoEmbedding{}

// InlineObject15AllOfVideoEmbedding struct for InlineObject15AllOfVideoEmbedding
type InlineObject15AllOfVideoEmbedding struct {
	Metadata *VideoEmbeddingMetadata `json:"metadata,omitempty"`
	// An array of objects containing the embeddings for each video segment and the associated information. 
	Segments []VideoSegment `json:"segments,omitempty"`
}

// NewInlineObject15AllOfVideoEmbedding instantiates a new InlineObject15AllOfVideoEmbedding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject15AllOfVideoEmbedding() *InlineObject15AllOfVideoEmbedding {
	this := InlineObject15AllOfVideoEmbedding{}
	return &this
}

// NewInlineObject15AllOfVideoEmbeddingWithDefaults instantiates a new InlineObject15AllOfVideoEmbedding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject15AllOfVideoEmbeddingWithDefaults() *InlineObject15AllOfVideoEmbedding {
	this := InlineObject15AllOfVideoEmbedding{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InlineObject15AllOfVideoEmbedding) GetMetadata() VideoEmbeddingMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret VideoEmbeddingMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject15AllOfVideoEmbedding) GetMetadataOk() (*VideoEmbeddingMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InlineObject15AllOfVideoEmbedding) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given VideoEmbeddingMetadata and assigns it to the Metadata field.
func (o *InlineObject15AllOfVideoEmbedding) SetMetadata(v VideoEmbeddingMetadata) {
	o.Metadata = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *InlineObject15AllOfVideoEmbedding) GetSegments() []VideoSegment {
	if o == nil || IsNil(o.Segments) {
		var ret []VideoSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject15AllOfVideoEmbedding) GetSegmentsOk() ([]VideoSegment, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *InlineObject15AllOfVideoEmbedding) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []VideoSegment and assigns it to the Segments field.
func (o *InlineObject15AllOfVideoEmbedding) SetSegments(v []VideoSegment) {
	o.Segments = v
}

func (o InlineObject15AllOfVideoEmbedding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject15AllOfVideoEmbedding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	return toSerialize, nil
}

type NullableInlineObject15AllOfVideoEmbedding struct {
	value *InlineObject15AllOfVideoEmbedding
	isSet bool
}

func (v NullableInlineObject15AllOfVideoEmbedding) Get() *InlineObject15AllOfVideoEmbedding {
	return v.value
}

func (v *NullableInlineObject15AllOfVideoEmbedding) Set(val *InlineObject15AllOfVideoEmbedding) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject15AllOfVideoEmbedding) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject15AllOfVideoEmbedding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject15AllOfVideoEmbedding(val *InlineObject15AllOfVideoEmbedding) *NullableInlineObject15AllOfVideoEmbedding {
	return &NullableInlineObject15AllOfVideoEmbedding{value: val, isSet: true}
}

func (v NullableInlineObject15AllOfVideoEmbedding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject15AllOfVideoEmbedding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


