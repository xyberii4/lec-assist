/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the HLSObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HLSObject{}

// HLSObject The platform returns this object only for the videos that you uploaded with the `enable_video_stream` parameter set to `true`.
type HLSObject struct {
	// A string representing the URL of the video. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol.
	VideoUrl *string `json:"video_url,omitempty"`
	// An array containing the URL of the thumbnail.
	ThumbnailUrls []string `json:"thumbnail_urls,omitempty"`
	// A string representing the encoding status of the video file from its original format to a streamable format. Possible values: - `PROCESSING`: Video is currently being encoded and is not yet ready for streaming - `COMPLETE`: Encoding has successfully finished and the video is ready for streaming - `CANCELED`: Encoding was manually canceled before completion - `ERROR`: An error occurred during the encoding process 
	Status *string `json:"status,omitempty"`
	// A string indicating the date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewHLSObject instantiates a new HLSObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHLSObject() *HLSObject {
	this := HLSObject{}
	return &this
}

// NewHLSObjectWithDefaults instantiates a new HLSObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHLSObjectWithDefaults() *HLSObject {
	this := HLSObject{}
	return &this
}

// GetVideoUrl returns the VideoUrl field value if set, zero value otherwise.
func (o *HLSObject) GetVideoUrl() string {
	if o == nil || IsNil(o.VideoUrl) {
		var ret string
		return ret
	}
	return *o.VideoUrl
}

// GetVideoUrlOk returns a tuple with the VideoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSObject) GetVideoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VideoUrl) {
		return nil, false
	}
	return o.VideoUrl, true
}

// HasVideoUrl returns a boolean if a field has been set.
func (o *HLSObject) HasVideoUrl() bool {
	if o != nil && !IsNil(o.VideoUrl) {
		return true
	}

	return false
}

// SetVideoUrl gets a reference to the given string and assigns it to the VideoUrl field.
func (o *HLSObject) SetVideoUrl(v string) {
	o.VideoUrl = &v
}

// GetThumbnailUrls returns the ThumbnailUrls field value if set, zero value otherwise.
func (o *HLSObject) GetThumbnailUrls() []string {
	if o == nil || IsNil(o.ThumbnailUrls) {
		var ret []string
		return ret
	}
	return o.ThumbnailUrls
}

// GetThumbnailUrlsOk returns a tuple with the ThumbnailUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSObject) GetThumbnailUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.ThumbnailUrls) {
		return nil, false
	}
	return o.ThumbnailUrls, true
}

// HasThumbnailUrls returns a boolean if a field has been set.
func (o *HLSObject) HasThumbnailUrls() bool {
	if o != nil && !IsNil(o.ThumbnailUrls) {
		return true
	}

	return false
}

// SetThumbnailUrls gets a reference to the given []string and assigns it to the ThumbnailUrls field.
func (o *HLSObject) SetThumbnailUrls(v []string) {
	o.ThumbnailUrls = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HLSObject) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSObject) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HLSObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HLSObject) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *HLSObject) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSObject) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *HLSObject) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *HLSObject) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o HLSObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HLSObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VideoUrl) {
		toSerialize["video_url"] = o.VideoUrl
	}
	if !IsNil(o.ThumbnailUrls) {
		toSerialize["thumbnail_urls"] = o.ThumbnailUrls
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableHLSObject struct {
	value *HLSObject
	isSet bool
}

func (v NullableHLSObject) Get() *HLSObject {
	return v.value
}

func (v *NullableHLSObject) Set(val *HLSObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHLSObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHLSObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHLSObject(val *HLSObject) *NullableHLSObject {
	return &NullableHLSObject{value: val, isSet: true}
}

func (v NullableHLSObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHLSObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


