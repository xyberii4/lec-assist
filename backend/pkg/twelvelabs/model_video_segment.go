/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the VideoSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoSegment{}

// VideoSegment An object that contains the video embedding and its start time. Each segment is between 2 and 10 seconds. 
type VideoSegment struct {
	// An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.
	Float []float32 `json:"float,omitempty"`
	// The start time, in seconds, from which the platform generated the audio embedding.
	StartOffsetSec *float32 `json:"start_offset_sec,omitempty"`
	// The end time, in seconds, of the video segment for this embedding.
	EndOffsetSec *float32 `json:"end_offset_sec,omitempty"`
	// The type of the embedding.
	EmbeddingOption *string `json:"embedding_option,omitempty"`
	// The scope of the video embedding.
	EmbeddingScope *string `json:"embedding_scope,omitempty"`
}

// NewVideoSegment instantiates a new VideoSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSegment() *VideoSegment {
	this := VideoSegment{}
	return &this
}

// NewVideoSegmentWithDefaults instantiates a new VideoSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSegmentWithDefaults() *VideoSegment {
	this := VideoSegment{}
	return &this
}

// GetFloat returns the Float field value if set, zero value otherwise.
func (o *VideoSegment) GetFloat() []float32 {
	if o == nil || IsNil(o.Float) {
		var ret []float32
		return ret
	}
	return o.Float
}

// GetFloatOk returns a tuple with the Float field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSegment) GetFloatOk() ([]float32, bool) {
	if o == nil || IsNil(o.Float) {
		return nil, false
	}
	return o.Float, true
}

// HasFloat returns a boolean if a field has been set.
func (o *VideoSegment) HasFloat() bool {
	if o != nil && !IsNil(o.Float) {
		return true
	}

	return false
}

// SetFloat gets a reference to the given []float32 and assigns it to the Float field.
func (o *VideoSegment) SetFloat(v []float32) {
	o.Float = v
}

// GetStartOffsetSec returns the StartOffsetSec field value if set, zero value otherwise.
func (o *VideoSegment) GetStartOffsetSec() float32 {
	if o == nil || IsNil(o.StartOffsetSec) {
		var ret float32
		return ret
	}
	return *o.StartOffsetSec
}

// GetStartOffsetSecOk returns a tuple with the StartOffsetSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSegment) GetStartOffsetSecOk() (*float32, bool) {
	if o == nil || IsNil(o.StartOffsetSec) {
		return nil, false
	}
	return o.StartOffsetSec, true
}

// HasStartOffsetSec returns a boolean if a field has been set.
func (o *VideoSegment) HasStartOffsetSec() bool {
	if o != nil && !IsNil(o.StartOffsetSec) {
		return true
	}

	return false
}

// SetStartOffsetSec gets a reference to the given float32 and assigns it to the StartOffsetSec field.
func (o *VideoSegment) SetStartOffsetSec(v float32) {
	o.StartOffsetSec = &v
}

// GetEndOffsetSec returns the EndOffsetSec field value if set, zero value otherwise.
func (o *VideoSegment) GetEndOffsetSec() float32 {
	if o == nil || IsNil(o.EndOffsetSec) {
		var ret float32
		return ret
	}
	return *o.EndOffsetSec
}

// GetEndOffsetSecOk returns a tuple with the EndOffsetSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSegment) GetEndOffsetSecOk() (*float32, bool) {
	if o == nil || IsNil(o.EndOffsetSec) {
		return nil, false
	}
	return o.EndOffsetSec, true
}

// HasEndOffsetSec returns a boolean if a field has been set.
func (o *VideoSegment) HasEndOffsetSec() bool {
	if o != nil && !IsNil(o.EndOffsetSec) {
		return true
	}

	return false
}

// SetEndOffsetSec gets a reference to the given float32 and assigns it to the EndOffsetSec field.
func (o *VideoSegment) SetEndOffsetSec(v float32) {
	o.EndOffsetSec = &v
}

// GetEmbeddingOption returns the EmbeddingOption field value if set, zero value otherwise.
func (o *VideoSegment) GetEmbeddingOption() string {
	if o == nil || IsNil(o.EmbeddingOption) {
		var ret string
		return ret
	}
	return *o.EmbeddingOption
}

// GetEmbeddingOptionOk returns a tuple with the EmbeddingOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSegment) GetEmbeddingOptionOk() (*string, bool) {
	if o == nil || IsNil(o.EmbeddingOption) {
		return nil, false
	}
	return o.EmbeddingOption, true
}

// HasEmbeddingOption returns a boolean if a field has been set.
func (o *VideoSegment) HasEmbeddingOption() bool {
	if o != nil && !IsNil(o.EmbeddingOption) {
		return true
	}

	return false
}

// SetEmbeddingOption gets a reference to the given string and assigns it to the EmbeddingOption field.
func (o *VideoSegment) SetEmbeddingOption(v string) {
	o.EmbeddingOption = &v
}

// GetEmbeddingScope returns the EmbeddingScope field value if set, zero value otherwise.
func (o *VideoSegment) GetEmbeddingScope() string {
	if o == nil || IsNil(o.EmbeddingScope) {
		var ret string
		return ret
	}
	return *o.EmbeddingScope
}

// GetEmbeddingScopeOk returns a tuple with the EmbeddingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSegment) GetEmbeddingScopeOk() (*string, bool) {
	if o == nil || IsNil(o.EmbeddingScope) {
		return nil, false
	}
	return o.EmbeddingScope, true
}

// HasEmbeddingScope returns a boolean if a field has been set.
func (o *VideoSegment) HasEmbeddingScope() bool {
	if o != nil && !IsNil(o.EmbeddingScope) {
		return true
	}

	return false
}

// SetEmbeddingScope gets a reference to the given string and assigns it to the EmbeddingScope field.
func (o *VideoSegment) SetEmbeddingScope(v string) {
	o.EmbeddingScope = &v
}

func (o VideoSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Float) {
		toSerialize["float"] = o.Float
	}
	if !IsNil(o.StartOffsetSec) {
		toSerialize["start_offset_sec"] = o.StartOffsetSec
	}
	if !IsNil(o.EndOffsetSec) {
		toSerialize["end_offset_sec"] = o.EndOffsetSec
	}
	if !IsNil(o.EmbeddingOption) {
		toSerialize["embedding_option"] = o.EmbeddingOption
	}
	if !IsNil(o.EmbeddingScope) {
		toSerialize["embedding_scope"] = o.EmbeddingScope
	}
	return toSerialize, nil
}

type NullableVideoSegment struct {
	value *VideoSegment
	isSet bool
}

func (v NullableVideoSegment) Get() *VideoSegment {
	return v.value
}

func (v *NullableVideoSegment) Set(val *VideoSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSegment(val *VideoSegment) *NullableVideoSegment {
	return &NullableVideoSegment{value: val, isSet: true}
}

func (v NullableVideoSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


