/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the AudioSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioSegment{}

// AudioSegment An object that contains the audio embedding and its start time. 
type AudioSegment struct {
	// An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.
	Float []float32 `json:"float,omitempty"`
	// The start time, in seconds, from which the platform generated the audio embedding.
	StartOffsetSec *float32 `json:"start_offset_sec,omitempty"`
}

// NewAudioSegment instantiates a new AudioSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioSegment() *AudioSegment {
	this := AudioSegment{}
	return &this
}

// NewAudioSegmentWithDefaults instantiates a new AudioSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioSegmentWithDefaults() *AudioSegment {
	this := AudioSegment{}
	return &this
}

// GetFloat returns the Float field value if set, zero value otherwise.
func (o *AudioSegment) GetFloat() []float32 {
	if o == nil || IsNil(o.Float) {
		var ret []float32
		return ret
	}
	return o.Float
}

// GetFloatOk returns a tuple with the Float field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioSegment) GetFloatOk() ([]float32, bool) {
	if o == nil || IsNil(o.Float) {
		return nil, false
	}
	return o.Float, true
}

// HasFloat returns a boolean if a field has been set.
func (o *AudioSegment) HasFloat() bool {
	if o != nil && !IsNil(o.Float) {
		return true
	}

	return false
}

// SetFloat gets a reference to the given []float32 and assigns it to the Float field.
func (o *AudioSegment) SetFloat(v []float32) {
	o.Float = v
}

// GetStartOffsetSec returns the StartOffsetSec field value if set, zero value otherwise.
func (o *AudioSegment) GetStartOffsetSec() float32 {
	if o == nil || IsNil(o.StartOffsetSec) {
		var ret float32
		return ret
	}
	return *o.StartOffsetSec
}

// GetStartOffsetSecOk returns a tuple with the StartOffsetSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioSegment) GetStartOffsetSecOk() (*float32, bool) {
	if o == nil || IsNil(o.StartOffsetSec) {
		return nil, false
	}
	return o.StartOffsetSec, true
}

// HasStartOffsetSec returns a boolean if a field has been set.
func (o *AudioSegment) HasStartOffsetSec() bool {
	if o != nil && !IsNil(o.StartOffsetSec) {
		return true
	}

	return false
}

// SetStartOffsetSec gets a reference to the given float32 and assigns it to the StartOffsetSec field.
func (o *AudioSegment) SetStartOffsetSec(v float32) {
	o.StartOffsetSec = &v
}

func (o AudioSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Float) {
		toSerialize["float"] = o.Float
	}
	if !IsNil(o.StartOffsetSec) {
		toSerialize["start_offset_sec"] = o.StartOffsetSec
	}
	return toSerialize, nil
}

type NullableAudioSegment struct {
	value *AudioSegment
	isSet bool
}

func (v NullableAudioSegment) Get() *AudioSegment {
	return v.value
}

func (v *NullableAudioSegment) Set(val *AudioSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioSegment(val *AudioSegment) *NullableAudioSegment {
	return &NullableAudioSegment{value: val, isSet: true}
}

func (v NullableAudioSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


