/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ListVideosUserMetadataParameterValue - struct for ListVideosUserMetadataParameterValue
type ListVideosUserMetadataParameterValue struct {
	Bool *bool
	Float32 *float32
	String *string
}

// boolAsListVideosUserMetadataParameterValue is a convenience function that returns bool wrapped in ListVideosUserMetadataParameterValue
func BoolAsListVideosUserMetadataParameterValue(v *bool) ListVideosUserMetadataParameterValue {
	return ListVideosUserMetadataParameterValue{
		Bool: v,
	}
}

// float32AsListVideosUserMetadataParameterValue is a convenience function that returns float32 wrapped in ListVideosUserMetadataParameterValue
func Float32AsListVideosUserMetadataParameterValue(v *float32) ListVideosUserMetadataParameterValue {
	return ListVideosUserMetadataParameterValue{
		Float32: v,
	}
}

// stringAsListVideosUserMetadataParameterValue is a convenience function that returns string wrapped in ListVideosUserMetadataParameterValue
func StringAsListVideosUserMetadataParameterValue(v *string) ListVideosUserMetadataParameterValue {
	return ListVideosUserMetadataParameterValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListVideosUserMetadataParameterValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListVideosUserMetadataParameterValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListVideosUserMetadataParameterValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListVideosUserMetadataParameterValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListVideosUserMetadataParameterValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ListVideosUserMetadataParameterValue) GetActualInstanceValue() (interface{}) {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableListVideosUserMetadataParameterValue struct {
	value *ListVideosUserMetadataParameterValue
	isSet bool
}

func (v NullableListVideosUserMetadataParameterValue) Get() *ListVideosUserMetadataParameterValue {
	return v.value
}

func (v *NullableListVideosUserMetadataParameterValue) Set(val *ListVideosUserMetadataParameterValue) {
	v.value = val
	v.isSet = true
}

func (v NullableListVideosUserMetadataParameterValue) IsSet() bool {
	return v.isSet
}

func (v *NullableListVideosUserMetadataParameterValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListVideosUserMetadataParameterValue(val *ListVideosUserMetadataParameterValue) *NullableListVideosUserMetadataParameterValue {
	return &NullableListVideosUserMetadataParameterValue{value: val, isSet: true}
}

func (v NullableListVideosUserMetadataParameterValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListVideosUserMetadataParameterValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


