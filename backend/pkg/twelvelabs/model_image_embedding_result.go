/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the ImageEmbeddingResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageEmbeddingResult{}

// ImageEmbeddingResult An object containing the generated embedding vector and associated information.
type ImageEmbeddingResult struct {
	// Error message if the embedding generation failed.
	ErrorMessage *string `json:"error_message,omitempty"`
	// An object that contains the embedding. 
	Segments []BaseSegment `json:"segments,omitempty"`
	Metadata *BaseEmbeddingMetadata `json:"metadata,omitempty"`
}

// NewImageEmbeddingResult instantiates a new ImageEmbeddingResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageEmbeddingResult() *ImageEmbeddingResult {
	this := ImageEmbeddingResult{}
	return &this
}

// NewImageEmbeddingResultWithDefaults instantiates a new ImageEmbeddingResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageEmbeddingResultWithDefaults() *ImageEmbeddingResult {
	this := ImageEmbeddingResult{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ImageEmbeddingResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageEmbeddingResult) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ImageEmbeddingResult) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ImageEmbeddingResult) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *ImageEmbeddingResult) GetSegments() []BaseSegment {
	if o == nil || IsNil(o.Segments) {
		var ret []BaseSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageEmbeddingResult) GetSegmentsOk() ([]BaseSegment, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *ImageEmbeddingResult) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []BaseSegment and assigns it to the Segments field.
func (o *ImageEmbeddingResult) SetSegments(v []BaseSegment) {
	o.Segments = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ImageEmbeddingResult) GetMetadata() BaseEmbeddingMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret BaseEmbeddingMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageEmbeddingResult) GetMetadataOk() (*BaseEmbeddingMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ImageEmbeddingResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given BaseEmbeddingMetadata and assigns it to the Metadata field.
func (o *ImageEmbeddingResult) SetMetadata(v BaseEmbeddingMetadata) {
	o.Metadata = &v
}

func (o ImageEmbeddingResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageEmbeddingResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableImageEmbeddingResult struct {
	value *ImageEmbeddingResult
	isSet bool
}

func (v NullableImageEmbeddingResult) Get() *ImageEmbeddingResult {
	return v.value
}

func (v *NullableImageEmbeddingResult) Set(val *ImageEmbeddingResult) {
	v.value = val
	v.isSet = true
}

func (v NullableImageEmbeddingResult) IsSet() bool {
	return v.isSet
}

func (v *NullableImageEmbeddingResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageEmbeddingResult(val *ImageEmbeddingResult) *NullableImageEmbeddingResult {
	return &NullableImageEmbeddingResult{value: val, isSet: true}
}

func (v NullableImageEmbeddingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageEmbeddingResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


