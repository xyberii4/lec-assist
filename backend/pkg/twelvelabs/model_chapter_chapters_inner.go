/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the ChapterChaptersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChapterChaptersInner{}

// ChapterChaptersInner An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary. 
type ChapterChaptersInner struct {
	// Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application. 
	ChapterNumber *int32 `json:"chapter_number,omitempty"`
	// The starting time of the chapter, measured in seconds from the beginning of the video. 
	Start *int32 `json:"start,omitempty"`
	// The ending time of the chapter, measured in seconds from the beginning of the video. 
	End *int32 `json:"end,omitempty"`
	// The title of the chapter. 
	ChapterTitle *string `json:"chapter_title,omitempty"`
	// A brief summary describing the content of the chapter. 
	ChapterSummary *string `json:"chapter_summary,omitempty"`
}

// NewChapterChaptersInner instantiates a new ChapterChaptersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChapterChaptersInner() *ChapterChaptersInner {
	this := ChapterChaptersInner{}
	return &this
}

// NewChapterChaptersInnerWithDefaults instantiates a new ChapterChaptersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChapterChaptersInnerWithDefaults() *ChapterChaptersInner {
	this := ChapterChaptersInner{}
	return &this
}

// GetChapterNumber returns the ChapterNumber field value if set, zero value otherwise.
func (o *ChapterChaptersInner) GetChapterNumber() int32 {
	if o == nil || IsNil(o.ChapterNumber) {
		var ret int32
		return ret
	}
	return *o.ChapterNumber
}

// GetChapterNumberOk returns a tuple with the ChapterNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChapterChaptersInner) GetChapterNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.ChapterNumber) {
		return nil, false
	}
	return o.ChapterNumber, true
}

// HasChapterNumber returns a boolean if a field has been set.
func (o *ChapterChaptersInner) HasChapterNumber() bool {
	if o != nil && !IsNil(o.ChapterNumber) {
		return true
	}

	return false
}

// SetChapterNumber gets a reference to the given int32 and assigns it to the ChapterNumber field.
func (o *ChapterChaptersInner) SetChapterNumber(v int32) {
	o.ChapterNumber = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ChapterChaptersInner) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChapterChaptersInner) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ChapterChaptersInner) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *ChapterChaptersInner) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ChapterChaptersInner) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChapterChaptersInner) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ChapterChaptersInner) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *ChapterChaptersInner) SetEnd(v int32) {
	o.End = &v
}

// GetChapterTitle returns the ChapterTitle field value if set, zero value otherwise.
func (o *ChapterChaptersInner) GetChapterTitle() string {
	if o == nil || IsNil(o.ChapterTitle) {
		var ret string
		return ret
	}
	return *o.ChapterTitle
}

// GetChapterTitleOk returns a tuple with the ChapterTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChapterChaptersInner) GetChapterTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ChapterTitle) {
		return nil, false
	}
	return o.ChapterTitle, true
}

// HasChapterTitle returns a boolean if a field has been set.
func (o *ChapterChaptersInner) HasChapterTitle() bool {
	if o != nil && !IsNil(o.ChapterTitle) {
		return true
	}

	return false
}

// SetChapterTitle gets a reference to the given string and assigns it to the ChapterTitle field.
func (o *ChapterChaptersInner) SetChapterTitle(v string) {
	o.ChapterTitle = &v
}

// GetChapterSummary returns the ChapterSummary field value if set, zero value otherwise.
func (o *ChapterChaptersInner) GetChapterSummary() string {
	if o == nil || IsNil(o.ChapterSummary) {
		var ret string
		return ret
	}
	return *o.ChapterSummary
}

// GetChapterSummaryOk returns a tuple with the ChapterSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChapterChaptersInner) GetChapterSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.ChapterSummary) {
		return nil, false
	}
	return o.ChapterSummary, true
}

// HasChapterSummary returns a boolean if a field has been set.
func (o *ChapterChaptersInner) HasChapterSummary() bool {
	if o != nil && !IsNil(o.ChapterSummary) {
		return true
	}

	return false
}

// SetChapterSummary gets a reference to the given string and assigns it to the ChapterSummary field.
func (o *ChapterChaptersInner) SetChapterSummary(v string) {
	o.ChapterSummary = &v
}

func (o ChapterChaptersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChapterChaptersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChapterNumber) {
		toSerialize["chapter_number"] = o.ChapterNumber
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.ChapterTitle) {
		toSerialize["chapter_title"] = o.ChapterTitle
	}
	if !IsNil(o.ChapterSummary) {
		toSerialize["chapter_summary"] = o.ChapterSummary
	}
	return toSerialize, nil
}

type NullableChapterChaptersInner struct {
	value *ChapterChaptersInner
	isSet bool
}

func (v NullableChapterChaptersInner) Get() *ChapterChaptersInner {
	return v.value
}

func (v *NullableChapterChaptersInner) Set(val *ChapterChaptersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChapterChaptersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChapterChaptersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChapterChaptersInner(val *ChapterChaptersInner) *NullableChapterChaptersInner {
	return &NullableChapterChaptersInner{value: val, isSet: true}
}

func (v NullableChapterChaptersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChapterChaptersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


