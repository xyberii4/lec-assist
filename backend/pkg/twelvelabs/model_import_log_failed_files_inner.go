/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the ImportLogFailedFilesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportLogFailedFilesInner{}

// ImportLogFailedFilesInner struct for ImportLogFailedFilesInner
type ImportLogFailedFilesInner struct {
	// The name of the video file that failed to import.
	Filename *string `json:"filename,omitempty"`
	// A human-readable error message.
	ErrorMessage *string `json:"error_message,omitempty"`
}

// NewImportLogFailedFilesInner instantiates a new ImportLogFailedFilesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportLogFailedFilesInner() *ImportLogFailedFilesInner {
	this := ImportLogFailedFilesInner{}
	return &this
}

// NewImportLogFailedFilesInnerWithDefaults instantiates a new ImportLogFailedFilesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportLogFailedFilesInnerWithDefaults() *ImportLogFailedFilesInner {
	this := ImportLogFailedFilesInner{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *ImportLogFailedFilesInner) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLogFailedFilesInner) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *ImportLogFailedFilesInner) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *ImportLogFailedFilesInner) SetFilename(v string) {
	o.Filename = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ImportLogFailedFilesInner) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportLogFailedFilesInner) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ImportLogFailedFilesInner) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ImportLogFailedFilesInner) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o ImportLogFailedFilesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportLogFailedFilesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	return toSerialize, nil
}

type NullableImportLogFailedFilesInner struct {
	value *ImportLogFailedFilesInner
	isSet bool
}

func (v NullableImportLogFailedFilesInner) Get() *ImportLogFailedFilesInner {
	return v.value
}

func (v *NullableImportLogFailedFilesInner) Set(val *ImportLogFailedFilesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableImportLogFailedFilesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableImportLogFailedFilesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportLogFailedFilesInner(val *ImportLogFailedFilesInner) *NullableImportLogFailedFilesInner {
	return &NullableImportLogFailedFilesInner{value: val, isSet: true}
}

func (v NullableImportLogFailedFilesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportLogFailedFilesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


