/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the SearchItemClipsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchItemClipsInner{}

// SearchItemClipsInner struct for SearchItemClipsInner
type SearchItemClipsInner struct {
	// A quantitative value determined by the AI model representing the level of confidence that the results match your search terms. 
	Score *float32 `json:"score,omitempty"`
	// The start time of the matching video clip, expressed in seconds. 
	Start *float32 `json:"start,omitempty"`
	// The end time of the matching video clip, expressed in seconds. 
	End *float32 `json:"end,omitempty"`
	// A qualitative indicator based on the value of the `score` field. This field can take one of the following values: - `high` - `medium` - `low` - `extremely low` 
	Confidence *string `json:"confidence,omitempty"`
	// If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour. 
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// A transcription of the spoken words that are captured in the clip. Note that the official SDKs will support this feature in a future release.
	Transcription *string `json:"transcription,omitempty"`
	// A string representing the unique identifier of the video for the corresponding clip.
	VideoId *string `json:"video_id,omitempty"`
	// Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.  **Example**: ```JSON \"user_metadata\": {   \"category\": \"recentlyAdded\",   \"batchNumber\": 5,   \"rating\": 9.3,   \"needsReview\": true } ```  <Note title=\"Notes\"> -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values. - You cannot override the following system-generated metadata fields:   - `duration`   - `filename`   - `fps`   - `height`   - `model_names`   - `size`   - `video_title`   - `width` </Note> 
	UserMetadata map[string]interface{} `json:"user_metadata,omitempty"`
}

// NewSearchItemClipsInner instantiates a new SearchItemClipsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchItemClipsInner() *SearchItemClipsInner {
	this := SearchItemClipsInner{}
	return &this
}

// NewSearchItemClipsInnerWithDefaults instantiates a new SearchItemClipsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchItemClipsInnerWithDefaults() *SearchItemClipsInner {
	this := SearchItemClipsInner{}
	return &this
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *SearchItemClipsInner) SetScore(v float32) {
	o.Score = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetStart() float32 {
	if o == nil || IsNil(o.Start) {
		var ret float32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetStartOk() (*float32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given float32 and assigns it to the Start field.
func (o *SearchItemClipsInner) SetStart(v float32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetEnd() float32 {
	if o == nil || IsNil(o.End) {
		var ret float32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetEndOk() (*float32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given float32 and assigns it to the End field.
func (o *SearchItemClipsInner) SetEnd(v float32) {
	o.End = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetConfidence() string {
	if o == nil || IsNil(o.Confidence) {
		var ret string
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetConfidenceOk() (*string, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given string and assigns it to the Confidence field.
func (o *SearchItemClipsInner) SetConfidence(v string) {
	o.Confidence = &v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *SearchItemClipsInner) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetTranscription() string {
	if o == nil || IsNil(o.Transcription) {
		var ret string
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetTranscriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given string and assigns it to the Transcription field.
func (o *SearchItemClipsInner) SetTranscription(v string) {
	o.Transcription = &v
}

// GetVideoId returns the VideoId field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetVideoId() string {
	if o == nil || IsNil(o.VideoId) {
		var ret string
		return ret
	}
	return *o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetVideoIdOk() (*string, bool) {
	if o == nil || IsNil(o.VideoId) {
		return nil, false
	}
	return o.VideoId, true
}

// HasVideoId returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasVideoId() bool {
	if o != nil && !IsNil(o.VideoId) {
		return true
	}

	return false
}

// SetVideoId gets a reference to the given string and assigns it to the VideoId field.
func (o *SearchItemClipsInner) SetVideoId(v string) {
	o.VideoId = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *SearchItemClipsInner) GetUserMetadata() map[string]interface{} {
	if o == nil || IsNil(o.UserMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchItemClipsInner) GetUserMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *SearchItemClipsInner) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]interface{} and assigns it to the UserMetadata field.
func (o *SearchItemClipsInner) SetUserMetadata(v map[string]interface{}) {
	o.UserMetadata = v
}

func (o SearchItemClipsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchItemClipsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.VideoId) {
		toSerialize["video_id"] = o.VideoId
	}
	if !IsNil(o.UserMetadata) {
		toSerialize["user_metadata"] = o.UserMetadata
	}
	return toSerialize, nil
}

type NullableSearchItemClipsInner struct {
	value *SearchItemClipsInner
	isSet bool
}

func (v NullableSearchItemClipsInner) Get() *SearchItemClipsInner {
	return v.value
}

func (v *NullableSearchItemClipsInner) Set(val *SearchItemClipsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchItemClipsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchItemClipsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchItemClipsInner(val *SearchItemClipsInner) *NullableSearchItemClipsInner {
	return &NullableSearchItemClipsInner{value: val, isSet: true}
}

func (v NullableSearchItemClipsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchItemClipsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


