/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the Highlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Highlight{}

// Highlight When the value of the `type` parameter is set to `highlight`, the response is as follows: 
type Highlight struct {
	// Unique identifier of the response. 
	Id *string `json:"id,omitempty"`
	// An array that contains the highlights. 
	Highlights []HighlightHighlightsInner `json:"highlights,omitempty"`
	Usage *TokenUsage `json:"usage,omitempty"`
}

// NewHighlight instantiates a new Highlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlight() *Highlight {
	this := Highlight{}
	return &this
}

// NewHighlightWithDefaults instantiates a new Highlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightWithDefaults() *Highlight {
	this := Highlight{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Highlight) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Highlight) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Highlight) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Highlight) SetId(v string) {
	o.Id = &v
}

// GetHighlights returns the Highlights field value if set, zero value otherwise.
func (o *Highlight) GetHighlights() []HighlightHighlightsInner {
	if o == nil || IsNil(o.Highlights) {
		var ret []HighlightHighlightsInner
		return ret
	}
	return o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Highlight) GetHighlightsOk() ([]HighlightHighlightsInner, bool) {
	if o == nil || IsNil(o.Highlights) {
		return nil, false
	}
	return o.Highlights, true
}

// HasHighlights returns a boolean if a field has been set.
func (o *Highlight) HasHighlights() bool {
	if o != nil && !IsNil(o.Highlights) {
		return true
	}

	return false
}

// SetHighlights gets a reference to the given []HighlightHighlightsInner and assigns it to the Highlights field.
func (o *Highlight) SetHighlights(v []HighlightHighlightsInner) {
	o.Highlights = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *Highlight) GetUsage() TokenUsage {
	if o == nil || IsNil(o.Usage) {
		var ret TokenUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Highlight) GetUsageOk() (*TokenUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *Highlight) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given TokenUsage and assigns it to the Usage field.
func (o *Highlight) SetUsage(v TokenUsage) {
	o.Usage = &v
}

func (o Highlight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Highlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Highlights) {
		toSerialize["highlights"] = o.Highlights
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableHighlight struct {
	value *Highlight
	isSet bool
}

func (v NullableHighlight) Get() *Highlight {
	return v.value
}

func (v *NullableHighlight) Set(val *Highlight) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlight(val *Highlight) *NullableHighlight {
	return &NullableHighlight{value: val, isSet: true}
}

func (v NullableHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


