/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the TranscriptionDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscriptionDataInner{}

// TranscriptionDataInner struct for TranscriptionDataInner
type TranscriptionDataInner struct {
	// The start of the time range, expressed in seconds.
	Start *float32 `json:"start,omitempty"`
	// The end of the time range, expressed in seconds.
	End *float32 `json:"end,omitempty"`
	// Text representing the spoken words within this time range.
	Value *string `json:"value,omitempty"`
}

// NewTranscriptionDataInner instantiates a new TranscriptionDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscriptionDataInner() *TranscriptionDataInner {
	this := TranscriptionDataInner{}
	return &this
}

// NewTranscriptionDataInnerWithDefaults instantiates a new TranscriptionDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionDataInnerWithDefaults() *TranscriptionDataInner {
	this := TranscriptionDataInner{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *TranscriptionDataInner) GetStart() float32 {
	if o == nil || IsNil(o.Start) {
		var ret float32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionDataInner) GetStartOk() (*float32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *TranscriptionDataInner) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given float32 and assigns it to the Start field.
func (o *TranscriptionDataInner) SetStart(v float32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *TranscriptionDataInner) GetEnd() float32 {
	if o == nil || IsNil(o.End) {
		var ret float32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionDataInner) GetEndOk() (*float32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *TranscriptionDataInner) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given float32 and assigns it to the End field.
func (o *TranscriptionDataInner) SetEnd(v float32) {
	o.End = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TranscriptionDataInner) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionDataInner) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TranscriptionDataInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TranscriptionDataInner) SetValue(v string) {
	o.Value = &v
}

func (o TranscriptionDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscriptionDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTranscriptionDataInner struct {
	value *TranscriptionDataInner
	isSet bool
}

func (v NullableTranscriptionDataInner) Get() *TranscriptionDataInner {
	return v.value
}

func (v *NullableTranscriptionDataInner) Set(val *TranscriptionDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionDataInner(val *TranscriptionDataInner) *NullableTranscriptionDataInner {
	return &NullableTranscriptionDataInner{value: val, isSet: true}
}

func (v NullableTranscriptionDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


