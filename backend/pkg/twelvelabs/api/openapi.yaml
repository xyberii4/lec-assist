openapi: 3.1.0
info:
  contact:
    email: support@twelvelabs.io
    name: TwelveLabs Support
  description: |
    Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses.
  title: TwelveLabs Video Understanding API
  version: 1.3.0
servers:
- url: https://api.twelvelabs.io/v1.3
tags:
- name: Manage indexes
- name: Upload videos
- name: Manage videos
- name: Any-to-video search
- name: Create video embeddings
- name: Analyze videos
- name: "Create text, image, and audio embeddings"
paths:
  /tasks:
    get:
      description: "This method returns a list of the video indexing tasks in your\
        \ account. The API returns your video indexing tasks sorted by creation date,\
        \ with the newest at the top of the list."
      operationId: list-video-indexing-tasks
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/page_limit"
      - $ref: "#/components/parameters/sort_by"
      - $ref: "#/components/parameters/sort_option"
      - $ref: "#/components/parameters/index_id"
      - $ref: "#/components/parameters/task_status"
      - $ref: "#/components/parameters/filename"
      - $ref: "#/components/parameters/duration"
      - $ref: "#/components/parameters/width"
      - $ref: "#/components/parameters/height"
      - $ref: "#/components/parameters/created_at"
      - $ref: "#/components/parameters/updated_at"
      responses:
        "200":
          $ref: "#/components/responses/getVideoIndexingTasksResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: List video indexing tasks
      tags:
      - Upload videos
    post:
      description: "This method creates a video indexing task that uploads and indexes\
        \ a video.\n\nUpload options:\n- **Local file**: Use the `video_file` parameter.\n\
        - **Publicly accessible URL**: Use the `video_url` parameter.\n\n<Accordion\
        \ title=\"Video requirements\">\n  The videos you wish to upload must meet\
        \ the following requirements:\n  - **Video resolution**: Must be at least\
        \ 360x360 and must not exceed 3840x2160.\n  - **Aspect ratio**: Must be one\
        \ of 1:1, 4:3, 4:5, 5:4, 16:9, or 9:16.\n  - **Video and audio formats**:\
        \ Your video files must be encoded in the video and audio formats listed on\
        \ the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html)\
        \ page. For videos in other formats, contact us at support@twelvelabs.io.\n\
        \  - **Duration**: For Marengo, it must be between 4 seconds and 2 hours (7,200s).\
        \ For Pegasus, it must be between 4 seconds and 60 minutes (3600s). In a future\
        \ release, the maximum duration for Pegasus will be 2 hours (7,200 seconds).\n\
        \  - **File size**: Must not exceed 2 GB.\n    If you require different options,\
        \ contact us at support@twelvelabs.io.\n  \n  If both Marengo and Pegasus\
        \ are enabled for your index, the most restrictive prerequisites will apply.\n\
        </Accordion>\n\n<Note title=\"Notes\">\n- The platform supports video URLs\
        \ that can play without additional user interaction or custom video players.\
        \ Ensure your URL points to the raw video file, not a web page containing\
        \ the video. Links to third-party hosting sites, cloud storage services, or\
        \ videos requiring extra steps to play are not supported.\n- This endpoint\
        \ is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits)\
        \ page.\n</Note>\n"
      operationId: create-video-indexing-task
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/multipart"
      requestBody:
        $ref: "#/components/requestBodies/createVideoIndexingTask"
      responses:
        "200":
          $ref: "#/components/responses/createVideoIndexingTaskResponse"
        "400":
          $ref: "#/components/responses/insufficientFunds"
      summary: Create a video indexing task
      tags:
      - Upload videos
  /tasks/{task_id}:
    delete:
      description: |
        This action cannot be undone.
        Note the following about deleting a video indexing task:
        - You can only delete video indexing tasks for which the status is `ready` or `failed`.
        - If the status of your video indexing task is `ready`, you must first delete the video vector associated with your video indexing task by calling the [`DELETE`](/v1.3/api-reference/videos/delete) method of the `/indexes/videos` endpoint.
      operationId: delete-video-indexing-task
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          The unique identifier of the video indexing task you want to delete.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: task_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          $ref: "#/components/responses/noContentResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Delete a video indexing task
      tags:
      - Upload videos
    get:
      description: This method retrieves a video indexing task.
      operationId: retrieve-video-indexing-task
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          The unique identifier of the video indexing task to retrieve.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: task_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/getVideoIndexingTaskResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve a video indexing task
      tags:
      - Upload videos
  /tasks/transfers/import/{integration-id}:
    post:
      description: |
        An import represents the process of uploading and indexing all videos from the specified integration.

        This method initiates an asynchronous import and returns two lists:
        - Videos that will be imported.
        - Videos that will not be imported, typically because they do not meet the prerequisites of all enabled video understanding models for your index. Note that the most restrictive prerequisites among the enabled models will apply.

        The actual uploading and indexing of videos occur asynchronously after you invoke this method. To monitor the status of each upload after invoking this method, use the [Retrieve import status](/v1.3/api-reference/tasks/cloud-to-cloud-integrations/get-status) method.

        <Accordion title="Video requirements">
          The videos you wish to upload must meet the following requirements:
          - **Video resolution**: Must be at least 360x360 and must not exceed 3840x2160.
          - **Aspect ratio**: Must be one of 1:1, 4:3, 4:5, 5:4, 16:9, or 9:16.
          - **Video and audio formats**: Your video files must be encoded in the video and audio formats listed on the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html) page. For videos in other formats, contact us at support@twelvelabs.io.
          - **Duration**: For Marengo, it must be between 4 seconds and 2 hours (7,200s). For Pegasus, it must be between 4 seconds and 60 minutes (3600s). In a future release, the maximum duration for Pegasus will be 2 hours (7,200 seconds).
          - **File size**: Must not exceed 2 GB.
            If you require different options, contact us at support@twelvelabs.io.

          If both Marengo and Pegasus are enabled for your index, the most restrictive prerequisites will apply.
        </Accordion>

        <Note title="Notes">
        - Before importing videos, you must set up an integration. For details, see the [Set up an integration](/v1.3/docs/advanced/cloud-to-cloud-integrations#set-up-an-integration) section.
        - By default, the platform checks for duplicate files using hashes within the target index and will not upload the same video to the same index twice. However, the same video can exist in multiple indexes. To bypass duplicate checking entirely and import duplicate videos into the same index, set the value of the `incremental_import` parameter to `false`.
        - Only one import job can run at a time. To start a new import, wait for the current job to complete. Use the [`GET`](/v1.3/api-reference/tasks/cloud-to-cloud-integrations/get-status) method of the `/tasks/transfers/import/{integration-id}/logs` endpoint to retrieve a list of your import jobs, including their creation time, completion time, and processing status for each video file.
        </Note>
      operationId: cloud-to-cloud-import-videos
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: "The unique identifier of the integration for which you want\
          \ to import videos. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations)\
          \ page."
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: integration-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: "#/components/requestBodies/cloud-to-cloud-import-videos-request"
      responses:
        "201":
          $ref: "#/components/responses/cloud-to-cloud-import-videos-response"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Import videos
      tags:
      - Upload videos
  /tasks/transfers/import/{integration-id}/status:
    get:
      description: "This method retrieves the current status for each video from a\
        \ specified integration and index. It returns an object containing lists of\
        \ videos grouped by status. See the [Task object](/v1.3/api-reference/tasks/the-task-object)\
        \ page for details on each status."
      operationId: cloud-to-cloud-retrieve-status
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: "The unique identifier of the integration for which you want\
          \ to retrieve the status of your imported videos. You can retrieve it from\
          \ the [Integrations](https://playground.twelvelabs.io/dashboard/integrations)\
          \ page."
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: integration-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The unique identifier of the index for which you want to retrieve the status of your imported videos.
        example: 6298d673f1090f1100476d4c
        explode: true
        in: query
        name: index_id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: "#/components/responses/cloud-to-cloud-retrieve-status-response"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve import status
      tags:
      - Upload videos
  /tasks/transfers/import/{integration-id}/logs:
    get:
      description: |
        This endpoint returns a chronological list of import operations for the specified integration. The list is sorted by creation date, with the oldest imports first. Each item in the list contains:
        - The number of videos in each status
        - Detailed error information for failed uploads, including filenames and error messages.

        Use this endpoint to track import progress and troubleshoot potential issues across multiple operations.
      operationId: cloud-to-cloud-retrieve-import-logs
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: "The unique identifier of the integration for which you want\
          \ to retrieve the import logs. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations)\
          \ page."
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: integration-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/cloud-to-cloud-retrieve-import-logs-response"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve import logs
      tags:
      - Upload videos
  /indexes:
    get:
      description: |
        This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.
      operationId: list-indexes
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/page_limit"
      - $ref: "#/components/parameters/sort_by"
      - $ref: "#/components/parameters/sort_option"
      - description: Filter by the name of an index.
        example: myIndex
        explode: true
        in: query
        name: index_name
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter by the model options. When filtering by multiple model options, the values must be comma-separated.
        example: "visual,audio"
        explode: true
        in: query
        name: model_options
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter by the model family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.
        example: marengo
        explode: true
        in: query
        name: model_family
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter indexes by the creation date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were created on the specified date at or after the given time.
        example: 2024-08-16T16:53:59Z
        explode: true
        in: query
        name: created_at
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter indexes by the last update date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were last updated on the specified date at or after the given time.
        example: 2024-08-16T16:55:59Z
        explode: true
        in: query
        name: updated_at
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: "#/components/responses/getIndexesResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: List indexes
      tags:
      - Manage indexes
    post:
      description: |
        This method creates an index.
      operationId: create-index
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      requestBody:
        $ref: "#/components/requestBodies/createIndex"
      responses:
        "201":
          $ref: "#/components/responses/createIndexResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Create an index
      tags:
      - Manage indexes
  /indexes/{index-id}:
    delete:
      description: This method deletes the specified index and all the videos within
        it. This action cannot be undone.
      operationId: delete-index
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          Unique identifier of the index to delete.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          $ref: "#/components/responses/noContentResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Delete an index
      tags:
      - Manage indexes
    get:
      description: |
        This method retrieves details about the specified index.
      operationId: retrieve-index
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          Unique identifier of the index to retrieve.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/getIndexResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve an index
      tags:
      - Manage indexes
    put:
      description: |
        This method updates the name of the specified index.
      operationId: update-index
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          Unique identifier of the index to update.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: "#/components/requestBodies/updateIndex"
      responses:
        "204":
          $ref: "#/components/responses/noContentResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Update an index
      tags:
      - Manage indexes
  /indexes/{index-id}/videos:
    get:
      description: |
        This method returns a list of the videos in the specified index. By default, the API returns your videos sorted by creation date, with the newest at the top of the list.
      operationId: list-videos
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/page_limit"
      - $ref: "#/components/parameters/sort_by"
      - $ref: "#/components/parameters/sort_option"
      - description: The unique identifier of the index for which the API will retrieve
          the videos.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Filter by filename.
        example: 01.mp4
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: |
          Filter by duration. Expressed in seconds.
        example: 10
        explode: true
        in: query
        name: duration
        required: false
        schema:
          type: number
        style: form
      - description: |
          Filter by frames per second.
        example: 25
        explode: true
        in: query
        name: fps
        required: false
        schema:
          type: number
        style: form
      - description: |
          Filter by width.
        example: 1920
        explode: true
        in: query
        name: width
        required: false
        schema:
          type: number
        style: form
      - description: |
          Filter by height.
        example: 1080
        explode: true
        in: query
        name: height
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Filter by size. Expressed in bytes.
        example: 1048576
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: number
        style: form
      - description: |
          Filter videos by the creation date and time of their associated indexing tasks, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the videos whose indexing tasks were created on the specified date at or after the given time.
        example: 2024-08-16T16:53:59Z
        explode: true
        in: query
        name: created_at
        required: false
        schema:
          type: string
        style: form
      - description: |
          This filter applies only to videos updated using the [`PUT`](/v1.3/api-reference/videos/update) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. It filters videos by the last update date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were last updated on the specified date at or after the given time.
        example: 2024-08-16T16:53:59Z
        explode: true
        in: query
        name: updated_at
        required: false
        schema:
          type: string
        style: form
      - description: |
          To enable filtering by custom fields, you must first add user-defined metadata to your video by calling the [`PUT`](/v1.3/api-reference/videos/update) method of the `/indexes/:index-id/videos/:video-id` endpoint.

          Examples:
          - To filter on a string: `?category=recentlyAdded`
          - To filter on an integer: `?batchNumber=5`
          - To filter on a float: `?rating=9.3`
          - To filter on a boolean: `?needsReview=true`
        example: category=recentlyAdded&batchNumber=5&rating=9.3&needsReview=true
        explode: true
        in: query
        name: user_metadata
        required: false
        schema:
          additionalProperties:
            $ref: "#/components/schemas/list_videos_user_metadata_parameter_value"
        style: form
      responses:
        "200":
          $ref: "#/components/responses/getVideoVectorsResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: List videos
      tags:
      - Manage videos
  /indexes/{index-id}/videos/{video-id}:
    delete:
      description: |
        This method deletes all the information about the specified video This action cannot be undone.
      operationId: delete-video-information
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          The unique identifier of the index to which the video has been uploaded.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The unique identifier of the video to delete.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: video-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          $ref: "#/components/responses/noContentResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Delete video information
      tags:
      - Manage videos
    get:
      description: |
        This method retrieves information about the specified video.
      operationId: retrieve-video-information
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/embedding_option_optional"
      - description: |
          The unique identifier of the index to which the video has been uploaded.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The unique identifier of the video to retrieve.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: video-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The parameter indicates whether to retrieve a transcription of the spoken words for the indexed video. Note that the official SDKs will support this feature in a future release.
        example: true
        explode: true
        in: query
        name: transcription
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: "#/components/responses/getVideoVectorResponse"
        "400":
          $ref: "#/components/responses/genericError"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Retrieve video information
      tags:
      - Manage videos
    put:
      description: Use this method to update the metadata of a video such as file
        name.
      operationId: update-video-information
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          The unique identifier of the index to which the video has been uploaded.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The unique identifier of the video to update.
        example: 6298d673f1090f1100476d4c
        explode: false
        in: path
        name: video-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: "#/components/requestBodies/update-video-vector"
      responses:
        "204":
          $ref: "#/components/responses/noContentResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Update video information
      tags:
      - Manage videos
  /summarize:
    post:
      description: |
        This endpoint analyzes videos and generates summaries, chapters, or highlights. Optionally, you can provide a prompt to customize the output.

        <Note title="Note">
        This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
        </Note>
      operationId: summarize
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      requestBody:
        $ref: "#/components/requestBodies/summarizeRequest"
      responses:
        "200":
          $ref: "#/components/responses/summarizeResponse"
        "400":
          $ref: "#/components/responses/genericError"
        "429":
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
      summary: "Summaries, chapters, or highlights"
      tags:
      - Analyze videos
  /gist:
    post:
      description: |
        This endpoint analyzes videos and generates titles, topics, and hashtags.

        <Note title="Note">
        This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
        </Note>
      operationId: gist
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      requestBody:
        $ref: "#/components/requestBodies/gistRequest"
      responses:
        "200":
          $ref: "#/components/responses/gistResponse"
        "400":
          $ref: "#/components/responses/genericError"
        "429":
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
      summary: "Titles, topics, and hashtags"
      tags:
      - Analyze videos
  /generate:
    post:
      deprecated: true
      description: |
        <Warning>This endpoint will be deprecated on **July 30, 2025**. Transition to the [`/analyze`](/v1.3/api-reference/analyze-videos/analyze) endpoint, which provides identical functionality. Ensure you've updated your API calls before the deprecation date to ensure uninterrupted service.</Warning>

        This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.

        <Note title="Notes">
        - This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/v1.3/docs/guides/generate-text-from-video/open-ended-text#streaming-responses) guide.
        </Note>
      operationId: analyze
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      requestBody:
        $ref: "#/components/requestBodies/generateTextRepresentationRequest"
      responses:
        "200":
          content:
            application/json:
              examples:
                non-streaming-response:
                  summary: Non-streamed response
                  value:
                    id: 2a22fd17-7bd4-446a-abd6-b9382cb18f90
                    data: 1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5.
                      Outdoor adventure
                stream-start-response:
                  summary: Stream start
                  value:
                    event_type: stream_start
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                text-generation-resonse:
                  summary: Text generation
                  value:
                    event_type: text_generation
                    text: light-hearted moments of cats
                stream-end-response:
                  summary: Stream end
                  value:
                    event_type: stream_end
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                      usage:
                        output_tokens: 100
              schema:
                $ref: "#/components/schemas/analyze_200_response"
          description: The specified video has successfully been processed.
          headers:
            X-Ratelimit-Limit:
              $ref: "#/components/headers/X-Ratelimit-Limit"
            X-Ratelimit-Remaining:
              $ref: "#/components/headers/X-Ratelimit-Remaining"
            X-Ratelimit-Used:
              $ref: "#/components/headers/X-Ratelimit-Used"
            X-Ratelimit-Reset:
              $ref: "#/components/headers/X-Ratelimit-Reset"
            Transfer-Encoding:
              explode: false
              schema:
                default: chunked
                description: The platform returns this header when the `stream` parameter
                  is set to `true` in the request. It indicates that the response
                  body is sent in chunks.
                example: chunked
                type: string
              style: simple
        "400":
          $ref: "#/components/responses/genericError"
        "429":
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
      summary: Open-ended texts
      tags:
      - Analyze videos
  /analyze:
    post:
      description: |
        This endpoint analyzes your videos and creates fully customizable text based on your prompts, including but not limited to tables of content, action items, memos, and detailed analyses.

        <Note title="Notes">
        - This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/v1.3/docs/guides/generate-text-from-video/open-ended-text#streaming-responses) guide.
        </Note>
      operationId: generate-text-representation
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      requestBody:
        $ref: "#/components/requestBodies/generateTextRepresentationRequest"
      responses:
        "200":
          content:
            application/json:
              examples:
                non-streaming-response:
                  summary: Non-streamed response
                  value:
                    id: 2a22fd17-7bd4-446a-abd6-b9382cb18f90
                    data: 1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5.
                      Outdoor adventure
                stream-start-response:
                  summary: Stream start
                  value:
                    event_type: stream_start
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                text-generation-resonse:
                  summary: Text generation
                  value:
                    event_type: text_generation
                    text: light-hearted moments of cats
                stream-end-response:
                  summary: Stream end
                  value:
                    event_type: stream_end
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                      usage:
                        output_tokens: 100
              schema:
                $ref: "#/components/schemas/analyze_200_response"
          description: The specified video has successfully been processed.
          headers:
            X-Ratelimit-Limit:
              $ref: "#/components/headers/X-Ratelimit-Limit"
            X-Ratelimit-Remaining:
              $ref: "#/components/headers/X-Ratelimit-Remaining"
            X-Ratelimit-Used:
              $ref: "#/components/headers/X-Ratelimit-Used"
            X-Ratelimit-Reset:
              $ref: "#/components/headers/X-Ratelimit-Reset"
            Transfer-Encoding:
              explode: false
              schema:
                default: chunked
                description: The platform returns this header when the `stream` parameter
                  is set to `true` in the request. It indicates that the response
                  body is sent in chunks.
                example: chunked
                type: string
              style: simple
        "400":
          $ref: "#/components/responses/genericError"
        "429":
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
      summary: Open-ended analysis
      tags:
      - Analyze videos
  /embed:
    post:
      description: |
        This method creates embeddings for text, image, and audio content.

        Before you create an embedding, ensure that your image or audio files meet the following prerequisites:
        - [Image embeddings](/v1.3/docs/guides/create-embeddings/image#prerequisites)
        - [Audio embeddings](/v1.3/docs/guides/create-embeddings/audio#prerequisites)

        Parameters for embeddings:
        - **Common parameters**:
          - `model_name`: The video understanding model you want to use. Example: "Marengo-retrieval-2.7".
        - **Text embeddings**:
          - `text`: Text for which to create an embedding.
        - **Image embeddings**:
          Provide one of the following:
          - `image_url`: Publicly accessible URL of your image file.
          - `image_file`:  Local image file.
        - **Audio embeddings**:
          Provide one of the following:
          - `audio_url`: Publicly accessible URL of your audio file.
          - `audio_file`: Local audio file.

        <Note title="Notes">
        - The "Marengo-retrieval-2.7" video understanding model generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.
        - You can create multiple types of embeddings in a single API call.
        - Audio embeddings combine generic sound and human speech in a single embedding. For videos with transcriptions, you can retrieve transcriptions and then [create text embeddings](/v1.3/api-reference/text-image-audio-embeddings/create-text-image-audio-embeddings) from these transcriptions.
        </Note>
      operationId: create-text-image-audio-embedding
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/multipart"
      requestBody:
        $ref: "#/components/requestBodies/createSyncEmbeddingRequest"
      responses:
        "200":
          $ref: "#/components/responses/createSyncEmbeddingResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: "Create embeddings for text, image, and audio"
      tags:
      - "Create text, image, and audio embeddings"
  /embed/tasks:
    get:
      description: |
        This method returns a list of the video embedding tasks in your account. The platform returns your video embedding tasks sorted by creation date, with the newest at the top of the list.

        <Note title="Notes">
        - Video embeddings are stored for seven days
        - When you invoke this method without specifying the `started_at` and `ended_at` parameters, the platform returns all the video embedding tasks created within the last seven days.
        </Note>
      operationId: list-video-embedding-tasks
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/started_at"
      - $ref: "#/components/parameters/ended_at"
      - $ref: "#/components/parameters/embedding_tasks_filter_status"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          $ref: "#/components/responses/listVideoEmbeddingTasksResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: List video embedding tasks
      tags:
      - Create video embeddings
    post:
      description: |
        This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings.

        Upload options:
        - **Local file**: Use the `video_file` parameter
        - **Publicly accessible URL**: Use the `video_url` parameter.

        Specify at least one option. If both are provided, `video_url` takes precedence.

        <Accordion title="Video requirements">
          The videos you wish to upload must meet the following requirements:
          - **Video resolution**: Must be at least 360x360 and must not exceed 3840x2160.
          - **Aspect ratio**: Must be one of 1:1, 4:3, 4:5, 5:4, 16:9, or 9:16.
          - **Video and audio formats**: Your video files must be encoded in the video and audio formats listed on the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html) page. For videos in other formats, contact us at support@twelvelabs.io.
          - **Duration**: Must be between 4 seconds and 2 hours (7,200s).
          - **File size**: Must not exceed 2 GB.
            If you require different options, contact us at support@twelvelabs.io.
        </Accordion>

        <Note title="Notes">
        - The "Marengo-retrieval-2.7" video understanding model generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.
        - Video embeddings are stored for seven days.
        - The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
        </Note>
      operationId: create-video-embedding-task
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/multipart"
      requestBody:
        $ref: "#/components/requestBodies/createVideoEmbeddingTaskRequest"
      responses:
        "200":
          $ref: "#/components/responses/createVideoEmbeddingTaskResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Create a video embedding task
      tags:
      - Create video embeddings
  /embed/tasks/{task_id}/status:
    get:
      description: |
        This method retrieves the status of a video embedding task. Check the task status of a video embedding task to determine when you can retrieve the embedding.

        A task can have one of the following statuses:
        - `processing`: The platform is creating the embeddings.
        - `ready`:  Processing is complete. Retrieve the embeddings by invoking the [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embeddings) method of the `/embed/tasks/{task_id} endpoint`.
        - `failed`: The task could not be completed, and the embeddings haven't been created.
      operationId: retrieve-video-embedding-task
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/video-embedding-task-id"
      responses:
        "200":
          $ref: "#/components/responses/retrieveVideoEmbeddingTaskStatusResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve the status of a video embedding task
      tags:
      - Create video embeddings
  /embed/tasks/{task_id}:
    get:
      description: |
        This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve the status of a video embedding tasks](/v1.3/api-reference/video-embeddings/retrieve-video-embedding-task-status) page for instructions on checking the task status.
      operationId: retrieve-video-embedding
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - $ref: "#/components/parameters/video-embedding-task-id"
      - $ref: "#/components/parameters/embedding_option"
      responses:
        "200":
          $ref: "#/components/responses/retrieveVideoEmbeddingResponse"
        "400":
          $ref: "#/components/responses/genericError"
      summary: Retrieve video embeddings
      tags:
      - Create video embeddings
  /search:
    post:
      description: |
        Use this endpoint to search for relevant matches in an index using text or various media queries.

        **Text queries**:
        - Use the `query_text` parameter to specify your query.

        **Media queries**:
        - Set the `query_media_type` parameter to the corresponding media type (example: `image`).
        - Specify either one of the following parameters:
          - `query_media_url`: Publicly accessible URL of your media file.
          - `query_media_file`: Local media file.
          If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.
        <Accordion title="Image requirements">
        Your images must meet the following requirements:
          - **Format**: JPEG and PNG.
          - **Dimension**: Must be at least 64 x 64 pixels.
          - **Size**: Must not exceed 5MB.
          - **Object visibility**: Ensure that the objects of interest are visible and occupy at least 50% of the video frame. This helps the platform accurately identify and match the objects.
        </Accordion>

        <Note title="Note">
        This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
        </Note>
      operationId: any-to-video-search
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/multipart"
      requestBody:
        $ref: "#/components/requestBodies/any-to-video-search"
      responses:
        "200":
          $ref: "#/components/responses/searchResultsResponse"
        "400":
          $ref: "#/components/responses/genericError"
        "429":
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
      summary: Make any-to-video search requests
      tags:
      - Any-to-video search
  /search/{page-token}:
    get:
      description: |
        Use this endpoint to retrieve a specific page of search results.

        <Note title="Note">
        When you use pagination, you will not be charged for retrieving subsequent pages of results.
        </Note>
      operationId: any-to-video--retrieve-specific-page
      parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/Content-Type"
      - description: |
          A token that identifies the page to retrieve.
        explode: false
        in: path
        name: page-token
        required: true
        schema:
          example: "1234567890"
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/searchResultsResponsePageId"
        "400":
          $ref: "#/components/responses/searchResultsError"
      summary: Retrieve a specific page of search results
      tags:
      - Any-to-video search
components:
  headers:
    X-Ratelimit-Limit:
      description: "The maximum number of requests you can make per rate limit window\
        \ for this endpoint. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits)\
        \ page."
      explode: false
      schema:
        example: 100
      style: simple
    X-Ratelimit-Remaining:
      description: The number of requests remaining in the current rate limit window
        for the specific endpoint.
      explode: false
      schema:
        example: 99
      style: simple
    X-Ratelimit-Used:
      description: The number of requests you have made in the current rate limit
        window for the specific endpoint.
      explode: false
      schema:
        example: 1
      style: simple
    X-Ratelimit-Reset:
      description: "The time at which the current rate limit window resets, expressed\
        \ in UTC epoch seconds."
      explode: false
      schema:
        example: 1718777276
      style: simple
  parameters:
    video-embedding-task-id:
      description: |
        The unique identifier of your video embedding task.
      explode: false
      in: path
      name: task_id
      required: true
      schema:
        example: 663da73b31cdd0c1f638a8e6
        type: string
      style: simple
    embedding_option_optional:
      description: |
        Specifies which types of embeddings to retrieve. You can include one or more of the following values:
        - `visual-text`:  Returns visual embeddings optimized for text search.
        - `audio`: Returns audio embeddings.
        <br/>
        To retrieve embeddings for a video, it must be indexed using the Marengo video understanding model version 2.7 or later. For details on enabling this model for an index, see the [Create an index](/reference/create-index) page.

        The platform does not return embeddings if you don't provide this parameter.

        The values you specify in `embedding_option` must be included in the `model_options` defined when the index was created. For example, if `model_options` is set to `visual,` you cannot set `embedding_option` to `audio` or  both `visual-text` and `audio`.
      explode: true
      in: query
      name: embedding_option
      required: false
      schema:
        items:
          enum:
          - visual-text
          - audio
          type: string
          uniqueItems: true
        type: array
      style: form
    embedding_option:
      description: |
        Specifies which types of embeddings to retrieve. You can include one or more of the following values:
          - `visual-text`:  Returns visual embeddings optimized for text search.
          - `audio`: Returns audio embeddings.

        The platform returns all available embeddings if you don't provide this parameter.
      explode: true
      in: query
      name: embedding_option
      required: false
      schema:
        items:
          enum:
          - visual-text
          - audio
          type: string
        type: array
        uniqueItems: true
      style: form
    Content-Type:
      description: Must be set to `application/json`.
      explode: false
      in: header
      name: Content-Type
      required: true
      schema:
        default: application/json
        example: application/json
        type: string
      style: simple
    x-api-key:
      description: |
        Your API key.

        <Note title="Note">
        You can find your API key on the <a href="https://playground.twelvelabs.io/dashboard/api-key" target="_blank">API Key</a> page.
        </Note>
      explode: false
      in: header
      name: x-api-key
      required: true
      schema:
        example: tlk_1234567890
        type: string
      style: simple
    multipart:
      description: Must be set to `multipart/form-data`.
      explode: false
      in: header
      name: Content-Type
      required: true
      schema:
        default: multipart/form-data
        example: multipart/form-data
        type: string
      style: simple
    page:
      description: |
        A number that identifies the page to retrieve.

        **Default**: `1`.
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        example: 1
        type: integer
      style: form
    page_limit:
      description: |
        The number of items to return on each page.

        **Default**: `10`.
        **Max**: `50`.
      explode: true
      in: query
      name: page_limit
      required: false
      schema:
        default: 10
        example: 10
        type: integer
      style: form
    sort_by:
      description: |
        The field to sort on. The following options are available:
        - `updated_at`: Sorts by the time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was updated.
        - `created_at`: Sorts by the time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was created.

        **Default**: `created_at`.
      explode: true
      in: query
      name: sort_by
      required: false
      schema:
        default: created_at
        example: created_at
        type: string
      style: form
    sort_option:
      description: |
        The sorting direction. The following options are available:
        - `asc`
        - `desc`

        **Default**: `desc`.
      explode: true
      in: query
      name: sort_option
      required: false
      schema:
        default: desc
        example: desc
        type: string
      style: form
    index_id:
      description: |
        Filter by the unique identifier of an index.
      explode: true
      in: query
      name: index_id
      required: false
      schema:
        example: 630aff993fcee0532cb809d0
        type: string
      style: form
    task_status:
      description: |
        Filter by one or more video indexing task statuses. The following options are available:
        - `ready`: The video has been successfully uploaded and indexed.
        - `uploading`: The video is being uploaded.
        - `validating`: The video is being validated against the prerequisites.
        - `pending`: The video is pending.
        - `queued`: The video is queued.
        - `indexing`: The video is being indexed.
        - `failed`: The video indexing task failed.

        To filter by multiple statuses, specify the `status` parameter for each value:
        ```
        status=ready&status=validating
        ```
      explode: false
      in: query
      name: status
      required: false
      schema:
        example:
        - ready
        - failed
        items:
          enum:
          - ready
          - uploading
          - validating
          - pending
          - queued
          - indexing
          - failed
          example: ready
          type: string
        type: array
      style: form
    filename:
      description: |
        Filter by filename.
      explode: true
      in: query
      name: filename
      required: false
      schema:
        example: 01.mp4
        type: string
      style: form
    duration:
      description: |
        Filter by duration. Expressed in seconds.
      explode: true
      in: query
      name: duration
      required: false
      schema:
        example: 531.998133
        type: number
      style: form
    width:
      description: |
        Filter by width.
      explode: true
      in: query
      name: width
      required: false
      schema:
        example: 640
        type: integer
      style: form
    height:
      description: |
        Filter by height.
      explode: true
      in: query
      name: height
      required: false
      schema:
        example: 360
        type: integer
      style: form
    created_at:
      description: |
        Filter video indexing tasks by the creation date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were created on the specified date at or after the given time.
      explode: true
      in: query
      name: created_at
      required: false
      schema:
        example: 2024-03-01T00:00:00Z
        type: string
      style: form
    updated_at:
      description: |
        Filter video indexing tasks by the last update date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were updated on the specified date at or after the given time.
      explode: true
      in: query
      name: updated_at
      required: false
      schema:
        example: 2024-03-01T00:00:00Z
        type: string
      style: form
    ended_at:
      description: |
        Retrieve the video embedding tasks that were created before the given date and time, expressed in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ").
      explode: true
      in: query
      name: ended_at
      required: false
      schema:
        example: 2024-03-01T00:00:00Z
        type: string
      style: form
    started_at:
      description: |
        Retrieve the video embedding tasks that were created after the given date and time, expressed in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ").
      explode: true
      in: query
      name: started_at
      required: false
      schema:
        example: 2024-03-01T00:00:00Z
        type: string
      style: form
    embedding_tasks_filter_status:
      description: "Filter video embedding tasks by their current status. Possible\
        \ values are `processing`, `ready`, or `failed`."
      explode: true
      in: query
      name: status
      required: false
      schema:
        example: processing
        type: string
      style: form
  requestBodies:
    createSyncEmbeddingRequest:
      content:
        multipart/form-data:
          examples:
            text-embedding:
              summary: Text embedding
              value:
                model_name: Marengo-retrieval-2.7
                text: Man with a dog crossing the street
            image-embedding-url:
              summary: Image embedding using URL
              value:
                model_name: Marengo-retrieval-2.7
                image_url: https://example.com/image.jpg
            image-embedding-file:
              summary: Image embedding using local file
              value:
                model_name: Marengo-retrieval-2.7
                image_file: /Users/john/Documents/image.jpg
            audio-embedding-url:
              summary: Audio embedding using URL
              value:
                model_name: Marengo-retrieval-2.7
                audio_url: https://example.com/audio.mp3
            audio-embedding-file:
              summary: Audio embedding using local file
              value:
                model_name: Marengo-retrieval-2.7
                audio_file: /Users/john/Documents/audio.mp3
            text-embedding-with-truncation:
              summary: Text embedding with truncation
              value:
                model_name: Marengo-retrieval-2.7
                text: This is a very long text that might exceed the token limit and
                  need truncation
                text_truncate: start
          schema:
            $ref: "#/components/schemas/create_text_image_audio_embedding_request"
      description: |
        Request to create an embedding synchronously.
      required: true
    createVideoEmbeddingTaskRequest:
      content:
        multipart/form-data:
          examples:
            video-embedding-clip:
              summary: Video embedding using clip scope
              value:
                model_name: Marengo-retrieval-2.7
                video_embedding_scope: clip
                video_file: /Users/john/Documents/video.mp4
          schema:
            $ref: "#/components/schemas/create_video_embedding_task_request"
      description: |
        Request to create a video embedding task.
    generateTextRepresentationRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/analyze_request"
      description: |
        Request to generate a text representation of a video.
      required: true
    summarizeRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/summarize_request"
      description: |
        Request to generate a summary of a video.
    gistRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/gist_request"
      description: |
        Request to generate a gist for a video.
    update-video-vector:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/update_video_information_request"
      description: |
        Request to update the metadata of a video.
    any-to-video-search:
      content:
        multipart/form-data:
          encoding:
            search_options:
              explode: true
              style: form
          schema:
            $ref: "#/components/schemas/any_to_video_search_request"
      description: |
        Request to perform a search on a video index.
    cloud-to-cloud-import-videos-request:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/cloud_to_cloud_import_videos_request"
      description: |
        Request to import videos from a cloud storage bucket to an index.
      required: true
    createVideoIndexingTask:
      content:
        multipart/form-data:
          example:
            index_id: 6298d673f1090f1100476d4c
            video_file: '@/Users/john/Documents/01.mp4'
          schema:
            $ref: "#/components/schemas/create_video_indexing_task_request"
      description: |
        Request to upload a video to an index.
      required: true
    updateIndex:
      content:
        application/json:
          example:
            index_name: myIndex
          schema:
            $ref: "#/components/schemas/update_index_request"
      description: |
        Request to update the name of an index.
    createIndex:
      content:
        application/json:
          example:
            index_name: myIndex
            models:
            - model_name: marengo2.7
              model_options:
              - visual
              - audio
            - model_name: pegasus1.2
              model_options:
              - visual
              - audio
            addons:
            - thumbnail
          schema:
            $ref: "#/components/schemas/create_index_request"
      description: |
        Request to create an index.
      required: true
  responses:
    cloud-to-cloud-retrieve-import-logs-response:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object"
      description: The import logs have successfully been retrieved.
    searchResultsResponsePageId:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_1"
      description: Successfully retrieved the specified page of search results.
    noContentResponse:
      description: "If successful, this method returns a `204 No Content` response\
        \ code. It does not return anything in the response body."
    searchResultsResponse:
      content:
        application/json:
          example:
            search_pool:
              total_count: 10
              total_duration: 8731
              index_id: 639961c9e219c90227c371a2
            data:
            - score: 85.08
              start: 238.75
              end: 259.62109375
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://example.com/thumbnail.jpg
              transcription: "A woman vlogs about her summer day, sharing her experience"
          schema:
            $ref: "#/components/schemas/SearchResults"
      description: Successfully performed a search request.
      headers:
        X-Ratelimit-Limit:
          $ref: "#/components/headers/X-Ratelimit-Limit"
        X-Ratelimit-Remaining:
          $ref: "#/components/headers/X-Ratelimit-Remaining"
        X-Ratelimit-Used:
          $ref: "#/components/headers/X-Ratelimit-Used"
        X-Ratelimit-Reset:
          $ref: "#/components/headers/X-Ratelimit-Reset"
    retrieveThumbnailResponse:
      content:
        application/json:
          example:
            thumbnail: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6320748774fed2f3511f2a92/10.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20220914%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220914T075213Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=46b3bac13fb8b022313244780c238cb6bfc53eddcbee3be23a8d2dd22d99543e
          schema:
            $ref: "#/components/schemas/inline_object_2"
      description: A thumbnail has successfully been retrieved.
    getVideoVectorsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_3"
      description: The video vectors in the specified index have successfully been
        retrieved.
    getVideoVectorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_4"
      description: The specified video information has successfully been retrieved.
    getIndexResponse:
      content:
        application/json:
          example:
            _id: 62d9bafa90077fc60af827a0
            index_name: myIndex
            created_at: 2024-01-09T11:11:20.463Z
            updated_at: 2024-01-09T11:17:15.296Z
            expires_at: 2024-04-08T11:11:20.463Z
            video_count: 12
            total_duration: 8716.8969
            models:
            - model_name: marengo2.7
              model_options:
              - visual
              - audio
              addons:
              - thumbnail
            - model_name: pegasus1.2
              model_options:
              - visual
              - audio
          schema:
            $ref: "#/components/schemas/Index"
      description: The specified index has successfully been retrieved.
    getVideoIndexingTasksResponse:
      content:
        application/json:
          example:
            data:
            - _id: 62a17bf847f5678267ec10cc
              created_at: 2022-06-09T04:50:00.879Z
              index_id: 62a0906d47f5678267ec10a6
              metadata:
                duration: 531.998133
                filename: 01.mp4
                height: 400
                width: 854
              status: ready
              updated_at: 2022-06-09T04:55:57.256Z
            - _id: 62a17bce47f5678267ec10c6
              created_at: 2022-06-09T04:49:20.001Z
              index_id: 62a0906d47f5678267ec10a6
              metadata:
                duration: 741.875
                filename: 02.mp4
                height: 480
                width: 854
              status: ready
              updated_at: 2022-06-09T04:54:10.345Z
            page_info:
              limit_per_page: 10
              page: 1
              total_page: 1
              total_results: 2
          schema:
            $ref: "#/components/schemas/inline_object_5"
      description: The video indexing tasks have successfully been retrieved.
    getVideoIndexingTaskResponse:
      content:
        application/json:
          example:
            _id: 61e1789761c43d6d9b7362f3
            video_id: 61e1789761c43d6d9b7362f3
            created_at: 2022-01-14T13:20:22.986Z
            updated_at: 2022-01-17T08:35:21.639Z
            index_id: 61e165b061c43d6d9b73627b
            metadata:
              duration: 4334.0297
              filename: WPK3hvTr8PU.mp4
              height: 360
              width: 544
            status: ready
            hls:
              video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
              thumbnail_urls:
              - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
              status: COMPLETE
              updated_at: 2024-01-16T07:59:40.879Z
          schema:
            $ref: "#/components/schemas/inline_object_6"
      description: The specified video indexing task has successfully been retrieved.
    getIndexesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_7"
      description: The indexes have successfully been retrieved.
    createVideoIndexingTaskResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_8"
      description: A video indexing task has successfully been created.
    createIndexResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_9"
      description: An index has successfully been created
    searchResultsError:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_10"
      description: The request has failed.
    insufficientFunds:
      content:
        application/json:
          example:
            code: insufficient_funds
            message: Not enough free credit. Please register a payment method or contact
              sales@twelvelabs.io.
            docs_url: https://docs.twelvelabs.io/reference/error-codes
          schema:
            $ref: "#/components/schemas/inline_object_11"
      description: The request has failed.
    unauthorizedRequest:
      content:
        application/json:
          example:
            code: unauthorized_request
            message: You are not authorized to access this resource.
            docs_url: https://docs.twelvelabs.io/reference/error-codes
          schema:
            $ref: "#/components/schemas/inline_object_12"
      description: Unauthorized request
    genericError:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_13"
      description: The request has failed.
    notFound:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_object_14"
      description: The specified resource does not exist.
    createSyncEmbeddingResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmbeddingResponse"
      description: |
        A text embedding has successfully been created.
    retrieveVideoEmbeddingResponse:
      content:
        application/json:
          example:
            _id: 663e16ac4d11aff765088b3a
            model_name: Marengo-retrieval-2.7
            status: ready
            created_at: 2024-03-01T00:00:00Z
            video_embedding:
              segments:
              - start_offset_sec: 0
                end_offset_sec: 6
                embedding_scope: clip
                embedding_option: visual-text
                float:
                - -0.060086973
                - 0.016479108
              - start_offset_sec: 6
                end_offset_sec: 12
                embedding_scope: clip
                embedding_option: visual-text
                float:
                - -0.056660935
                - 0.012404642
              - start_offset_sec: 0
                end_offset_sec: 12
                embedding_scope: video
                embedding_option: visual-text
                float:
                - -0.05971131
                - -0.00859428
              - start_offset_sec: 0
                end_offset_sec: 6
                embedding_scope: clip
                embedding_option: audio
                float:
                - -0.060086973
                - 0.016479108
              - start_offset_sec: 6
                end_offset_sec: 12
                embedding_scope: clip
                embedding_option: audio
                float:
                - -0.056660935
                - 0.012404642
              - start_offset_sec: 12
                end_offset_sec: 18
                embedding_scope: clip
                embedding_option: audio
                float:
                - -0.05971131
                - -0.00859428
              - start_offset_sec: 0
                end_offset_sec: 12
                embedding_scope: video
                embedding_option: audio
                float:
                - -0.05971131
                - -0.00859428
              metadata:
                input_filename: 01.mp4
                video_clip_length: 6
                video_embedding_scope:
                - clip
                - video
                duration: 18
          schema:
            $ref: "#/components/schemas/inline_object_15"
      description: |
        Video embeddings have successfully been retrieved.
    listVideoEmbeddingTasksResponse:
      content:
        application/json:
          example:
            data:
            - _id: 66f537778d9641fe5a0d101f
              model_name: Marengo-retrieval-2.7
              status: processing
              created_at: 2024-09-26T10:29:19.968Z
              video_embedding:
                metadata:
                  input_filename: 01.mp4
                  video_clip_length: 6
                  video_embedding_scope:
                  - clip
                  duration: 13.4400001
            - _id: 66f535874bd2802fc13293f4
              model_name: Marengo-retrieval-2.7
              status: processing
              created_at: 2024-09-26T10:21:04.157Z
              video_embedding:
                metadata:
                  input_filename: 01.mp4
                  video_clip_length: 6
                  video_embedding_scope:
                  - clip
                  duration: 13.4400001
            - _id: 66f534fd4bd2802fc13293ee
              model_name: Marengo-retrieval-2.7
              status: processing
              created_at: 2024-09-26T10:18:44.866Z
              video_embedding:
                metadata:
                  input_filename: 01.mp4
                  video_clip_length: 6
                  video_embedding_scope:
                  - clip
                  duration: 13.4400001
            page_info:
              page: 1
              limit_per_page: 10
              total_page: 1
              total_results: 3
          schema:
            $ref: "#/components/schemas/inline_object_16"
      description: |
        A list of video embedding tasks has successfully been retrieved.
    retrieveVideoEmbeddingTaskStatusResponse:
      content:
        application/json:
          example:
            _id: 6641c0efc70bb578439bd909
            model_name: Marengo-retrieval-2.7
            status: processing
            video_embedding:
              metadata:
                input_filename: 01.mp4
                video_clip_length: 6
                video_embedding_scope:
                - clip
                - video
                duration: 18
          schema:
            $ref: "#/components/schemas/inline_object_17"
      description: |
        The status of your video embedding task has been retrieved.
    createVideoEmbeddingTaskResponse:
      content:
        application/json:
          example:
            _id: 66419a20c70bb578439bd8f4
          schema:
            $ref: "#/components/schemas/inline_object_18"
      description: |
        A video embedding task has successfully been created.
    summarizeResponse:
      content:
        application/json:
          example:
            id: 663da73b31cdd0c1f638a8e6
            highlights:
            - start: 0
              end: 30
              highlight: "A woman vlogs about her summer day, sharing her experience"
              highlight_summary: "The woman talks about her love for getting some\
                \ sun, despite not tanning well, and shows the camera around her house,\
                \ mentioning her fake tanner."
            usage:
              output_tokens: 100
          schema:
            $ref: "#/components/schemas/inline_object_19"
      description: |
        The specified video has successfully been summarized.
      headers:
        X-Ratelimit-Limit:
          description: "The maximum number of requests you can make per rate limit\
            \ window for this endpoint. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits)\
            \ page."
          example: 100
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Remaining:
          description: The number of requests remaining in the current rate limit
            window for the specific endpoint. This value decreases with each request
            you make to that endpoint and resets at the start of the next rate limit
            window.
          example: 99
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Used:
          description: The number of requests you have made in the current rate limit
            window for the specific endpoint. This value increases with each request
            you make to that endpoint and resets to zero at the start of the next
            rate limit window.
          example: 1
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Reset:
          description: "The time at which the current rate limit window resets, expressed\
            \ in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining`\
            \ and `X-Ratelimit-Used` parameters will be reset to their initial values\
            \ for the next rate limit window."
          example: 1718777276
          explode: false
          schema:
            type: number
          style: simple
    gistResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Gist"
      description: |
        The gist of the specified video has successfully been generated.
      headers:
        X-Ratelimit-Limit:
          description: "The maximum number of requests you can make per rate limit\
            \ window for this endpoint. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits)\
            \ page."
          example: 100
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Remaining:
          description: The number of requests remaining in the current rate limit
            window for the specific endpoint. This value decreases with each request
            you make to that endpoint and resets at the start of the next rate limit
            window.
          example: 99
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Used:
          description: The number of requests you have made in the current rate limit
            window for the specific endpoint. This value increases with each request
            you make to that endpoint and resets to zero at the start of the next
            rate limit window.
          example: 1
          explode: false
          schema:
            type: number
          style: simple
        X-Ratelimit-Reset:
          description: "The time at which the current rate limit window resets, expressed\
            \ in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining`\
            \ and `X-Ratelimit-Used` parameters will be reset to their initial values\
            \ for the next rate limit window."
          example: 1718777276
          explode: false
          schema:
            type: number
          style: simple
    cloud-to-cloud-import-videos-response:
      content:
        application/json:
          example:
            failed_files:
            - filename: 1.mp4
              error_message: The video is too big. Please use a video with a size
                less than %s. The current size is %s.
            videos:
            - video_id: 66fcee250f9f7bcce21915a2
              filename: 1.mp4
          schema:
            $ref: "#/components/schemas/inline_object_20"
      description: |
        An import has successfully been initiated.
    cloud-to-cloud-retrieve-status-response:
      content:
        application/json:
          example:
            not_imported:
            - NEW_VIDEO_1.mp4
            - NEW_VIDEO_2.mp4
            ready:
            - video_id: VIDEO_ID_1
              filename: VIDEO_1.mp4
              created_at: 2024-09-24T13:22:00Z
            - video_id: VIDEO_ID_2
              filename: VIDEO_2.mp4
              created_at: 2024-09-24T13:22:00Z
            pending:
            - video_id: VIDEO_ID_3
              filename: VIDEO_3.mp4
              created_at: 2024-09-24T13:22:00Z
            failed:
            - filename: VIDEO_4.mp4
              created_at: 2024-09-24T13:22:00Z
              error_message: The file is not a valid video file.
          schema:
            $ref: "#/components/schemas/inline_object_21"
      description: |
        The status for each video from the specified integration and index has successfully been retrieved
  schemas:
    ImportLog:
      description: |
        An object that contains information about the import process.
      example:
        index_id: 6298d673f1090f1100476d4c
        index_name: myIndex
        created_at: 2024-09-22T13:25:00Z
        ended_at: 2024-09-22T13:25:00Z
        video_status:
          ready: 10
          validating: 2
          queued: 3
          pending: 4
          indexing: 5
          failed: 6
        failed_files:
        - filename: 01.mp4
          error_message: The file is not a valid video file.
      properties:
        index_id:
          description: The unique identifier of the index associated with this import.
          example: 6298d673f1090f1100476d4c
          type: string
        index_name:
          description: The name of the index associated with this import.
          example: myIndex
          type: string
        created_at:
          description: "The date and time, in the RFC 3339 format when the import\
            \ process was initiated."
          example: 2024-09-22T13:25:00Z
          format: date-time
          type: string
        ended_at:
          description: "The date and time, in the RFC 3339 format, when the platform\
            \ completed importing your videos. A `null` value indicates that the import\
            \ process is still ongoing."
          example: 2024-09-22T13:25:00Z
          format: date-time
          type: string
        video_status:
          $ref: "#/components/schemas/ImportLog_video_status"
        failed_files:
          description: "An array containing the video files that failed to import,\
            \ along with details about the error."
          example:
          - filename: 01.mp4
            error_message: The file is not a valid video file.
          items:
            $ref: "#/components/schemas/ImportLog_failed_files_inner"
          type: array
    VideoItem:
      description: |
        An object that contains information about a video file.
      example:
        video_id: 6298d673f1090f1100476d4c
        filename: 01.mp4
        created_at: 2024-09-22T13:25:00Z
      properties:
        video_id:
          description: The unique identifier of the video.
          example: 6298d673f1090f1100476d4c
          type: string
        filename:
          description: The name of the video file.
          example: 01.mp4
          type: string
        created_at:
          description: "The date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"\
            ), when the video was added to the import process."
          example: 2024-09-22T13:25:00Z
          format: date-time
          type: string
      required:
      - created_at
      - filename
      - video_id
    VideoItemFailed:
      description: |
        An object that contains information about a video file that failed to import.
      example:
        filename: 01.mp4
        created_at: 2024-09-22T13:25:00Z
        error_message: The file is not a valid video file.
      properties:
        filename:
          description: The name of the video file.
          example: 01.mp4
          type: string
        created_at:
          description: "The date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"\
            ), when the video was added to the import process."
          example: 2024-09-22T13:25:00Z
          format: date-time
          type: string
        error_message:
          description: The error message explaining why the video failed to import.
          example: The file is not a valid video file.
          type: string
      required:
      - created_at
      - error_message
      - filename
    TranscriptionData:
      description: "An array of objects that contains the transcription. For each\
        \ time range for which the platform finds spoken words, it returns an object\
        \ that contains the fields below. If the platform doesn't find any spoken\
        \ words, the `data` field is set to `null`. Note that the official SDKs will\
        \ support this feature in a future release."
      example:
      - start: 10.5
        end: 15.2
        value: "Hello, how are you?"
      items:
        $ref: "#/components/schemas/TranscriptionData_inner"
      type: array
    EmbeddingResponse:
      description: |
        An object that contains the generated embedding vector and associated information.
      example:
        model_name: Marengo-retrieval-2.7
        audio_embedding:
          segments:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
            start_offset_sec: 0
          metadata:
            input_filename: 01.mp3
        image_embedding:
          segments:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
          metadata:
            input_filename: 01.jpg
        text_embedding:
          segments:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
      properties:
        model_name:
          description: The name of the video understanding model the platform has
            used to create this embedding.
          example: Marengo-retrieval-2.7
          type: string
        text_embedding:
          allOf:
          - $ref: "#/components/schemas/TextEmbeddingResult"
          description: An object that contains the generated text embedding vector
            and associated information. Present when a text was processed.
        image_embedding:
          allOf:
          - $ref: "#/components/schemas/ImageEmbeddingResult"
          description: An object that contains the generated image embedding vector
            and associated information. Present when an image was processed.
        audio_embedding:
          allOf:
          - $ref: "#/components/schemas/AudioEmbeddingResult"
          description: An object that contains the generated audio embedding vector
            and associated information. Present when an audio file was processed.
      required:
      - model_name
    TextEmbeddingResult:
      description: An object containing the generated embedding vector.
      example:
        segments:
        - float:
          - -0.042632885
          - 0.014312328
          - 0.029209055
      properties:
        error_message:
          description: Error message if the embedding generation failed.
          example: The text is too long.
          type: string
        segments:
          description: |
            An object that contains the embedding.
          example:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
          items:
            $ref: "#/components/schemas/BaseSegment"
          type: array
    AudioEmbeddingResult:
      description: |
        An object that contains the generated embedding vector and associated information.
      example:
        segments:
        - float:
          - -0.042632885
          - 0.014312328
          - 0.029209055
        error_message: Audio file is not valid.
        metadata:
          input_url: https://example.com/audio.mp3
          input_filename: 01.mp3
      properties:
        segments:
          description: |
            An object that contains the embedding and its start time.
          example:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
          items:
            $ref: "#/components/schemas/AudioSegment"
          type: array
        error_message:
          description: Error message if the embedding generation failed.
          example: Audio file is not valid.
          type: string
        metadata:
          $ref: "#/components/schemas/BaseEmbeddingMetadata"
    ImageEmbeddingResult:
      description: An object containing the generated embedding vector and associated
        information.
      example:
        segments:
        - float:
          - -0.042632885
          - 0.014312328
          - 0.029209055
      properties:
        error_message:
          description: Error message if the embedding generation failed.
          example: Image file is not valid.
          type: string
        segments:
          description: |
            An object that contains the embedding.
          example:
          - float:
            - -0.042632885
            - 0.014312328
            - 0.029209055
          items:
            $ref: "#/components/schemas/BaseSegment"
          type: array
        metadata:
          $ref: "#/components/schemas/BaseEmbeddingMetadata"
    BaseEmbeddingMetadata:
      description: |
        Metadata about the embedding.
      example:
        input_url: https://example.com/audio.mp3
        input_filename: 01.mp3
      properties:
        input_url:
          description: |
            The URL of the media file used to generate the embedding. Present if a URL was provided in the request.
          example: https://example.com/audio.mp3
          type: string
        input_filename:
          description: |
            The name of the media file used to generate the embedding. Present if a file was provided in the request.
          example: 01.mp3
          type: string
    BaseSegment:
      description: |
        An object that contains the embedding value of a segment.
      example:
        float:
        - 0.042632885
        - 0.014312328
        - 0.029209055
      properties:
        float:
          description: An array of floating point numbers representing the embedding.
            You can use this array with cosine similarity for various downstream tasks.
            Note that the example response was truncated for brevity.
          example:
          - 0.042632885
          - 0.014312328
          - 0.029209055
          items:
            example: 0.042632885
            format: float
            type: number
          type: array
    AudioSegment:
      allOf:
      - $ref: "#/components/schemas/BaseSegment"
      - example:
          float:
          - 0.042632885
          - 0.014312328
          - 0.029209055
          start_offset_sec: 0
        properties:
          start_offset_sec:
            description: "The start time, in seconds, from which the platform generated\
              \ the audio embedding."
            example: 0
            type: number
      description: |
        An object that contains the audio embedding and its start time.
    VideoSegment:
      allOf:
      - $ref: "#/components/schemas/AudioSegment"
      - example:
          float:
          - 0.042632885
          - 0.014312328
          - 0.029209055
          end_offset_sec: 6
          embedding_option: visual-text
          embedding_scope: clip
        properties:
          end_offset_sec:
            description: "The end time, in seconds, of the video segment for this\
              \ embedding."
            example: 6
            type: number
          embedding_option:
            description: The type of the embedding.
            example: visual-text
            type: string
          embedding_scope:
            description: The scope of the video embedding.
            example: clip
            type: string
      description: |
        An object that contains the video embedding and its start time. Each segment is between 2 and 10 seconds.
    EndTime:
      description: |
        The end time of the matching video clip, expressed in seconds.
      example: 60
      type: number
    StartTime:
      description: |
        The start time of the matching video clip, expressed in seconds.
      example: 60
      type: number
    ScoreSearchTerms:
      description: |
        A quantitative value determined by the AI model representing the level of confidence that the results match your search terms.
      example: 90.5
      type: number
    confidence:
      description: |
        A qualitative indicator based on the value of the `score` field. This field can take one of the following values:
        - `high`
        - `medium`
        - `low`
        - `extremely low`
      example: high
      type: string
    SearchItem:
      description: |
        An object that contains the search results.
      example:
        score: 85.08
        start: 515.4375
        end: 527
        video_id: 639963a1ce36463e0199c8c7
        confidence: high
        thumbnail_url: https://example.com/thumbnail.jpg
        transcription: "A woman vlogs about her summer day, sharing her experience"
      properties:
        score:
          description: |
            A quantitative value determined by the AI model representing the level of confidence that the results match your search terms.
          example: 90.5
          type: number
        start:
          description: |
            The start time of the matching video clip, expressed in seconds.
          example: 60
          type: number
        end:
          description: |
            The end time of the matching video clip, expressed in seconds.
          example: 60
          type: number
        video_id:
          description: "A string representing the unique identifier of the video.\
            \ Once the platform indexes a video, it assigns a unique identifier. Note\
            \ that this is different from the identifier of the video indexing task."
          example: 639963a1ce36463e0199c8c7
          type: string
        confidence:
          description: |
            A qualitative indicator based on the value of the `score` field. This field can take one of the following values:
            - `high`
            - `medium`
            - `low`
            - `extremely low`
          example: high
          type: string
        thumbnail_url:
          description: |
            If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.
          example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/516.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=9e991f972f8a1baa647d7460685d99e20c4a27408406a972a4baf173a10b0102
          type: string
        transcription:
          description: A transcription of the spoken words that are captured in the
            video. Note that the official SDKs will support this feature in a future
            release.
          example: "A woman vlogs about her summer day, sharing her experience"
          type: string
        id:
          description: A string representing the unique identifier of the video. It
            only appears when the `group_by=video` parameter is used in the request.
          example: 639963a1ce36463e0199c8c7
          type: string
        clips:
          description: An array that contains detailed information about the clips
            that match your query. The platform returns this array only when the `group_by`
            parameter is set to `video` in the request.
          items:
            $ref: "#/components/schemas/SearchItem_clips_inner"
          type: array
    thumbnail_url:
      description: |
        If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.
      example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/516.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=9e991f972f8a1baa647d7460685d99e20c4a27408406a972a4baf173a10b0102
      type: string
    total_results:
      description: The total number of results.
      example: 10
      type: integer
    page:
      description: The page you retrieved.
      example: 1
      type: integer
    total_page:
      description: The total number of pages.
      example: 10
      type: integer
    limit_per_page_simple:
      description: The maximum number of items on each page.
      example: 10
      type: integer
    page_info:
      description: An object that provides information about pagination.
      example:
        limit_per_page: 10
        page: 1
        total_page: 1
        total_results: 2
      properties:
        limit_per_page:
          description: The maximum number of items on each page.
          example: 10
          type: integer
        page:
          description: The page you retrieved.
          example: 1
          type: integer
        total_page:
          description: The total number of pages.
          example: 10
          type: integer
        total_results:
          description: The total number of results.
          example: 10
          type: integer
    total_inner_matches:
      description: |
        When grouping by video, the platform return this field that shows the total number of video clips matching your query.
      example: 10
      type: integer
    next_page_token:
      description: The unique identifier of the next page.
      example: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
      type: string
    prev_page_token:
      description: The unique identifier of the previous page.
      example: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
      type: string
    SearchResults:
      description: |
        An object that contains your search results.
      example:
        search_pool:
          total_count: 10
          total_duration: 8731
          index_id: 639961c9e219c90227c371a2
        data:
        - score: 85.08
          start: 238.75
          end: 259.62109375
          video_id: 639963a1ce36463e0199c8c7
          confidence: high
          thumbnail_url: https://example.com/thumbnail.jpg
      properties:
        data:
          description: |
            An array that contains your search results. For each match found, the model returns the following fields:
          example:
          - score: 85.08
            start: 515.4375
            end: 527
            video_id: 639963a1ce36463e0199c8c7
            confidence: high
            thumbnail_url: https://example.com/thumbnail.jpg
            transcription: "A woman vlogs about her summer day, sharing her experience"
          items:
            $ref: "#/components/schemas/SearchItem"
          type: array
        page_info:
          $ref: "#/components/schemas/SearchResults_page_info"
        search_pool:
          $ref: "#/components/schemas/search_pool"
    search_pool:
      description: An object that contains details about the index you queried.
      example:
        total_count: 10
        total_duration: 10
        index_id: 663da73b31cdd0c1f638a8e6
      properties:
        total_count:
          description: The number of videos in the index you queried.
          example: 10
          type: integer
        total_duration:
          description: The total duration of the videos.
          example: 10
          type: number
        index_id:
          description: The unique identifier of the index.
          example: 663da73b31cdd0c1f638a8e6
          type: string
    threshold_search:
      default: low
      description: |
        Use this parameter to filter on the level of confidence that the results match your query.

        **Default**: `low`
      enum:
      - high
      - medium
      - low
      - none
      example: low
      type: string
    Index:
      description: |
        An index groups one or more videos stored as vectors and is the most granular level at which you can perform a search.
      example:
        _id: 663da73b31cdd0c1f638a8e6
        created_at: 2024-03-01T00:00:00Z
        updated_at: 2024-03-01T00:00:00Z
        expires_at: 2024-03-01T00:00:00Z
        index_name: My Index
        total_duration: 10
        video_count: 10
        models:
        - model_name: marengo2.7
          model_options:
          - visual
          - audio
        addons:
        - thumbnail
      properties:
        _id:
          description: A string representing the unique identifier of the index. It
            is assigned by the API when an index is created.
          example: 663da73b31cdd0c1f638a8e6
          type: string
        created_at:
          description: "A string representing the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index was created."
          example: 2024-03-01T00:00:00Z
          type: string
        updated_at:
          description: "A string representing the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index has been updated."
          example: 2024-03-01T00:00:00Z
          type: string
        expires_at:
          description: |
            A string representing the date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), when your index will expire.

            If you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/v1.3/docs/get-started/manage-your-plan#upgrade-your-plan) section.

            If you're on the Developer plan, this field is set to `null`, indicating no expiration.
          example: 2024-03-01T00:00:00Z
          type: string
        index_name:
          description: A string representing the name of the index.
          example: My Index
          type: string
        total_duration:
          description: "A number representing the total duration, in seconds, of the\
            \ videos in the index."
          example: 10
          type: number
        video_count:
          description: The number of videos uploaded to this index.
          example: 10
          type: number
        models:
          description: "An array containing the list of the [video understanding models](/v1.3/docs/concepts/models)\
            \ enabled for this index."
          example:
          - model_name: marengo2.7
            model_options:
            - visual
          items:
            $ref: "#/components/schemas/Index_models_inner"
          type: array
        addons:
          description: The list of the add-ons that are enabled for this index.
          example:
          - thumbnail
          items:
            example: thumbnail
            type: string
          type: array
      title: Index
    VideoEmbeddingMetadata:
      allOf:
      - $ref: "#/components/schemas/BaseEmbeddingMetadata"
      - example:
          input_filename: /Users/myuser/myvideo.mp4
          input_url: https://myvideo.com/myvideo.mp4
          video_clip_length: 6
          video_embedding_scope:
          - clip
          duration: 10
        properties:
          video_clip_length:
            description: "The duration for each clip in seconds, as specified by the\
              \ `video_clip_length` parameter of the [`POST`](/v1.3/api-reference/video-embeddings/create)\
              \ method of the `/embed/task` endpoint. Note that the platform automatically\
              \ truncates video segments shorter than 2 seconds. For a 31-second video\
              \ divided into 6-second segments, the final 1-second segment will be\
              \ truncated. This truncation only applies to the last segment if it\
              \ does not meet the minimum length requirement of 2 seconds."
            example: 6
            type: number
          video_embedding_scope:
            description: |
              The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video'].
            example:
            - clip
            items:
              example: clip
              type: string
            type: array
          duration:
            description: The total duration of the video in seconds.
            example: 10
            format: float
            type: number
      description: |
        An object containing metadata associated with the embedding.
    VideoEmbeddingTask:
      description: |
        A video embedding task that describes the status of the task and the metadata about the video.
      example:
        _id: 663da73b31cdd0c1f638a8e6
        model_name: Marengo-retrieval-2.7
        status: processing
        created_at: 2024-03-01T00:00:00Z
        video_embedding:
          metadata:
            input_filename: /Users/myuser/myvideo.mp4
            input_url: https://myvideo.com/myvideo.mp4
            video_clip_length: 6
            video_embedding_scope:
            - clip
            duration: 10
      properties:
        _id:
          description: |
            The unique identifier of the video embedding task.
          example: 663da73b31cdd0c1f638a8e6
          type: string
        model_name:
          description: |
            The name of the video understanding model the platform used to create the embedding.
          example: Marengo-retrieval-2.7
          type: string
        status:
          description: |
            A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
          example: processing
          type: string
        created_at:
          description: |
            The date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the video embedding task was created.
          example: 2024-03-01T00:00:00Z
          format: date-time
          type: string
        video_embedding:
          $ref: "#/components/schemas/VideoEmbeddingTask_video_embedding"
      title: Video Embedding Task
    videoIndexingTask:
      description: |
        A video indexing task that describes the status of the task and the metadata about the video.
      example:
        _id: 663da73b31cdd0c1f638a8e6
        video_id: 62a1ec6d9ea24f052b971a0f
        created_at: 2024-03-01T00:00:00Z
        updated_at: 2024-03-01T00:00:00Z
        status: ready
        index_id: 630aff993fcee0532cb809d0
        system_metadata:
          duration: 531.998133
          filename: 01.mp4
          height: 480
          width: 854
        hls:
          video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
          thumbnail_urls:
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          status: COMPLETE
          updated_at: 2024-01-16T07:59:40.879Z
      properties:
        _id:
          description: |
            A string representing the unique identifier of the task. It is assigned by the platform when a new task is created.
          example: 663da73b31cdd0c1f638a8e6
          type: string
        video_id:
          description: |
            A string representing the unique identifier of the video associated with the specified video indexing task.
          example: 62a1ec6d9ea24f052b971a0f
          type: string
        created_at:
          description: |
            A string indicating the date and time, in the RFC RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the task was created.
          example: 2024-03-01T00:00:00Z
          type: string
        updated_at:
          description: |
            A string indicating the date and time, in the RFC RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
          example: 2024-03-01T00:00:00Z
          type: string
        status:
          description: |
            A string indicating the status of the video indexing task. See the [Task object](/v1.3/api-reference/tasks/the-task-object) page for a list of possible statuses.
          example: ready
          type: string
        index_id:
          description: |
            A string representing the unique identifier of the index to which the video must be uploaded.
          example: 663da73b31cdd0c1f638a8e6
          type: string
        system_metadata:
          $ref: "#/components/schemas/videoIndexingTask_system_metadata"
      title: Video Indexing Task
    videoVector:
      description: |
        A video object that contains information about the video.
      example:
        _id: 663da73b31cdd0c1f638a8e6
        created_at: 2024-03-01T00:00:00Z
        updated_at: 2024-03-01T00:00:00Z
        indexed_at: 2024-03-01T00:00:00Z
        metadata:
          filename: 01.mp4
          duration: 531.998133
          fps: 741.875
          width: 640
          height: 360
          size: 65749715
      properties:
        _id:
          description: |
            A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs.
          example: 663da73b31cdd0c1f638a8e6
          type: string
        created_at:
          description: |
            A string indicating the date and time, in the RFC RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task was created.
          example: 2024-03-01T00:00:00Z
          type: string
        updated_at:
          description: |
            A string indicating the date and time, in the RFC RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
          example: 2024-03-01T00:00:00Z
          type: string
        indexed_at:
          description: |
            A string indicating the date and time, in the RFC RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task has been completed.
          example: 2024-03-01T00:00:00Z
          type: string
        system_metadata:
          $ref: "#/components/schemas/videoVector_system_metadata"
      title: Video Vector
    HLSObject:
      description: The platform returns this object only for the videos that you uploaded
        with the `enable_video_stream` parameter set to `true`.
      example:
        video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
        thumbnail_urls:
        - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
        - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000002.jpg
        - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000003.jpg
        status: COMPLETE
        updated_at: 2024-01-09T11:17:15.296Z
      properties:
        video_url:
          description: A string representing the URL of the video. You can then use
            this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming"
            target="_blank">HLS</a> protocol.
          example: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
          type: string
        thumbnail_urls:
          description: An array containing the URL of the thumbnail.
          example:
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000002.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000003.jpg
          items:
            example: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
            type: string
          type: array
        status:
          description: |
            A string representing the encoding status of the video file from its original format to a streamable format.
            Possible values:
            - `PROCESSING`: Video is currently being encoded and is not yet ready for streaming
            - `COMPLETE`: Encoding has successfully finished and the video is ready for streaming
            - `CANCELED`: Encoding was manually canceled before completion
            - `ERROR`: An error occurred during the encoding process
          enum:
          - PROCESSING
          - COMPLETE
          - CANCELED
          - ERROR
          example: COMPLETE
          type: string
        updated_at:
          description: "A string indicating the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated."
          example: 2024-01-09T11:17:15.296Z
          type: string
      title: HLS Object
    StreamGenerateResponse:
      description: |
        When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.

        The stream contains three types of events:
        1. Stream start
        2. Text generation
        3. Stream end

        To integrate the response into your application, follow the guidelines below:
        - Parse each line of the response as a separate JSON object.
        - Check the `event_type` field to determine how to handle the event.
        - For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.
        - Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.
      oneOf:
      - $ref: "#/components/schemas/StreamStartResponse"
      - $ref: "#/components/schemas/StreamTextResponse"
      - $ref: "#/components/schemas/StreamEndResponse"
      title: Streamed response
    StreamStartResponse:
      description: |
        Indicates the beginning of the stream.
      example:
        event_type: stream_start
        metadata:
          generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
      properties:
        event_type:
          description: |
            This field is always set to `stream_start` for this event.
          example: stream_start
          type: string
        metadata:
          $ref: "#/components/schemas/StreamStartResponse_metadata"
      title: Stream start
    StreamTextResponse:
      description: |
        Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.
      example:
        event_type: text_generation
        text: light-hearted moments of cats
      properties:
        event_type:
          description: |
            This field is always set to `text_generation` for this event.
          example: text_generation
          type: string
        text:
          description: |
            A fragment of the generated text.
          example: light-hearted moments of cats
          type: string
      title: Text generation
    StreamEndResponse:
      description: |
        Indicates the end of the stream.
      example:
        event_type: stream_end
        metadata:
          generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
      properties:
        event_type:
          description: |
            This field is always set to `stream_end` for this event.
          example: stream_end
          type: string
        metadata:
          $ref: "#/components/schemas/StreamEndResponse_metadata"
      title: Stream end
    NonStreamGenerateResponse:
      description: |
        When the value of the `stream` parameter is set to `false`, the response is as follows:
      example:
        id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
        data: 1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5. Outdoor
          adventure
        usage:
          output_tokens: 100
      properties:
        id:
          description: |
            Unique identifier of the response.
          example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
          type: string
        data:
          description: |
            The generated text based on the prompt you provided.
          example: 1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5.
            Outdoor adventure
          type: string
        usage:
          $ref: "#/components/schemas/TokenUsage"
      title: Non-streamed response
    TokenUsage:
      description: |
        The number of tokens used in the generation.
      example:
        output_tokens: 100
      properties:
        output_tokens:
          description: |
            The number of tokens in the generated text.
          type: integer
      title: Token usage for generation
    UserMetadata:
      additionalProperties: {}
      description: |
        Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

        **Example**:
        ```JSON
        "user_metadata": {
          "category": "recentlyAdded",
          "batchNumber": 5,
          "rating": 9.3,
          "needsReview": true
        }
        ```

        <Note title="Notes">
        -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.
        - You cannot override the following system-generated metadata fields:
          - `duration`
          - `filename`
          - `fps`
          - `height`
          - `model_names`
          - `size`
          - `video_title`
          - `width`
        </Note>
      example:
        category: recentlyAdded
        batchNumber: 5
        rating: 9.3
        needsReview: true
    create_video_indexing_task_request:
      properties:
        index_id:
          description: |
            The unique identifier of the index to which the video is being uploaded.
          example: 6298d673f1090f1100476d4c
          type: string
        video_file:
          description: |
            Specify this parameter to upload a video from your local file system.
          example: s3://twelve-labs-docs/01.mp4
          format: binary
          type: string
        video_url:
          description: |
            Specify this parameter to upload a video from a publicly accessible URL.
          example: https://example.com/01.mp4
          type: string
        enable_video_stream:
          default: true
          description: |
            This parameter indicates if the platform stores the video for streaming. When set to `true`, the platform stores the video, and you can retrieve its URL by calling the [`GET`](/v1.3/api-reference/videos/retrieve) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.
          type: boolean
      required:
      - index_id
    cloud_to_cloud_import_videos_request:
      example:
        index_id: 6298d673f1090f1100476d4c
        incremental_import: true
        retry_failed: false
        user_metadata:
          category: recentlyAdded
          batchNumber: 5
      properties:
        index_id:
          description: |
            The unique identifier of the index to which the videos are being uploaded.
          example: 6298d673f1090f1100476d4c
          type: string
        incremental_import:
          default: true
          description: |
            Specifies whether or not incremental sync is enabled. If set to `false`, the platform will synchronize all the files in the bucket.

            **Default**: `true`.
          type: boolean
        retry_failed:
          default: false
          description: |
            Determines whether the platform retries failed uploads. When set to `true`, the platform attempts to re-upload files that failed during the initial upload process.

            **Default**: `false`.
          type: boolean
        user_metadata:
          additionalProperties: {}
          description: |
            Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

            <Note title="Notes">
            - The metadata you specify when calling this method applies to all videos imported in this request.
            -  If you want to store other types of data such as objects or arrays, you must convert your data into string values.
            - You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.
            </Note>
          example:
            category: recentlyAdded
            batchNumber: 5
      required:
      - index_id
    create_index_request_models_inner:
      example:
        model_name: marengo2.7
        model_options:
        - visual
        - audio
      properties:
        model_name:
          description: |
            The name of the model. The following models are available:

              - **Embedding**: These models are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

                - `marengo2.7`

              - **Generative**: These models generate text based on your videos.

                - `pegasus1.2`

            <Note title="Note">
            You cannot change the models once the index has been created.
            </Note>

            For more details, see the [Video understanding models](/v1.3/docs/concepts/models) page.
          example: marengo2.7
          type: string
        model_options:
          description: |
            An array that specifies how the platform will process the videos uploaded to this index. For the Marengo and Pegasus models, you can specify one or both of the following model options: `visual` and `audio`. For more details, see the [model options](/v1.3/docs/concepts/model-options) page.
          example:
          - visual
          - audio
          items:
            example: visual
            type: string
          maxItems: 2
          minItems: 1
          type: array
      required:
      - model_name
      - model_options
    create_index_request:
      properties:
        index_name:
          description: |
            The name of the index. Make sure you use a succinct and descriptive name.
          example: myIndex
          type: string
        models:
          description: |
            An array that specifies the [video understanding models](/v1.3/docs/concepts/models) and the [model options](/v1.3/docs/concepts/modalities#model-options) to be enabled for this index. This determines how the platform processes your videos.
          example:
          - model_name: marengo2.7
            model_options:
            - visual
            - audio
          items:
            $ref: "#/components/schemas/create_index_request_models_inner"
          maxItems: 2
          minItems: 1
          type: array
        addons:
          description: |
            An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:
            - `thumbnail`: Enables thumbnail generation.

            If you don't provide this parameter, no add-ons will be enabled.

            <Note title="Notes">
            - You can only enable addons when using the Marengo video understanding model.
            - You cannot disable an add-on once the index has been created.
            </Note>
          example:
          - thumbnail
          items:
            example: thumbnail
            type: string
          maxItems: 1
          minItems: 1
          type: array
      required:
      - index_name
      - models
    update_index_request:
      properties:
        index_name:
          description: |
            The name of the index.
          example: myIndex
          type: string
      required:
      - index_name
    list_videos_user_metadata_parameter_value:
      example:
        category: recentlyAdded
        batchNumber: 5
        rating: 9.3
        needsReview: true
      oneOf:
      - example: recentlyAdded
        type: string
      - example: 5
        type: number
      - example: true
        type: boolean
    update_video_information_request:
      example:
        user_metadata:
          category: recentlyAdded
          batchNumber: 5
          rating: 9.3
          needsReview: true
      properties:
        user_metadata:
          additionalProperties: {}
          description: |
            Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

            **Example**:
            ```JSON
            "user_metadata": {
              "category": "recentlyAdded",
              "batchNumber": 5,
              "rating": 9.3,
              "needsReview": true
            }
            ```

            <Note title="Notes">
            -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.
            - You cannot override the following system-generated metadata fields:
              - `duration`
              - `filename`
              - `fps`
              - `height`
              - `model_names`
              - `size`
              - `video_title`
              - `width`
            </Note>
          example:
            category: recentlyAdded
            batchNumber: 5
            rating: 9.3
            needsReview: true
    summarize_request:
      example:
        video_id: 6298d673f1090f1100476d4c
        type: summary
        prompt: "Generate a summary of this video for a social media post, up to two\
          \ sentences."
        temperature: 0.2
      properties:
        video_id:
          description: |
            The unique identifier of the video that you want to summarize.
          example: 6298d673f1090f1100476d4c
          type: string
        type:
          description: |
            Specifies the type of summary. Use one of the following values:
              - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.
              - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.
              - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.
          example: summary
          type: string
        prompt:
          description: |
            Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.

            <Note title="Notes">
            - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
            - The maximum length of a prompt is 2,000 tokens.
            </Note>

            **Example**: Generate a summary of this video for a social media post, up to two sentences.
          example: "Generate a summary of this video for a social media post, up to\
            \ two sentences."
          type: string
        temperature:
          default: 0.2
          description: |
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.2
            **Min:** 0
            **Max:** 1
          example: 0.2
          format: float
          maximum: 1
          minimum: 0
          type: number
      required:
      - type
      - video_id
    gist_request:
      example:
        video_id: 6298d673f1090f1100476d4c
        types:
        - title
        - topic
      properties:
        video_id:
          description: |
            The unique identifier of the video that you want to generate a gist for.
          example: 6298d673f1090f1100476d4c
          type: string
        types:
          description: |
            Specifies the type of gist. Use one of the following values:
              - `title`: A title succinctly captures a video's main theme, such as "From Consumerism to Minimalism: A Journey Toward Sustainable Living," guiding viewers to its content and themes.
              - `topic`: A topic is the central theme of a video, such as "Shopping Vlog Lifestyle", summarizing its content for efficient categorization and reference.
              - `hashtag`: A hashtag, like "#BlackFriday", represents key themes in a video, enhancing its discoverability and categorization on social media platforms.
          example:
          - title
          - topic
          items:
            enum:
            - title
            - topic
            - hashtag
            example: title
            type: string
          type: array
      required:
      - types
      - video_id
    analyze_request:
      example:
        video_id: 6298d673f1090f1100476d4c
        prompt: "I want to generate a description for my video with the following\
          \ format - Title of the video, followed by a summary in 2-3 sentences, highlighting\
          \ the main topic, key events, and concluding remarks."
        temperature: 0.2
        stream: true
      properties:
        video_id:
          description: The unique identifier of the video for which you wish to generate
            a text.
          example: 6298d673f1090f1100476d4c
          type: string
        prompt:
          description: |
            A prompt that guides the model on the desired format or content.

            <Note title="Notes">
            - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.
            - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
            - The maximum length of a prompt is 2,000 tokens.
            </Note>

            **Examples**:

            - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).
            - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.
          example: "I want to generate a description for my video with the following\
            \ format- Title of the video, followed by a summary in 2-3 sentences,\
            \ highlighting the main topic, key events, and concluding remarks."
          type: string
        temperature:
          default: 0.2
          description: |
            Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

            **Default:** 0.2
            **Min:** 0
            **Max:** 1
          example: 0.2
          format: float
          maximum: 1
          minimum: 0
          type: number
        stream:
          default: true
          description: |
            Set this parameter to `true` to enable streaming responses in the <a href="https://github.com/ndjson/ndjson-spec" target="_blank">NDJSON</a> format.

            **Default:** `true`
          example: true
          type: boolean
      required:
      - prompt
      - video_id
    analyze_200_response:
      oneOf:
      - $ref: "#/components/schemas/StreamGenerateResponse"
      - $ref: "#/components/schemas/NonStreamGenerateResponse"
    create_text_image_audio_embedding_request:
      properties:
        model_name:
          description: |
            The name of the model you want to use. The following models are available:
              - `Marengo-retrieval-2.7`
          example: Marengo-retrieval-2.7
          type: string
        text:
          description: |
            The text for which you wish to create an embedding.

            <Note title="Note">
            Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.
            </Note>

            **Example**: "Man with a dog crossing the street"
          example: Man with dog crossing the steet
          type: string
        text_truncate:
          default: end
          description: |
            Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
            This parameter can take one of the following values:
            - `start`: The platform will truncate the start of the provided text.
            - `end`: The platform will truncate the end of the provided text.
            - `none`: The platform will return an error if the text is longer than the maximum token limit.

            **Default**: `end`
          example: end
          type: string
        image_url:
          description: |
            The publicly accessible URL of the image for which you wish to create an embedding. This parameter is required for image embeddings if `image_file` is not provided.
          example: https://example.com/image.jpg
          format: uri
          type: string
        image_file:
          description: |
            The image file for which you wish to create an embedding as a local file. This parameter is required for image embeddings if `image_url` is not provided.
          example: /Users/john/Documents/image.jpg
          format: binary
          type: string
        audio_url:
          description: |
            The publicly accessible URL of the audio file for which you wish to creae an emebdding. This parameter is required for audio embeddings if `audio_file` is not provided.
          example: https://example.com/audio.mp3
          format: uri
          type: string
        audio_file:
          description: |
            The audio file for which you wish to create an embedding as a local file. This parameter is required for audio embeddings if `audio_url` is not provided.
          example: /Users/john/Documents/audio.mp3
          format: binary
          type: string
        audio_start_offset_sec:
          default: 0
          description: |
            Specifies the start time, in seconds, from which the platform generates the audio embeddings. This parameter allows you to skip the initial portion of the audio during processing.
            **Default**: `0`.
          example: 0
          type: number
      required:
      - model_name
    create_video_embedding_task_request:
      properties:
        model_name:
          description: |
            The name of the model you want to use. The following models are available:
              - `Marengo-retrieval-2.7`
          example: Marengo-retrieval-2.7
          type: string
        video_file:
          description: |
            Specify this parameter to upload a video from your local file system.
          example: /Users/john/Documents/video.mp4
          format: binary
          type: string
        video_url:
          description: |
            Specify this parameter to upload a video from a publicly accessible URL.
          example: https://example.com/video.mp4
          type: string
        video_start_offset_sec:
          description: |
            The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.

            **Default**: 0
            **Min**: 0
            **Max**: Duration of the video minus video_clip_length
          example: 0
          format: float
          type: number
        video_end_offset_sec:
          description: |
            The end offset in seconds from the beginning of the video where processing should stop.

            Ensure the following when you specify this parameter:
            - The end offset does not exceed the total duration of the video file.
            - The end offset is greater than the start offset.
            - You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.

            **Min**: video_start_offset + video_clip_length
            **Max**: Duration of the video file
          example: 60
          format: float
          type: number
        video_clip_length:
          description: |
            The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.

            **Default**: 6
            **Min**: 2
            **Max**: 10
          example: 6
          format: integer
          type: number
        video_embedding_scope:
          default: clip
          description: |
            Defines the scope of video embedding generation. Valid values are the following:
            - `clip`: Creates embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.
            - `clip` and `video`: Creates embeddings for video segments and the entire video.

            To create embeddings for segments and the entire video in the same request, include this parameter twice as shown below:

            ```json
            --form video_embedding_scope=clip \
            --form video_embedding_scope=video
            ```

            **Default**: `clip`
          example: clip
          type: string
      required:
      - model_name
    any_to_video_search_request:
      example:
        index_id: 6298d673f1090f1100476d4c
        search_options:
        - visual
        query_text: A man walking a dog
        adjust_confidence_level: 0.5
        group_by: clip
        sort_option: score
        operator: or
        page_limit: 10
        filter: "{\"id\":[\"66284191ea717fa66a274832\"]}"
      properties:
        query_media_type:
          description: |
            The type of media you wish to use. This parameter is required for media queries. For example, to perform an image-based search, set this parameter to `image`.
          enum:
          - image
          example: image
          type: string
        query_media_url:
          description: |
            The publicly accessible URL of the media file you wish to use. This parameter is required for media queries if `query_media_file` is not provided.
          example: https://example.com/image.jpg
          type: string
        query_media_file:
          description: |
            The media you wish to use as a local file. This parameter is required for media queries if `query_media_url` is not provided.
          example: /Users/john/Documents/image.jpg
          format: binary
          type: string
        query_text:
          description: |
            The text query to search for. This parameter is required for text queries. Note that the platform supports full natural language-based search.
          example: A man walking a dog
          type: string
        index_id:
          description: |
            The unique identifier of the index to search.
          example: 6298d673f1090f1100476d4c
          type: string
        search_options:
          description: |
            Specifies the [sources of information](/v1.3/docs/concepts/modalities#search-options) the platform uses when performing a search. You must include the `search_options` parameter separately for each desired source of information.

            <Note title="Notes">
            - The search options you specify must be a subset of the [model options](/v1.3/docs/concepts/modalities#model-options) used when you created the index.
            - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.

            Example:
            To search using both visual and audio cues, include this parameter twice in the request as shown below:
            ```JSON
            --form search_options=visual \
            --form search_options=audio \
            ```
            </Note>
          example:
          - visual
          - audio
          items:
            enum:
            - visual
            - audio
            example: visual
            type: string
          type: array
        adjust_confidence_level:
          default: 0.5
          description: |
            This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

            **Min**: 0
            **Max**: 1
            **Default:** 0.5
          example: 0.5
          format: float
          type: number
        group_by:
          default: clip
          description: |
            Use this parameter to group or ungroup items in a response. It can take one of the following values:
            - `video`:  The platform will group the matching video clips in the response by video.
            - `clip`: The matching video clips in the response will not be grouped.

            **Default:** `clip`
          enum:
          - video
          - clip
          example: clip
          type: string
        threshold:
          $ref: "#/components/schemas/threshold_search"
        sort_option:
          default: score
          description: |
            Use this parameter to specify the sort order for the response.

            When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.

            If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

            If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are grouped by video.


            **Default:** `score`
          enum:
          - score
          - clip_count
          example: score
          type: string
        operator:
          default: or
          description: |
            When you perform a search specifying multiple [sources of information](/v1.3/docs/concepts/modalities#search-options), you can use the this parameter to broaden or narrow your search.

              The following logical operators are supported:

              - `or`

              - `and`

              For details and examples, see the [Using multiple sources of information](/v1.3/docs/guides/search/queries/text-queries#visual-and-audio) section.


              **Default**: `or`.
          enum:
          - or
          - and
          example: or
          type: string
        page_limit:
          default: 10
          description: |
            The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page.

            **Max**: `50`.
          example: 10
          type: integer
        filter:
          description: "Specifies a stringified JSON object to filter your search\
            \ results. Supports both system-generated metadata (example: video ID,\
            \ duration) and user-defined metadata.\n\n**Syntax for filtering**\n\n\
            The following table describes the supported data types, operators, and\
            \ filter syntax: \n\n| Data type | Operator | Description | Syntax |\n\
            |:----------|:---------|:------------|:-------|\n| String | `=` | Matches\
            \ results equal to the specified value. | `{\"field\": \"value\"}` \n\
            | Array of strings | `=` | Matches results with any value in the specified\
            \ array. Supported only for `id`. | `{\"id\": [\"value1\", \"value2\"\
            ]}` |\n| Numeric (integer, float) | `=`, `lte`, `gte` | Matches results\
            \ equal to or within a range of the specified value. | `{\"field\": number}`\
            \ or `{\"field\": { \"gte\": number, \"lte\": number }}` |\n| Boolean\
            \ | `=` | Matches results equal to the specified boolean value. | `{\"\
            field\": true}` or `{\"field\": false}`. |\n\n<br/>\n**System-generated\
            \ metadata**\n\nThe table below describes the system-generated metadata\
            \ available for filtering your  search results:\n\n| Field name | Description\
            \ | Type | Example |\n|:-----------|:------------|:-----|:--------|\n\
            | `id` | Filters by specific video IDs. | Array of strings | `{\"id\"\
            : [\"67cec9caf45d9b64a58340fc\", \"67cec9baf45d9b64a58340fa\"]}`. |\n\
            | `duration` | Filters based on the duration of the video containing the\
            \ segment that matches your query. | Number or object with `gte` and `lte`\
            \ | `{\"duration\": 600}` or `{\"duration\": { \"gte\": 600, \"lte\":\
            \ 800 }}` |\n| `width` | Filters by video width (in pixels). | Number\
            \ or object with `gte` and `lte` | `{\"width\": 1920}` or `{\"width\"\
            : { \"gte\": 1280, \"lte\": 1920}}` |\n| `height` | Filters by video height\
            \ (in pixels). | Number or object with `gte` and `lte`. | `{\"height\"\
            : 1080}` or `{\"height\": { \"gte\": 720, \"lte\": 1080 }}`. |\n| `size`\
            \ | Filters by video size (in bytes) | Number or object with `gte` and\
            \ `lte`. | `{\"size\": 1048576}` or `{\"size\": { \"gte\": 1048576, \"\
            lte\": 5242880}}` | \n| `filename` | Filters by the exact file name. |\
            \ String | `{\"filename\": \"Animal Encounters part 1\"}` | \n\n<br/>\n\
            **User-defined metadata**\n\nTo filter by user-defined metadata:\n1. Add\
            \ metadata to your video by calling the [`PUT`](/v1.3/api-reference/videos/update)\
            \ method of the `/indexes/:index-id/videos/:video-id` endpoint\n2. Reference\
            \ the custom field in your filter object. For example, to filter videos\
            \ where a custom field named `needsReview` of type boolean is `true`,\
            \ use `{\"needs_review\": true}`.\n\nFor more details and examples, see\
            \ the [Filter search results](/v1.3/docs/guides/search/filtering) page.\n"
          example: "{\"id\":[\"66284191ea717fa66a274832\"]}"
          type: string
      required:
      - index_id
      - search_options
    ImportLog_video_status:
      description: "Counts of files in different statuses. See the [Task object](/v1.3/api-reference/tasks/the-task-object)\
        \ page for details on each status."
      example:
        ready: 10
        validating: 2
        queued: 3
        pending: 4
        indexing: 5
        failed: 6
      properties:
        ready:
          example: 10
          type: integer
        validating:
          example: 2
          type: integer
        queued:
          example: 3
          type: integer
        pending:
          example: 4
          type: integer
        indexing:
          example: 5
          type: integer
        failed:
          example: 6
          type: integer
      required:
      - failed
      - indexing
      - pending
      - queued
      - ready
      - validating
    ImportLog_failed_files_inner:
      example:
        filename: 01.mp4
        error_message: The file is not a valid video file.
      properties:
        filename:
          description: The name of the video file that failed to import.
          example: 01.mp4
          type: string
        error_message:
          description: A human-readable error message.
          example: The file is not a valid video file.
          required:
          - error_message
          - filename
          type: string
    TranscriptionData_inner:
      properties:
        start:
          description: "The start of the time range, expressed in seconds."
          example: 10.5
          type: number
        end:
          description: "The end of the time range, expressed in seconds."
          example: 15.2
          type: number
        value:
          description: Text representing the spoken words within this time range.
          example: "Hello, how are you?"
          type: string
    SearchItem_clips_inner:
      properties:
        score:
          description: |
            A quantitative value determined by the AI model representing the level of confidence that the results match your search terms.
          example: 90.5
          type: number
        start:
          description: |
            The start time of the matching video clip, expressed in seconds.
          example: 60
          type: number
        end:
          description: |
            The end time of the matching video clip, expressed in seconds.
          example: 60
          type: number
        confidence:
          description: |
            A qualitative indicator based on the value of the `score` field. This field can take one of the following values:
            - `high`
            - `medium`
            - `low`
            - `extremely low`
          example: high
          type: string
        thumbnail_url:
          description: |
            If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.
          example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/516.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=9e991f972f8a1baa647d7460685d99e20c4a27408406a972a4baf173a10b0102
          type: string
        transcription:
          description: A transcription of the spoken words that are captured in the
            clip. Note that the official SDKs will support this feature in a future
            release.
          example: "A woman vlogs about her summer day, sharing her experience"
          type: string
        video_id:
          description: A string representing the unique identifier of the video for
            the corresponding clip.
          example: 639963a1ce36463e0199c8c7
          type: string
        user_metadata:
          additionalProperties: {}
          description: |
            Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

            **Example**:
            ```JSON
            "user_metadata": {
              "category": "recentlyAdded",
              "batchNumber": 5,
              "rating": 9.3,
              "needsReview": true
            }
            ```

            <Note title="Notes">
            -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.
            - You cannot override the following system-generated metadata fields:
              - `duration`
              - `filename`
              - `fps`
              - `height`
              - `model_names`
              - `size`
              - `video_title`
              - `width`
            </Note>
          example:
            category: recentlyAdded
            batchNumber: 5
            rating: 9.3
            needsReview: true
    SearchResults_page_info:
      description: An object that provides information about pagination.
      example:
        limit_per_page: 10
        page_expires_at: 2024-03-01T00:00:00Z
        total_results: 100
        next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
      properties:
        limit_per_page:
          description: |
            The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.
          example: 10
          type: integer
        page_expires_at:
          description: "A string representing the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires."
          example: 2024-03-01T00:00:00Z
          type: string
        total_results:
          description: |
            The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.
          example: 100
          type: integer
        total_inner_matches:
          description: |
            When grouping by video, the platform return this field that shows the total number of video clips matching your query.
          example: 10
          type: integer
        next_page_token:
          description: The unique identifier of the next page.
          example: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
          type: string
    Index_models_inner:
      example:
        model_name: marengo2.7
        model_options:
        - visual
      properties:
        model_name:
          description: A string representing the name of the model.
          example: marengo2.7
          type: string
        model_options:
          description: |
            An array of strings that contains the [model options](/v1.3/docs/concepts/modalities#model-options) enabled for this index.
          example:
          - visual
          items:
            example: visual
            type: string
          type: array
    VideoEmbeddingTask_video_embedding:
      description: |
        An object containing the metadata associated with the embedding.
      example:
        metadata:
          input_filename: /Users/myuser/myvideo.mp4
          input_url: https://myvideo.com/myvideo.mp4
          video_clip_length: 6
          video_embedding_scope:
          - clip
          duration: 10
      properties:
        metadata:
          $ref: "#/components/schemas/VideoEmbeddingMetadata"
    videoIndexingTask_system_metadata:
      description: |
        System-generated metadata about the video.
      example:
        duration: 531.998133
        filename: 01.mp4
        height: 480
        width: 854
      properties:
        duration:
          example: 10
          type: number
        filename:
          example: 01.mp4
          type: string
        height:
          example: 480
          type: integer
        width:
          example: 854
          type: integer
    videoVector_system_metadata:
      description: |
        System-generated metadata about the video.
      example:
        filename: 01.mp4
        duration: 531.998133
        fps: 741.875
        width: 640
        height: 360
        size: 65749715
      properties:
        filename:
          example: 01.mp4
          type: string
        duration:
          example: 531.998133
          type: number
        fps:
          example: 741.875
          type: number
        width:
          example: 640
          type: integer
        height:
          example: 360
          type: integer
        size:
          example: 65749715
          type: number
    StreamStartResponse_metadata:
      description: An object containing metadata about the stream.
      example:
        generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
      properties:
        generation_id:
          description: |
            A unique identifier for the generation session.
          example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
          type: string
    StreamEndResponse_metadata:
      description: An object containing metadata about the stream.
      example:
        generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
        usage:
          output_tokens: 100
      properties:
        generation_id:
          description: |
            The same unique identifier provided in the `stream_start` event.
          example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
          type: string
        usage:
          $ref: "#/components/schemas/TokenUsage"
    inline_object:
      example:
        data:
        - index_id: 66ed1ed7046a96796303a06f
          index_name: my sample index
          created_at: 2024-09-24T13:22:00Z
          ended_at: 2024-09-24T13:23:00Z
          video_status:
            ready: 5
            validating: 2
            pending: 1
            indexing: 3
            failed: 2
            queued: 0
          failed_files:
          - filename: VIDEO_3.mp4
            error_message: Video indexing has failed. Please try again.
        - index_id: 66ed1ed7046a96796303a06f
          index_name: my sample index
          created_at: 2024-09-22T13:25:00Z
          ended_at: 2024-09-24T13:26:00Z
          video_status:
            ready: 10
            validating: 0
            pending: 0
            indexing: 0
            failed: 3
            queued: 0
          failed_files:
          - filename: VIDEO_3.mp4
            error_message: No sound
      properties:
        data:
          description: An array that contains the import logs.
          example:
          - index_id: 66ed1ed7046a96796303a06f
            index_name: my sample index
            created_at: 2024-09-24T13:22:00Z
            ended_at: 2024-09-24T13:23:00Z
            video_status:
              ready: 5
              validating: 2
              pending: 1
              indexing: 3
              failed: 2
              queued: 0
            failed_files:
            - filename: VIDEO_3.mp4
              error_message: Video indexing has failed. Please try again.
          items:
            $ref: "#/components/schemas/ImportLog"
          type: array
    inline_object_1_allOf_page_info:
      description: An object that provides information about pagination.
      example:
        limit_per_page: 10
        page_expires_at: 2024-03-01T00:00:00Z
        total_results: 100
        next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
        prev_page_token: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
      properties:
        limit_per_page:
          description: |
            The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.
          example: 10
          type: integer
        page_expires_at:
          description: |
            A string representing the date and time, in the RFC 3339 format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
          example: 2024-03-01T00:00:00Z
          type: string
        total_results:
          description: |
            The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.
          example: 100
          type: integer
        total_inner_matches:
          description: |
            When grouping by video, the platform return this field that shows the total number of video clips matching your query.
          example: 10
          type: integer
        next_page_token:
          description: The unique identifier of the next page.
          example: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
          type: string
        prev_page_token:
          description: The unique identifier of the previous page.
          example: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
          type: string
    inline_object_1:
      allOf:
      - $ref: "#/components/schemas/SearchResults"
      - example:
          page_info:
            limit_per_page: 10
            page_expires_at: 2024-03-01T00:00:00Z
            total_results: 100
            next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
            prev_page_token: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
        properties:
          page_info:
            $ref: "#/components/schemas/inline_object_1_allOf_page_info"
      example:
        search_pool:
          total_count: 10
          total_duration: 8731
          index_id: 639961c9e219c90227c371a2
        data:
        - score: 85.08
          start: 238.75
          end: 259.62109375
          video_id: 639963a1ce36463e0199c8c7
          confidence: high
          thumbnail_url: https://example.com/thumbnail.jpg
    inline_object_2:
      properties:
        thumbnail:
          description: A string representing the URL of the thumbnail. Note that the
            URL expires in one hour.
          example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6320748774fed2f3511f2a92/10.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20220914%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220914T075213Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=46b3bac13fb8b022313244780c238cb6bfc53eddcbee3be23a8d2dd22d99543e
          type: string
    inline_object_3:
      example:
        data:
        - _id: 62a17bf847f5678267ec10cc
          created_at: 2022-06-09T04:50:00.879Z
          index_id: 62a0906d47f5678267ec10a6
          metadata:
            duration: 531.998133
            filename: 01.mp4
            height: 400
            width: 854
          status: ready
          updated_at: 2022-06-09T04:55:57.256Z
        - _id: 62a17bce47f5678267ec10c6
          created_at: 2022-06-09T04:49:20.001Z
          index_id: 62a0906d47f5678267ec10a6
          metadata:
            duration: 741.875
            filename: 02.mp4
            height: 480
            width: 854
          status: ready
          updated_at: 2022-06-09T04:54:10.345Z
        page_info:
          limit_per_page: 10
          page: 1
          total_page: 1
          total_results: 2
      properties:
        data:
          description: An array that contains up to `page_limit` videos.
          example:
          - _id: 639963a1ce36463e0199c8c7
            created_at: 2024-01-09T11:11:20.463Z
            updated_at: 2024-01-09T11:17:15.296Z
            indexed_at: 2024-01-09T11:17:15.296Z
            metadata:
              duration: 8716.8969
              filename: 01.mp4
          items:
            $ref: "#/components/schemas/videoVector"
          type: array
        page_info:
          $ref: "#/components/schemas/page_info"
    inline_object_4_system_metadata:
      description: System-generated metadata about the video.
      example:
        duration: 8716.8969
        filename: 01.mp4
        fps: 29.97002997002997
        height: 400
        width: 854
      properties:
        duration:
          example: 8716.8969
          type: number
        filename:
          example: 01.mp4
          type: string
        fps:
          example: 29.97002997002997
          type: number
        height:
          example: 400
          type: integer
        width:
          example: 854
          type: integer
    inline_object_4_embedding_video_embedding:
      description: |
        An object that contains the embeddings.
      example:
        segments:
        - start_offset_sec: 0
          end_offset_sec: 7.5666666
          embedding_option: visual-text
          embedding_scope: clip
          float:
          - -0.04747168
          - 0.030509098
          - 0.032282468
      properties:
        segments:
          description: An array of objects that contains the embeddings for each individual
            segment.
          example:
          - start_offset_sec: 0
            end_offset_sec: 7.5666666
            embedding_option: visual-text
            embedding_scope: clip
            float:
            - -0.04747168
            - 0.030509098
            - 0.032282468
          items:
            $ref: "#/components/schemas/VideoSegment"
          type: array
    inline_object_4_embedding:
      description: Contains the embedding and the associated information. The platform
        returns this field when the `embedding_option` parameter is specified in the
        request.
      example:
        model_name: Marengo-retrieval-2.7
        video_embedding:
          segments:
          - start_offset_sec: 0
            end_offset_sec: 7.5666666
            embedding_option: visual-text
            embedding_scope: clip
            float:
            - -0.04747168
            - 0.030509098
            - 0.032282468
      properties:
        model_name:
          description: The name of the video understanding model used to create the
            embedding.
          example: Marengo-retrieval-2.7
          type: string
        video_embedding:
          $ref: "#/components/schemas/inline_object_4_embedding_video_embedding"
    inline_object_4:
      example:
        _id: 61e17be5777e6caec646fa07
        created_at: 2022-01-14T13:34:29Z
        updated_at: 2022-01-14T13:34:29Z
        indexed_at: 2022-01-14T14:05:55Z
        system_metadata:
          duration: 3747.841667
          filename: IOKgzkakhlk.mp4
          fps: 29.97002997002997
          height: 360
          width: 482
        user_metadata:
          category: recentlyAdded
          batchNumber: 5
          rating: 9.3
          needsReview: true
        hls:
          video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
          thumbnail_urls:
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          status: COMPLETE
          updated_at: 2024-01-16T07:59:40.879Z
        embedding:
          model_name: Marengo-retrieval-2.7
          video_embedding:
            segments:
            - start_offset_sec: 0
              end_offset_sec: 7.5666666
              embedding_option: visual-text
              embedding_scope: clip
              float:
              - -0.04747168
              - 0.030509098
              - 0.032282468
        transcription:
        - start: 0
          end: 10.5
          value: "Hello, how are you?"
        - start: 10.5
          end: 15.2
          value: "I'm fine, thank you."
      properties:
        _id:
          description: The unique identifier of the video.
          example: 639963a1ce36463e0199c8c7
          type: string
        created_at:
          description: "A string indicating the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created."
          example: 2024-01-09T11:11:20.463Z
          type: string
        updated_at:
          description: "A string indicating the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the corresponding video indexing task\
            \ was last updated. The platform updates this field every time the corresponding\
            \ video indexing task transitions to a different state."
          example: 2024-01-09T11:17:15.296Z
          type: string
        indexed_at:
          description: "A string indicating the date and time, in the RFC 3339 format\
            \ (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed."
          example: 2024-01-09T11:17:15.296Z
          type: string
        system_metadata:
          $ref: "#/components/schemas/inline_object_4_system_metadata"
        user_metadata:
          additionalProperties: {}
          description: User-generated metadata about the video.
          example:
            category: recentlyAdded
            batchNumber: 5
            rating: 9.3
            needsReview: true
        hls:
          $ref: "#/components/schemas/HLSObject"
        embedding:
          $ref: "#/components/schemas/inline_object_4_embedding"
        transcription:
          description: "An array of objects that contains the transcription. For each\
            \ time range for which the platform finds spoken words, it returns an\
            \ object that contains the fields below. If the platform doesn't find\
            \ any spoken words, the `data` field is set to `null`. Note that the official\
            \ SDKs will support this feature in a future release."
          example:
          - start: 10.5
            end: 15.2
            value: "Hello, how are you?"
          items:
            $ref: "#/components/schemas/TranscriptionData_inner"
          type: array
    inline_object_5_page_info:
      description: |
        An object that provides information about pagination.
      example:
        limit_per_page: 10
        page: 1
        total_page: 1
        total_results: 2
      properties:
        limit_per_page:
          description: The maximum number of items on each page.
          example: 10
          type: integer
        page:
          description: The page you retrieved.
          example: 1
          type: integer
        total_page:
          description: The total number of pages.
          example: 10
          type: integer
        total_results:
          description: The total number of results.
          example: 10
          type: integer
    inline_object_5:
      example:
        data:
        - _id: 62a17bf847f5678267ec10cc
          created_at: 2022-06-09T04:50:00.879Z
          index_id: 62a0906d47f5678267ec10a6
          metadata:
            duration: 531.998133
            filename: 01.mp4
            height: 400
            width: 854
        page_info:
          limit_per_page: 10
          page: 1
          total_page: 1
          total_results: 2
      properties:
        data:
          description: An array that contains up to `page_limit` tasks.
          example:
          - _id: 62a17bf847f5678267ec10cc
            created_at: 2022-06-09T04:50:00.879Z
            index_id: 62a0906d47f5678267ec10a6
            metadata:
              duration: 531.998133
              filename: 01.mp4
              height: 400
              width: 854
          items:
            $ref: "#/components/schemas/videoIndexingTask"
          type: array
        page_info:
          $ref: "#/components/schemas/inline_object_5_page_info"
    inline_object_6:
      allOf:
      - $ref: "#/components/schemas/videoIndexingTask"
      - example:
          hls:
            video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
            thumbnail_urls:
            - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
            status: COMPLETE
            updated_at: 2024-01-16T07:59:40.879Z
        properties:
          hls:
            $ref: "#/components/schemas/HLSObject"
      example:
        updated_at: 2024-03-01T00:00:00Z
        created_at: 2024-03-01T00:00:00Z
        _id: 663da73b31cdd0c1f638a8e6
        index_id: 663da73b31cdd0c1f638a8e6
        system_metadata:
          duration: 531.998133
          filename: 01.mp4
          height: 480
          width: 854
        hls:
          video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
          thumbnail_urls:
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000002.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000003.jpg
          status: COMPLETE
          updated_at: 2024-01-09T11:17:15.296Z
        video_id: 62a1ec6d9ea24f052b971a0f
        status: ready
    inline_object_7:
      example:
        data:
        - _id: 62d85fe7340fa665f1fda5dd
          index_name: index-01
          created_at: 2024-01-09T11:11:20.463Z
          updated_at: 2024-01-09T11:17:15.296Z
          expires_at: 2024-04-08T11:11:20.463Z
          video_count: 2
          total_duration: 1363.76
          models:
          - model_name: marengo2.7
            model_options:
            - visual
            - audio
            addons:
            - thumbnail
          - model_name: pegasus1.2
            model_options:
            - visual
            - audio
        - _id: 62d858ee340fa665f1fda5d8
          index_name: index-02
          created_at: 2024-01-09T11:11:20.463Z
          updated_at: 2024-01-09T11:17:15.296Z
          expires_at: 2024-04-08T11:11:20.463Z
          video_count: 1
          total_duration: 579.12
          models:
          - model_name: marengo2.7
            model_options:
            - visual
            addons:
            - thumbnail
          - model_name: pegasus1.2
            model_options:
            - visual
            - audio
        page_info:
          limit_per_page: 10
          page: 1
          total_page: 1
          total_results: 2
      properties:
        data:
          description: An array that contains up to `page_limit` indexes.
          example:
          - _id: 62d85fe7340fa665f1fda5dd
            index_name: index-01
            created_at: 2024-01-09T11:11:20.463Z
            updated_at: 2024-01-09T11:17:15.296Z
            expires_at: 2024-04-08T11:11:20.463Z
            video_count: 2
            total_duration: 1363.76
            models:
            - model_name: marengo2.7
              model_options:
              - visual
              - audio
          items:
            $ref: "#/components/schemas/Index"
          type: array
        page_info:
          $ref: "#/components/schemas/page_info"
    inline_object_8:
      example:
        _id: 62a1ec6d9ea24f052b971a0f
        video_id: 62a1ec6d9ea24f052b971a0f
      properties:
        _id:
          description: A string representing the unique identifier of your video indexing
            task.
          example: 62a1ec6d9ea24f052b971a0f
          type: string
        video_id:
          description: A string representing the unique identifier of the video associated
            with the specified video indexing task.
          example: 62a1ec6d9ea24f052b971a0f
          type: string
    inline_object_9:
      example:
        _id: 62d85fe7340fa665f1fda5dd
      properties:
        _id:
          description: Represents the unique identifier of the `index` object.
          example: 62d85fe7340fa665f1fda5dd
          type: string
    inline_object_10:
      example:
        error_code: 104
        message: The audio option of transcription is not allowed with multiple search
          options. You should use semantic instead.
      properties:
        error_code:
          description: |
            Represents the code associated with the error. See the [Error codes](/v1.3/api-reference/error-codes) page for details.
          example: 104
          type: integer
        message:
          description: A human-readable string describing the error.
          example: The audio option of transcription is not allowed with multiple
            search options. You should use semantic instead.
          type: string
    inline_object_11:
      example:
        docs_url: https://docs.twelvelabs.io/v1.3/api-reference/error-codes
        code: insufficient_funds
        message: Not enough free credit. Please register a payment method or contact
          sales@twelvelabs.io.
      properties:
        code:
          description: |
            A string representing the code associated with the error. See the [Error codes](/v1.3/api-reference/error-codes) page for details.
          example: insufficient_funds
          type: string
        message:
          description: |
            A human-readable string describing the error, intended to be suitable for display in a user interface.
          example: Not enough free credit. Please register a payment method or contact
            sales@twelvelabs.io.
          type: string
        docs_url:
          description: |
            The URL of the relevant documentation page.
          example: https://docs.twelvelabs.io/v1.3/api-reference/error-codes
          type: string
    inline_object_12:
      properties:
        code:
          description: |
            A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
          example: unauthorized_request
          type: string
        message:
          description: |
            A human-readable string describing the error, intended to be suitable for display in a user interface.
          example: You are not authorized to access this resource.
          type: string
        docs_url:
          description: |
            The URL of the relevant documentation page.
          example: https://docs.twelvelabs.io/reference/error-codes
          type: string
    inline_object_13:
      example:
        code: generic_error
        message: An error occurred.
        docs_url: https://docs.twelvelabs.io/api-reference/error-codes
      properties:
        code:
          description: |
            A string representing the code associated with the error. See the [Error codes](/v1.3/api-reference/error-codes) page for details.
          example: generic_error
          type: string
        message:
          description: |
            A human-readable string describing the error, intended to be suitable for display in a user interface.
          example: An error occurred.
          type: string
        docs_url:
          description: |
            The URL of the relevant documentation page.
          example: https://docs.twelvelabs.io/api-reference/error-codes
          type: string
    inline_object_14:
      example:
        code: not_found
        message: The specified resource does not exist.
      properties:
        code:
          description: |
            Represents the code associated with the error. See the [Error codes](/v1.3/api-reference/error-codes) page for details.
          example: not_found
          type: string
        message:
          description: A human-readable string describing the error.
          example: The specified resource does not exist.
          type: string
    inline_object_15_allOf_video_embedding:
      example:
        metadata:
          input_filename: 01.mp4
          video_clip_length: 6
          video_embedding_scope:
          - clip
          - video
          duration: 18
        segments:
        - start_offset_sec: 0
          end_offset_sec: 6
          embedding_scope: clip
          embedding_option: visual-text
          float:
          - -0.060086973
          - 0.016479108
      properties:
        metadata:
          $ref: "#/components/schemas/VideoEmbeddingMetadata"
        segments:
          description: |
            An array of objects containing the embeddings for each video segment and the associated information.
          example:
          - start_offset_sec: 0
            end_offset_sec: 6
            embedding_scope: clip
            embedding_option: visual-text
            float:
            - -0.060086973
            - 0.016479108
          items:
            $ref: "#/components/schemas/VideoSegment"
          type: array
    inline_object_15:
      allOf:
      - $ref: "#/components/schemas/VideoEmbeddingTask"
      - example:
          _id: 663e16ac4d11aff765088b3a
          model_name: Marengo-retrieval-2.7
          status: ready
          created_at: 2024-03-01T00:00:00Z
          video_embedding:
            segments:
            - start_offset_sec: 0
              end_offset_sec: 6
              embedding_scope: clip
              embedding_option: visual-text
              float:
              - -0.060086973
              - 0.016479108
            - start_offset_sec: 6
              end_offset_sec: 12
              embedding_scope: clip
              embedding_option: visual-text
              float:
              - -0.056660935
              - 0.012404642
            - start_offset_sec: 12
              end_offset_sec: 18
              embedding_scope: clip
              embedding_option: visual-text
              float:
              - -0.05971131
              - -0.00859428
            - start_offset_sec: 0
              end_offset_sec: 18
              embedding_scope: video
              embedding_option: visual-text
              float:
              - -0.05971131
              - -0.00859428
            metadata:
              input_filename: 01.mp4
              video_clip_length: 6
              video_embedding_scope:
              - clip
              - video
              duration: 18
        properties:
          video_embedding:
            $ref: "#/components/schemas/inline_object_15_allOf_video_embedding"
      example:
        model_name: Marengo-retrieval-2.7
        video_embedding:
          metadata:
            input_filename: 01.mp4
            video_clip_length: 6
            video_embedding_scope:
            - clip
            - video
            duration: 18
          segments:
          - start_offset_sec: 0
            end_offset_sec: 6
            embedding_scope: clip
            embedding_option: visual-text
            float:
            - -0.060086973
            - 0.016479108
        created_at: 2024-03-01T00:00:00Z
        _id: 663da73b31cdd0c1f638a8e6
        status: processing
    inline_object_16_page_info:
      description: |
        An object that provides information about pagination.
      example:
        limit_per_page: 10
        page: 1
        total_page: 1
        total_results: 3
      properties:
        limit_per_page:
          description: The maximum number of items on each page.
          example: 10
          type: integer
        page:
          description: The page you retrieved.
          example: 1
          type: integer
        total_page:
          description: The total number of pages.
          example: 10
          type: integer
        total_results:
          description: The total number of results.
          example: 10
          type: integer
    inline_object_16:
      example:
        data:
        - _id: 66f537778d9641fe5a0d101f
          model_name: Marengo-retrieval-2.7
          status: processing
          created_at: 2024-09-26T10:29:19.968Z
          video_embedding:
            metadata:
              input_filename: 01.mp4
              video_clip_length: 6
              video_embedding_scope:
              - clip
              duration: 13.4400001
            segments:
            - start_offset_sec: 0
              end_offset_sec: 6
              embedding_scope: clip
              float:
              - -0.060086973
              - 0.016479108
        page_info:
          limit_per_page: 10
          page: 1
          total_page: 1
          total_results: 3
      properties:
        data:
          description: |
            An array that contains up to `page_limit` video embedding tasks.
          example:
          - _id: 66f537778d9641fe5a0d101f
            model_name: Marengo-retrieval-2.7
            status: processing
            created_at: 2024-09-26T10:29:19.968Z
            video_embedding:
              metadata:
                input_filename: 01.mp4
                video_clip_length: 6
                video_embedding_scope:
                - clip
                duration: 13.4400001
              segments:
              - start_offset_sec: 0
                end_offset_sec: 6
                embedding_scope: clip
                float:
                - -0.060086973
                - 0.016479108
          items:
            $ref: "#/components/schemas/VideoEmbeddingTask"
          type: array
        page_info:
          $ref: "#/components/schemas/inline_object_16_page_info"
    inline_object_17:
      example:
        model_name: Marengo-retrieval-2.7
        video_embedding:
          metadata:
            input_filename: /Users/myuser/myvideo.mp4
            input_url: https://myvideo.com/myvideo.mp4
            video_clip_length: 6
            video_embedding_scope:
            - clip
            duration: 10
        _id: 6641c0efc70bb578439bd909
        status: processing
      properties:
        _id:
          description: |
            The unique identifier of the video embedding task.
          example: 6641c0efc70bb578439bd909
          type: string
        status:
          description: |
            A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
          example: processing
          type: string
        model_name:
          description: |
            The name of the video understanding model the platform used to create the embedding.
          example: Marengo-retrieval-2.7
          type: string
        video_embedding:
          $ref: "#/components/schemas/VideoEmbeddingTask_video_embedding"
    inline_object_18:
      example:
        _id: 66419a20c70bb578439bd8f4
      properties:
        _id:
          description: |
            The unique identifier of the video embedding task. You can use the identifier to:
            - Retrieve the status of your task by invoking the [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embedding-task-status) method of the `/embed/tasks/{task_id}/status` endpoint.
            - Retrieve the embedding by invoking the  [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embeddings) method of the `/embed/tasks/{task_id}` endpoint.
          example: 66419a20c70bb578439bd8f4
          type: string
    Summary:
      description: |
        When the value of the `type` parameter is set to `summary`, the response is as follows:
      example:
        id: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
        summary: "Black Friday shoppers are shown in a mall, pushing and shoving through\
          \ the crowds. A news reporter talks about shopping mania and its impact\
          \ on stores. He mentions that stores are filled to the brim and that the\
          \ hunt for deals can make people miserable. A woman talks to the camera\
          \ about how people have lost their minds and how the American dream has\
          \ become associated with material possessions."
        usage:
          output_tokens: 100
      properties:
        id:
          description: |
            Unique identifier of the response.
          example: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
          type: string
        summary:
          description: |
            A brief report of the main points of the video.
          example: |
            Black Friday shoppers are shown in a mall, pushing and shoving through the crowds. A news reporter talks about shopping mania and its impact on stores. He mentions that stores are filled to the brim and that the hunt for deals can make people miserable. A woman talks to the camera about how people have lost their minds and how the American dream has become associated with material possessions.
          type: string
        usage:
          $ref: "#/components/schemas/TokenUsage"
      title: Summary
    Chapter_chapters_inner:
      description: |
        An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary.
      example:
        chapter_number: 0
        start: 15
        end: 30
        chapter_title: Graduation and Moving Home
        chapter_summary: The woman talks about her recent graduation and moving back
          home.
      properties:
        chapter_number:
          description: |
            Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application.
          example: 0
          type: integer
        start:
          description: |
            The starting time of the chapter, measured in seconds from the beginning of the video.
          example: 0
          type: integer
        end:
          description: |
            The ending time of the chapter, measured in seconds from the beginning of the video.
          example: 30
          type: integer
        chapter_title:
          description: |
            The title of the chapter.
          example: Graduation and Moving Home
          type: string
        chapter_summary:
          description: |
            A brief summary describing the content of the chapter.
          example: The woman talks about her recent graduation and moving back home.
          type: string
    Chapter:
      description: |
        When the value of the `type` parameter is set to `chapter`, the response is as follows:
      example:
        id: 663da73b31cdd0c1f638a8e6
        chapters:
        - chapter_number: 0
          start: 15
          end: 30
          chapter_title: Graduation and Moving Home
          chapter_summary: The woman talks about her recent graduation and moving
            back home.
        usage:
          output_tokens: 100
      properties:
        id:
          description: |
            Unique identifier of the response.
          example: da3cdd02-dff8-4712-a2a9-9b44f342c039
          type: string
        chapters:
          description: |
            An array that contains details about the detected chapters and their content.
          example:
          - chapter_number: 0
            start: 15
            end: 30
            chapter_title: Graduation and Moving Home
            chapter_summary: The woman talks about her recent graduation and moving
              back home.
          - chapter_number: 1
            start: 30
            end: 45
            chapter_title: Outdoor Adventures
            chapter_summary: The woman discusses spending time outdoors and getting
              a tan.
          - chapter_number: 2
            start: 45
            end: 60
            chapter_title: Shopping Hauls
            chapter_summary: The woman talks about her recent shopping spree and purchases.
          items:
            $ref: "#/components/schemas/Chapter_chapters_inner"
          type: array
        usage:
          $ref: "#/components/schemas/TokenUsage"
      title: Chapter
    Highlight_highlights_inner:
      description: |
        An object that provides a brief snapshot of a specific part of the video.
      example:
        start: 0
        end: 30
        highlight: "A woman vlogs about her summer day, sharing her experience"
        highlight_summary: "The woman talks about her love for getting some sun, despite\
          \ not tanning well, and shows the camera around her house, mentioning her\
          \ fake tanner."
      properties:
        start:
          description: |
            The starting time of the highlight, measured in seconds from the beginning of the video.
          example: 0
          type: integer
        end:
          description: |
            The ending time of the highlight, measured in seconds from the beginning of the video.
          example: 30
          type: integer
        highlight:
          description: |
            The tile of the highlight.
          example: "A woman vlogs about her summer day, sharing her experience"
          type: string
        highlight_summary:
          description: |
            A brief description that captures the essence of this part of the video.
          example: "The woman talks about her love for getting some sun, despite not\
            \ tanning well, and shows the camera around her house, mentioning her\
            \ fake tanner."
          type: string
    Highlight:
      description: |
        When the value of the `type` parameter is set to `highlight`, the response is as follows:
      example:
        id: 663da73b31cdd0c1f638a8e6
        highlights:
        - start: 0
          end: 30
          highlight: "A woman vlogs about her summer day, sharing her experience"
          highlight_summary: "The woman talks about her love for getting some sun,\
            \ despite not tanning well, and shows the camera around her house, mentioning\
            \ her fake tanner."
        usage:
          output_tokens: 100
      properties:
        id:
          description: |
            Unique identifier of the response.
          example: 2f2a504f-6956-446c-84d8-29d86f793c66
          type: string
        highlights:
          description: |
            An array that contains the highlights.
          example:
          - start: 0
            end: 30
            highlight: "A woman vlogs about her summer day, sharing her experience"
            highlight_summary: "The woman talks about her love for getting some sun,\
              \ despite not tanning well, and shows the camera around her house, mentioning\
              \ her fake tanner."
          - start: 30
            end: 60
            highlight: A woman is making a video of her food preparation and tasting.
            highlight_summary: A woman demonstrates how to make a delicious bread
              salad with tomatoes and cheese while explaining the process.
          items:
            $ref: "#/components/schemas/Highlight_highlights_inner"
          type: array
        usage:
          $ref: "#/components/schemas/TokenUsage"
      title: Highlight
    inline_object_19:
      oneOf:
      - $ref: "#/components/schemas/Summary"
      - $ref: "#/components/schemas/Chapter"
      - $ref: "#/components/schemas/Highlight"
    Gist:
      description: |
        Generated title, topics, and hashtags for the specified video.
      example:
        id: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
        title: "From Consumerism to Minimalism: A Journey Toward Sustainable Living"
        topics:
        - Shopping Vlog Lifestyle
        - Minimalism Lifestyle
        - Sustainable Living
        hashtags:
        - "#BlackFriday"
        - "#Vlog"
        usage:
          output_tokens: 100
      properties:
        id:
          description: |
            Unique identifier of the response.
          example: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
          type: string
        title:
          description: |
            Suggested title for the video.
          example: |
            From Consumerism to Minimalism: A Journey Toward Sustainable Living
          type: string
        topics:
          description: |
            An array of topics that are relevant to the video.
          example:
          - Shopping Vlog Lifestyle
          - Minimalism Lifestyle
          - Sustainable Living
          items:
            example: Shopping Vlog Lifestyle
            type: string
          type: array
        hashtags:
          description: |
            An array of hashtags that are relevant to the video.
          example:
          - "#BlackFriday"
          - "#Vlog"
          items:
            example: "#BlackFriday"
            type: string
          type: array
        usage:
          $ref: "#/components/schemas/TokenUsage"
      title: Gist
    inline_object_20_failed_files_inner:
      example:
        filename: 1.mp4
        error_message: The video is too big. Please use a video with a size less than
          %s. The current size is %s.
      properties:
        filename:
          description: The filename of the video that failed to be imported.
          example: 1.mp4
          type: string
        error_message:
          description: The error message if the import failed.
          example: The video is too big. Please use a video with a size less than
            %s. The current size is %s.
          type: string
    inline_object_20_videos_inner:
      example:
        video_id: 66fcee250f9f7bcce21915a2
        filename: 1.mp4
      properties:
        video_id:
          description: |
            The unique identifier of a video. This identifier serves a dual purpose:
            - It identifies the video itself.
            - It identifies the associated video indexing task.

            For example, due to this dual functionality, you can use this identifier to:
            - Retrieve details about the video itself by invoking the [`GET`](/v1.3/api-reference/videos/retrieve) method of the `/indexes/{index-id}/videos/{video-id}` endpoint.
            - Retrieve the status of the video indexing task by invoking the [`GET`](/v1.3/api-reference/tasks/retrieve) method of the `/tasks/{task_id}` endpoint.
          example: 66fcee250f9f7bcce21915a2
          type: string
        filename:
          description: The filename of the video.
          example: 1.mp4
          type: string
    inline_object_20:
      example:
        videos:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
        failed_files:
        - filename: 1.mp4
          error_message: The video is too big. Please use a video with a size less
            than %s. The current size is %s.
      properties:
        failed_files:
          description: "A list of the video files that failed to import. Typically,\
            \ these files did not meet the upload requirements. To resolve this, review\
            \ the requirements listed in the [Prerequisites](/v1.3/docs/guides/search#prerequisites)\
            \ section of the **Search** page."
          example:
          - filename: 1.mp4
            error_message: The video is too big. Please use a video with a size less
              than %s. The current size is %s.
          items:
            $ref: "#/components/schemas/inline_object_20_failed_files_inner"
          type: array
        videos:
          description: A list of the videos that will be uploaded and indexed.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
          items:
            $ref: "#/components/schemas/inline_object_20_videos_inner"
          type: array
    inline_object_21:
      example:
        validating:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
        indexing:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
        ready:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
        pending:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
        queued:
        - video_id: 66fcee250f9f7bcce21915a2
          filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
        failed:
        - filename: 1.mp4
          created_at: 2024-09-24T13:22:00Z
          error_message: The video is too big. Please use a video with a size less
            than %s. The current size is %s.
        not_imported:
        - NEW_VIDEO_1.mp4
        - NEW_VIDEO_2.mp4
      properties:
        not_imported:
          description: An array of filenames that haven't yet been imported.
          example:
          - NEW_VIDEO_1.mp4
          - NEW_VIDEO_2.mp4
          items:
            example: NEW_VIDEO_1.mp4
            type: string
          type: array
        validating:
          description: An array of videos that are being validated.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
          items:
            $ref: "#/components/schemas/VideoItem"
          type: array
        pending:
          description: An array of videos that are pending.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
          items:
            $ref: "#/components/schemas/VideoItem"
          type: array
        queued:
          description: An array of videos that are queued for import.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
          items:
            $ref: "#/components/schemas/VideoItem"
          type: array
        indexing:
          description: An array of videos that are being indexed.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
          items:
            $ref: "#/components/schemas/VideoItem"
          type: array
        ready:
          description: An array of videos that have successfully been imported.
          example:
          - video_id: 66fcee250f9f7bcce21915a2
            filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
          items:
            $ref: "#/components/schemas/VideoItem"
          type: array
        failed:
          description: An array of videos that failed to import.
          example:
          - filename: 1.mp4
            created_at: 2024-09-24T13:22:00Z
            error_message: The video is too big. Please use a video with a size less
              than %s. The current size is %s.
          items:
            $ref: "#/components/schemas/VideoItemFailed"
          type: array
