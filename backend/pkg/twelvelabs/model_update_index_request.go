/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateIndexRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIndexRequest{}

// UpdateIndexRequest struct for UpdateIndexRequest
type UpdateIndexRequest struct {
	// The name of the index. 
	IndexName string `json:"index_name"`
}

type _UpdateIndexRequest UpdateIndexRequest

// NewUpdateIndexRequest instantiates a new UpdateIndexRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIndexRequest(indexName string) *UpdateIndexRequest {
	this := UpdateIndexRequest{}
	this.IndexName = indexName
	return &this
}

// NewUpdateIndexRequestWithDefaults instantiates a new UpdateIndexRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIndexRequestWithDefaults() *UpdateIndexRequest {
	this := UpdateIndexRequest{}
	return &this
}

// GetIndexName returns the IndexName field value
func (o *UpdateIndexRequest) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *UpdateIndexRequest) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *UpdateIndexRequest) SetIndexName(v string) {
	o.IndexName = v
}

func (o UpdateIndexRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIndexRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index_name"] = o.IndexName
	return toSerialize, nil
}

func (o *UpdateIndexRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateIndexRequest := _UpdateIndexRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateIndexRequest)

	if err != nil {
		return err
	}

	*o = UpdateIndexRequest(varUpdateIndexRequest)

	return err
}

type NullableUpdateIndexRequest struct {
	value *UpdateIndexRequest
	isSet bool
}

func (v NullableUpdateIndexRequest) Get() *UpdateIndexRequest {
	return v.value
}

func (v *NullableUpdateIndexRequest) Set(val *UpdateIndexRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIndexRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIndexRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIndexRequest(val *UpdateIndexRequest) *NullableUpdateIndexRequest {
	return &NullableUpdateIndexRequest{value: val, isSet: true}
}

func (v NullableUpdateIndexRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIndexRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


