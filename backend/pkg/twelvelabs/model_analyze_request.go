/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyzeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeRequest{}

// AnalyzeRequest struct for AnalyzeRequest
type AnalyzeRequest struct {
	// The unique identifier of the video for which you wish to generate a text.
	VideoId string `json:"video_id"`
	// A prompt that guides the model on the desired format or content.  <Note title=\"Notes\"> - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt. - Your prompts can be instructive or descriptive, or you can also phrase them as questions. - The maximum length of a prompt is 2,000 tokens. </Note>  **Examples**:  - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization). - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks. 
	Prompt string `json:"prompt"`
	// Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.  **Default:** 0.2 **Min:** 0 **Max:** 1 
	Temperature *float32 `json:"temperature,omitempty"`
	// Set this parameter to `true` to enable streaming responses in the <a href=\"https://github.com/ndjson/ndjson-spec\" target=\"_blank\">NDJSON</a> format.  **Default:** `true` 
	Stream *bool `json:"stream,omitempty"`
}

type _AnalyzeRequest AnalyzeRequest

// NewAnalyzeRequest instantiates a new AnalyzeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeRequest(videoId string, prompt string) *AnalyzeRequest {
	this := AnalyzeRequest{}
	this.VideoId = videoId
	this.Prompt = prompt
	var temperature float32 = 0.2
	this.Temperature = &temperature
	var stream bool = true
	this.Stream = &stream
	return &this
}

// NewAnalyzeRequestWithDefaults instantiates a new AnalyzeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeRequestWithDefaults() *AnalyzeRequest {
	this := AnalyzeRequest{}
	var temperature float32 = 0.2
	this.Temperature = &temperature
	var stream bool = true
	this.Stream = &stream
	return &this
}

// GetVideoId returns the VideoId field value
func (o *AnalyzeRequest) GetVideoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRequest) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoId, true
}

// SetVideoId sets field value
func (o *AnalyzeRequest) SetVideoId(v string) {
	o.VideoId = v
}

// GetPrompt returns the Prompt field value
func (o *AnalyzeRequest) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRequest) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *AnalyzeRequest) SetPrompt(v string) {
	o.Prompt = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *AnalyzeRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *AnalyzeRequest) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *AnalyzeRequest) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *AnalyzeRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *AnalyzeRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *AnalyzeRequest) SetStream(v bool) {
	o.Stream = &v
}

func (o AnalyzeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_id"] = o.VideoId
	toSerialize["prompt"] = o.Prompt
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	return toSerialize, nil
}

func (o *AnalyzeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video_id",
		"prompt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzeRequest := _AnalyzeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzeRequest)

	if err != nil {
		return err
	}

	*o = AnalyzeRequest(varAnalyzeRequest)

	return err
}

type NullableAnalyzeRequest struct {
	value *AnalyzeRequest
	isSet bool
}

func (v NullableAnalyzeRequest) Get() *AnalyzeRequest {
	return v.value
}

func (v *NullableAnalyzeRequest) Set(val *AnalyzeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeRequest(val *AnalyzeRequest) *NullableAnalyzeRequest {
	return &NullableAnalyzeRequest{value: val, isSet: true}
}

func (v NullableAnalyzeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


