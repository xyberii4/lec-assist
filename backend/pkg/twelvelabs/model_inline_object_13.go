/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject13 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject13{}

// InlineObject13 struct for InlineObject13
type InlineObject13 struct {
	// A string representing the code associated with the error. See the [Error codes](/v1.3/api-reference/error-codes) page for details. 
	Code *string `json:"code,omitempty"`
	// A human-readable string describing the error, intended to be suitable for display in a user interface. 
	Message *string `json:"message,omitempty"`
	// The URL of the relevant documentation page. 
	DocsUrl *string `json:"docs_url,omitempty"`
}

// NewInlineObject13 instantiates a new InlineObject13 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject13() *InlineObject13 {
	this := InlineObject13{}
	return &this
}

// NewInlineObject13WithDefaults instantiates a new InlineObject13 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject13WithDefaults() *InlineObject13 {
	this := InlineObject13{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InlineObject13) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject13) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InlineObject13) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InlineObject13) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *InlineObject13) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject13) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *InlineObject13) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *InlineObject13) SetMessage(v string) {
	o.Message = &v
}

// GetDocsUrl returns the DocsUrl field value if set, zero value otherwise.
func (o *InlineObject13) GetDocsUrl() string {
	if o == nil || IsNil(o.DocsUrl) {
		var ret string
		return ret
	}
	return *o.DocsUrl
}

// GetDocsUrlOk returns a tuple with the DocsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject13) GetDocsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DocsUrl) {
		return nil, false
	}
	return o.DocsUrl, true
}

// HasDocsUrl returns a boolean if a field has been set.
func (o *InlineObject13) HasDocsUrl() bool {
	if o != nil && !IsNil(o.DocsUrl) {
		return true
	}

	return false
}

// SetDocsUrl gets a reference to the given string and assigns it to the DocsUrl field.
func (o *InlineObject13) SetDocsUrl(v string) {
	o.DocsUrl = &v
}

func (o InlineObject13) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject13) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.DocsUrl) {
		toSerialize["docs_url"] = o.DocsUrl
	}
	return toSerialize, nil
}

type NullableInlineObject13 struct {
	value *InlineObject13
	isSet bool
}

func (v NullableInlineObject13) Get() *InlineObject13 {
	return v.value
}

func (v *NullableInlineObject13) Set(val *InlineObject13) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject13) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject13) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject13(val *InlineObject13) *NullableInlineObject13 {
	return &NullableInlineObject13{value: val, isSet: true}
}

func (v NullableInlineObject13) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject13) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


