/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the StreamEndResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamEndResponse{}

// StreamEndResponse Indicates the end of the stream. 
type StreamEndResponse struct {
	// This field is always set to `stream_end` for this event. 
	EventType *string `json:"event_type,omitempty"`
	Metadata *StreamEndResponseMetadata `json:"metadata,omitempty"`
}

// NewStreamEndResponse instantiates a new StreamEndResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamEndResponse() *StreamEndResponse {
	this := StreamEndResponse{}
	return &this
}

// NewStreamEndResponseWithDefaults instantiates a new StreamEndResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamEndResponseWithDefaults() *StreamEndResponse {
	this := StreamEndResponse{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *StreamEndResponse) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamEndResponse) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *StreamEndResponse) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *StreamEndResponse) SetEventType(v string) {
	o.EventType = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *StreamEndResponse) GetMetadata() StreamEndResponseMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret StreamEndResponseMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamEndResponse) GetMetadataOk() (*StreamEndResponseMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *StreamEndResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given StreamEndResponseMetadata and assigns it to the Metadata field.
func (o *StreamEndResponse) SetMetadata(v StreamEndResponseMetadata) {
	o.Metadata = &v
}

func (o StreamEndResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamEndResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableStreamEndResponse struct {
	value *StreamEndResponse
	isSet bool
}

func (v NullableStreamEndResponse) Get() *StreamEndResponse {
	return v.value
}

func (v *NullableStreamEndResponse) Set(val *StreamEndResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamEndResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamEndResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamEndResponse(val *StreamEndResponse) *NullableStreamEndResponse {
	return &NullableStreamEndResponse{value: val, isSet: true}
}

func (v NullableStreamEndResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamEndResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


