/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject4Embedding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject4Embedding{}

// InlineObject4Embedding Contains the embedding and the associated information. The platform returns this field when the `embedding_option` parameter is specified in the request.
type InlineObject4Embedding struct {
	// The name of the video understanding model used to create the embedding.
	ModelName *string `json:"model_name,omitempty"`
	VideoEmbedding *InlineObject4EmbeddingVideoEmbedding `json:"video_embedding,omitempty"`
}

// NewInlineObject4Embedding instantiates a new InlineObject4Embedding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject4Embedding() *InlineObject4Embedding {
	this := InlineObject4Embedding{}
	return &this
}

// NewInlineObject4EmbeddingWithDefaults instantiates a new InlineObject4Embedding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject4EmbeddingWithDefaults() *InlineObject4Embedding {
	this := InlineObject4Embedding{}
	return &this
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *InlineObject4Embedding) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4Embedding) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *InlineObject4Embedding) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *InlineObject4Embedding) SetModelName(v string) {
	o.ModelName = &v
}

// GetVideoEmbedding returns the VideoEmbedding field value if set, zero value otherwise.
func (o *InlineObject4Embedding) GetVideoEmbedding() InlineObject4EmbeddingVideoEmbedding {
	if o == nil || IsNil(o.VideoEmbedding) {
		var ret InlineObject4EmbeddingVideoEmbedding
		return ret
	}
	return *o.VideoEmbedding
}

// GetVideoEmbeddingOk returns a tuple with the VideoEmbedding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4Embedding) GetVideoEmbeddingOk() (*InlineObject4EmbeddingVideoEmbedding, bool) {
	if o == nil || IsNil(o.VideoEmbedding) {
		return nil, false
	}
	return o.VideoEmbedding, true
}

// HasVideoEmbedding returns a boolean if a field has been set.
func (o *InlineObject4Embedding) HasVideoEmbedding() bool {
	if o != nil && !IsNil(o.VideoEmbedding) {
		return true
	}

	return false
}

// SetVideoEmbedding gets a reference to the given InlineObject4EmbeddingVideoEmbedding and assigns it to the VideoEmbedding field.
func (o *InlineObject4Embedding) SetVideoEmbedding(v InlineObject4EmbeddingVideoEmbedding) {
	o.VideoEmbedding = &v
}

func (o InlineObject4Embedding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject4Embedding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.VideoEmbedding) {
		toSerialize["video_embedding"] = o.VideoEmbedding
	}
	return toSerialize, nil
}

type NullableInlineObject4Embedding struct {
	value *InlineObject4Embedding
	isSet bool
}

func (v NullableInlineObject4Embedding) Get() *InlineObject4Embedding {
	return v.value
}

func (v *NullableInlineObject4Embedding) Set(val *InlineObject4Embedding) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject4Embedding) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject4Embedding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject4Embedding(val *InlineObject4Embedding) *NullableInlineObject4Embedding {
	return &NullableInlineObject4Embedding{value: val, isSet: true}
}

func (v NullableInlineObject4Embedding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject4Embedding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


