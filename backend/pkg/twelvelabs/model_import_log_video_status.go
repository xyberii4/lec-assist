/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportLogVideoStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportLogVideoStatus{}

// ImportLogVideoStatus Counts of files in different statuses. See the [Task object](/v1.3/api-reference/tasks/the-task-object) page for details on each status.
type ImportLogVideoStatus struct {
	Ready int32 `json:"ready"`
	Validating int32 `json:"validating"`
	Queued int32 `json:"queued"`
	Pending int32 `json:"pending"`
	Indexing int32 `json:"indexing"`
	Failed int32 `json:"failed"`
}

type _ImportLogVideoStatus ImportLogVideoStatus

// NewImportLogVideoStatus instantiates a new ImportLogVideoStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportLogVideoStatus(ready int32, validating int32, queued int32, pending int32, indexing int32, failed int32) *ImportLogVideoStatus {
	this := ImportLogVideoStatus{}
	this.Ready = ready
	this.Validating = validating
	this.Queued = queued
	this.Pending = pending
	this.Indexing = indexing
	this.Failed = failed
	return &this
}

// NewImportLogVideoStatusWithDefaults instantiates a new ImportLogVideoStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportLogVideoStatusWithDefaults() *ImportLogVideoStatus {
	this := ImportLogVideoStatus{}
	return &this
}

// GetReady returns the Ready field value
func (o *ImportLogVideoStatus) GetReady() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ready
}

// GetReadyOk returns a tuple with the Ready field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetReadyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ready, true
}

// SetReady sets field value
func (o *ImportLogVideoStatus) SetReady(v int32) {
	o.Ready = v
}

// GetValidating returns the Validating field value
func (o *ImportLogVideoStatus) GetValidating() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Validating
}

// GetValidatingOk returns a tuple with the Validating field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetValidatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validating, true
}

// SetValidating sets field value
func (o *ImportLogVideoStatus) SetValidating(v int32) {
	o.Validating = v
}

// GetQueued returns the Queued field value
func (o *ImportLogVideoStatus) GetQueued() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetQueuedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Queued, true
}

// SetQueued sets field value
func (o *ImportLogVideoStatus) SetQueued(v int32) {
	o.Queued = v
}

// GetPending returns the Pending field value
func (o *ImportLogVideoStatus) GetPending() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetPendingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *ImportLogVideoStatus) SetPending(v int32) {
	o.Pending = v
}

// GetIndexing returns the Indexing field value
func (o *ImportLogVideoStatus) GetIndexing() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Indexing
}

// GetIndexingOk returns a tuple with the Indexing field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetIndexingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indexing, true
}

// SetIndexing sets field value
func (o *ImportLogVideoStatus) SetIndexing(v int32) {
	o.Indexing = v
}

// GetFailed returns the Failed field value
func (o *ImportLogVideoStatus) GetFailed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *ImportLogVideoStatus) GetFailedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *ImportLogVideoStatus) SetFailed(v int32) {
	o.Failed = v
}

func (o ImportLogVideoStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportLogVideoStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ready"] = o.Ready
	toSerialize["validating"] = o.Validating
	toSerialize["queued"] = o.Queued
	toSerialize["pending"] = o.Pending
	toSerialize["indexing"] = o.Indexing
	toSerialize["failed"] = o.Failed
	return toSerialize, nil
}

func (o *ImportLogVideoStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ready",
		"validating",
		"queued",
		"pending",
		"indexing",
		"failed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportLogVideoStatus := _ImportLogVideoStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportLogVideoStatus)

	if err != nil {
		return err
	}

	*o = ImportLogVideoStatus(varImportLogVideoStatus)

	return err
}

type NullableImportLogVideoStatus struct {
	value *ImportLogVideoStatus
	isSet bool
}

func (v NullableImportLogVideoStatus) Get() *ImportLogVideoStatus {
	return v.value
}

func (v *NullableImportLogVideoStatus) Set(val *ImportLogVideoStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImportLogVideoStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImportLogVideoStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportLogVideoStatus(val *ImportLogVideoStatus) *NullableImportLogVideoStatus {
	return &NullableImportLogVideoStatus{value: val, isSet: true}
}

func (v NullableImportLogVideoStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportLogVideoStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


