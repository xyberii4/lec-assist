/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VideoItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoItem{}

// VideoItem An object that contains information about a video file. 
type VideoItem struct {
	// The unique identifier of the video.
	VideoId string `json:"video_id"`
	// The name of the video file.
	Filename string `json:"filename"`
	// The date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the video was added to the import process.
	CreatedAt time.Time `json:"created_at"`
}

type _VideoItem VideoItem

// NewVideoItem instantiates a new VideoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoItem(videoId string, filename string, createdAt time.Time) *VideoItem {
	this := VideoItem{}
	this.VideoId = videoId
	this.Filename = filename
	this.CreatedAt = createdAt
	return &this
}

// NewVideoItemWithDefaults instantiates a new VideoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoItemWithDefaults() *VideoItem {
	this := VideoItem{}
	return &this
}

// GetVideoId returns the VideoId field value
func (o *VideoItem) GetVideoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value
// and a boolean to check if the value has been set.
func (o *VideoItem) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoId, true
}

// SetVideoId sets field value
func (o *VideoItem) SetVideoId(v string) {
	o.VideoId = v
}

// GetFilename returns the Filename field value
func (o *VideoItem) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *VideoItem) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *VideoItem) SetFilename(v string) {
	o.Filename = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VideoItem) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VideoItem) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VideoItem) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o VideoItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_id"] = o.VideoId
	toSerialize["filename"] = o.Filename
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *VideoItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video_id",
		"filename",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoItem := _VideoItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVideoItem)

	if err != nil {
		return err
	}

	*o = VideoItem(varVideoItem)

	return err
}

type NullableVideoItem struct {
	value *VideoItem
	isSet bool
}

func (v NullableVideoItem) Get() *VideoItem {
	return v.value
}

func (v *NullableVideoItem) Set(val *VideoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoItem(val *VideoItem) *NullableVideoItem {
	return &NullableVideoItem{value: val, isSet: true}
}

func (v NullableVideoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


