/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the Chapter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chapter{}

// Chapter When the value of the `type` parameter is set to `chapter`, the response is as follows: 
type Chapter struct {
	// Unique identifier of the response. 
	Id *string `json:"id,omitempty"`
	// An array that contains details about the detected chapters and their content. 
	Chapters []ChapterChaptersInner `json:"chapters,omitempty"`
	Usage *TokenUsage `json:"usage,omitempty"`
}

// NewChapter instantiates a new Chapter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChapter() *Chapter {
	this := Chapter{}
	return &this
}

// NewChapterWithDefaults instantiates a new Chapter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChapterWithDefaults() *Chapter {
	this := Chapter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Chapter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chapter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Chapter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Chapter) SetId(v string) {
	o.Id = &v
}

// GetChapters returns the Chapters field value if set, zero value otherwise.
func (o *Chapter) GetChapters() []ChapterChaptersInner {
	if o == nil || IsNil(o.Chapters) {
		var ret []ChapterChaptersInner
		return ret
	}
	return o.Chapters
}

// GetChaptersOk returns a tuple with the Chapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chapter) GetChaptersOk() ([]ChapterChaptersInner, bool) {
	if o == nil || IsNil(o.Chapters) {
		return nil, false
	}
	return o.Chapters, true
}

// HasChapters returns a boolean if a field has been set.
func (o *Chapter) HasChapters() bool {
	if o != nil && !IsNil(o.Chapters) {
		return true
	}

	return false
}

// SetChapters gets a reference to the given []ChapterChaptersInner and assigns it to the Chapters field.
func (o *Chapter) SetChapters(v []ChapterChaptersInner) {
	o.Chapters = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *Chapter) GetUsage() TokenUsage {
	if o == nil || IsNil(o.Usage) {
		var ret TokenUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chapter) GetUsageOk() (*TokenUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *Chapter) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given TokenUsage and assigns it to the Usage field.
func (o *Chapter) SetUsage(v TokenUsage) {
	o.Usage = &v
}

func (o Chapter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chapter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Chapters) {
		toSerialize["chapters"] = o.Chapters
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableChapter struct {
	value *Chapter
	isSet bool
}

func (v NullableChapter) Get() *Chapter {
	return v.value
}

func (v *NullableChapter) Set(val *Chapter) {
	v.value = val
	v.isSet = true
}

func (v NullableChapter) IsSet() bool {
	return v.isSet
}

func (v *NullableChapter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChapter(val *Chapter) *NullableChapter {
	return &NullableChapter{value: val, isSet: true}
}

func (v NullableChapter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChapter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


