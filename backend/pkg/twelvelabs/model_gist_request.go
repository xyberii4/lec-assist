/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GistRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GistRequest{}

// GistRequest struct for GistRequest
type GistRequest struct {
	// The unique identifier of the video that you want to generate a gist for. 
	VideoId string `json:"video_id"`
	// Specifies the type of gist. Use one of the following values:   - `title`: A title succinctly captures a video's main theme, such as \"From Consumerism to Minimalism: A Journey Toward Sustainable Living,\" guiding viewers to its content and themes.   - `topic`: A topic is the central theme of a video, such as \"Shopping Vlog Lifestyle\", summarizing its content for efficient categorization and reference.   - `hashtag`: A hashtag, like \"#BlackFriday\", represents key themes in a video, enhancing its discoverability and categorization on social media platforms. 
	Types []string `json:"types"`
}

type _GistRequest GistRequest

// NewGistRequest instantiates a new GistRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistRequest(videoId string, types []string) *GistRequest {
	this := GistRequest{}
	this.VideoId = videoId
	this.Types = types
	return &this
}

// NewGistRequestWithDefaults instantiates a new GistRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistRequestWithDefaults() *GistRequest {
	this := GistRequest{}
	return &this
}

// GetVideoId returns the VideoId field value
func (o *GistRequest) GetVideoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value
// and a boolean to check if the value has been set.
func (o *GistRequest) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoId, true
}

// SetVideoId sets field value
func (o *GistRequest) SetVideoId(v string) {
	o.VideoId = v
}

// GetTypes returns the Types field value
func (o *GistRequest) GetTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *GistRequest) GetTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Types, true
}

// SetTypes sets field value
func (o *GistRequest) SetTypes(v []string) {
	o.Types = v
}

func (o GistRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GistRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_id"] = o.VideoId
	toSerialize["types"] = o.Types
	return toSerialize, nil
}

func (o *GistRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"video_id",
		"types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGistRequest := _GistRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGistRequest)

	if err != nil {
		return err
	}

	*o = GistRequest(varGistRequest)

	return err
}

type NullableGistRequest struct {
	value *GistRequest
	isSet bool
}

func (v NullableGistRequest) Get() *GistRequest {
	return v.value
}

func (v *NullableGistRequest) Set(val *GistRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGistRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGistRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistRequest(val *GistRequest) *NullableGistRequest {
	return &NullableGistRequest{value: val, isSet: true}
}

func (v NullableGistRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


