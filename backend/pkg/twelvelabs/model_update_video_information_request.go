/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the UpdateVideoInformationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVideoInformationRequest{}

// UpdateVideoInformationRequest struct for UpdateVideoInformationRequest
type UpdateVideoInformationRequest struct {
	// Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.  **Example**: ```JSON \"user_metadata\": {   \"category\": \"recentlyAdded\",   \"batchNumber\": 5,   \"rating\": 9.3,   \"needsReview\": true } ```  <Note title=\"Notes\"> -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values. - You cannot override the following system-generated metadata fields:   - `duration`   - `filename`   - `fps`   - `height`   - `model_names`   - `size`   - `video_title`   - `width` </Note> 
	UserMetadata map[string]interface{} `json:"user_metadata,omitempty"`
}

// NewUpdateVideoInformationRequest instantiates a new UpdateVideoInformationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVideoInformationRequest() *UpdateVideoInformationRequest {
	this := UpdateVideoInformationRequest{}
	return &this
}

// NewUpdateVideoInformationRequestWithDefaults instantiates a new UpdateVideoInformationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVideoInformationRequestWithDefaults() *UpdateVideoInformationRequest {
	this := UpdateVideoInformationRequest{}
	return &this
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *UpdateVideoInformationRequest) GetUserMetadata() map[string]interface{} {
	if o == nil || IsNil(o.UserMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVideoInformationRequest) GetUserMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return map[string]interface{}{}, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *UpdateVideoInformationRequest) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given map[string]interface{} and assigns it to the UserMetadata field.
func (o *UpdateVideoInformationRequest) SetUserMetadata(v map[string]interface{}) {
	o.UserMetadata = v
}

func (o UpdateVideoInformationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVideoInformationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserMetadata) {
		toSerialize["user_metadata"] = o.UserMetadata
	}
	return toSerialize, nil
}

type NullableUpdateVideoInformationRequest struct {
	value *UpdateVideoInformationRequest
	isSet bool
}

func (v NullableUpdateVideoInformationRequest) Get() *UpdateVideoInformationRequest {
	return v.value
}

func (v *NullableUpdateVideoInformationRequest) Set(val *UpdateVideoInformationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVideoInformationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVideoInformationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVideoInformationRequest(val *UpdateVideoInformationRequest) *NullableUpdateVideoInformationRequest {
	return &NullableUpdateVideoInformationRequest{value: val, isSet: true}
}

func (v NullableUpdateVideoInformationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVideoInformationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


