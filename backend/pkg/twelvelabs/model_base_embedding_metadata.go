/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the BaseEmbeddingMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEmbeddingMetadata{}

// BaseEmbeddingMetadata Metadata about the embedding. 
type BaseEmbeddingMetadata struct {
	// The URL of the media file used to generate the embedding. Present if a URL was provided in the request. 
	InputUrl *string `json:"input_url,omitempty"`
	// The name of the media file used to generate the embedding. Present if a file was provided in the request. 
	InputFilename *string `json:"input_filename,omitempty"`
}

// NewBaseEmbeddingMetadata instantiates a new BaseEmbeddingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEmbeddingMetadata() *BaseEmbeddingMetadata {
	this := BaseEmbeddingMetadata{}
	return &this
}

// NewBaseEmbeddingMetadataWithDefaults instantiates a new BaseEmbeddingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEmbeddingMetadataWithDefaults() *BaseEmbeddingMetadata {
	this := BaseEmbeddingMetadata{}
	return &this
}

// GetInputUrl returns the InputUrl field value if set, zero value otherwise.
func (o *BaseEmbeddingMetadata) GetInputUrl() string {
	if o == nil || IsNil(o.InputUrl) {
		var ret string
		return ret
	}
	return *o.InputUrl
}

// GetInputUrlOk returns a tuple with the InputUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEmbeddingMetadata) GetInputUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InputUrl) {
		return nil, false
	}
	return o.InputUrl, true
}

// HasInputUrl returns a boolean if a field has been set.
func (o *BaseEmbeddingMetadata) HasInputUrl() bool {
	if o != nil && !IsNil(o.InputUrl) {
		return true
	}

	return false
}

// SetInputUrl gets a reference to the given string and assigns it to the InputUrl field.
func (o *BaseEmbeddingMetadata) SetInputUrl(v string) {
	o.InputUrl = &v
}

// GetInputFilename returns the InputFilename field value if set, zero value otherwise.
func (o *BaseEmbeddingMetadata) GetInputFilename() string {
	if o == nil || IsNil(o.InputFilename) {
		var ret string
		return ret
	}
	return *o.InputFilename
}

// GetInputFilenameOk returns a tuple with the InputFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEmbeddingMetadata) GetInputFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.InputFilename) {
		return nil, false
	}
	return o.InputFilename, true
}

// HasInputFilename returns a boolean if a field has been set.
func (o *BaseEmbeddingMetadata) HasInputFilename() bool {
	if o != nil && !IsNil(o.InputFilename) {
		return true
	}

	return false
}

// SetInputFilename gets a reference to the given string and assigns it to the InputFilename field.
func (o *BaseEmbeddingMetadata) SetInputFilename(v string) {
	o.InputFilename = &v
}

func (o BaseEmbeddingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEmbeddingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputUrl) {
		toSerialize["input_url"] = o.InputUrl
	}
	if !IsNil(o.InputFilename) {
		toSerialize["input_filename"] = o.InputFilename
	}
	return toSerialize, nil
}

type NullableBaseEmbeddingMetadata struct {
	value *BaseEmbeddingMetadata
	isSet bool
}

func (v NullableBaseEmbeddingMetadata) Get() *BaseEmbeddingMetadata {
	return v.value
}

func (v *NullableBaseEmbeddingMetadata) Set(val *BaseEmbeddingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEmbeddingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEmbeddingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEmbeddingMetadata(val *BaseEmbeddingMetadata) *NullableBaseEmbeddingMetadata {
	return &NullableBaseEmbeddingMetadata{value: val, isSet: true}
}

func (v NullableBaseEmbeddingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEmbeddingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


