/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the InlineObject20 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject20{}

// InlineObject20 struct for InlineObject20
type InlineObject20 struct {
	// A list of the video files that failed to import. Typically, these files did not meet the upload requirements. To resolve this, review the requirements listed in the [Prerequisites](/v1.3/docs/guides/search#prerequisites) section of the **Search** page.
	FailedFiles []InlineObject20FailedFilesInner `json:"failed_files,omitempty"`
	// A list of the videos that will be uploaded and indexed.
	Videos []InlineObject20VideosInner `json:"videos,omitempty"`
}

// NewInlineObject20 instantiates a new InlineObject20 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject20() *InlineObject20 {
	this := InlineObject20{}
	return &this
}

// NewInlineObject20WithDefaults instantiates a new InlineObject20 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject20WithDefaults() *InlineObject20 {
	this := InlineObject20{}
	return &this
}

// GetFailedFiles returns the FailedFiles field value if set, zero value otherwise.
func (o *InlineObject20) GetFailedFiles() []InlineObject20FailedFilesInner {
	if o == nil || IsNil(o.FailedFiles) {
		var ret []InlineObject20FailedFilesInner
		return ret
	}
	return o.FailedFiles
}

// GetFailedFilesOk returns a tuple with the FailedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject20) GetFailedFilesOk() ([]InlineObject20FailedFilesInner, bool) {
	if o == nil || IsNil(o.FailedFiles) {
		return nil, false
	}
	return o.FailedFiles, true
}

// HasFailedFiles returns a boolean if a field has been set.
func (o *InlineObject20) HasFailedFiles() bool {
	if o != nil && !IsNil(o.FailedFiles) {
		return true
	}

	return false
}

// SetFailedFiles gets a reference to the given []InlineObject20FailedFilesInner and assigns it to the FailedFiles field.
func (o *InlineObject20) SetFailedFiles(v []InlineObject20FailedFilesInner) {
	o.FailedFiles = v
}

// GetVideos returns the Videos field value if set, zero value otherwise.
func (o *InlineObject20) GetVideos() []InlineObject20VideosInner {
	if o == nil || IsNil(o.Videos) {
		var ret []InlineObject20VideosInner
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject20) GetVideosOk() ([]InlineObject20VideosInner, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *InlineObject20) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []InlineObject20VideosInner and assigns it to the Videos field.
func (o *InlineObject20) SetVideos(v []InlineObject20VideosInner) {
	o.Videos = v
}

func (o InlineObject20) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject20) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedFiles) {
		toSerialize["failed_files"] = o.FailedFiles
	}
	if !IsNil(o.Videos) {
		toSerialize["videos"] = o.Videos
	}
	return toSerialize, nil
}

type NullableInlineObject20 struct {
	value *InlineObject20
	isSet bool
}

func (v NullableInlineObject20) Get() *InlineObject20 {
	return v.value
}

func (v *NullableInlineObject20) Set(val *InlineObject20) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject20) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject20) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject20(val *InlineObject20) *NullableInlineObject20 {
	return &NullableInlineObject20{value: val, isSet: true}
}

func (v NullableInlineObject20) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject20) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


