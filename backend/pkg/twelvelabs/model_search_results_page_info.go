/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the SearchResultsPageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultsPageInfo{}

// SearchResultsPageInfo An object that provides information about pagination.
type SearchResultsPageInfo struct {
	// The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page. 
	LimitPerPage *int32 `json:"limit_per_page,omitempty"`
	// A string representing the date and time, in the RFC 3339 format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires.
	PageExpiresAt *string `json:"page_expires_at,omitempty"`
	// The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos. 
	TotalResults *int32 `json:"total_results,omitempty"`
	// When grouping by video, the platform return this field that shows the total number of video clips matching your query. 
	TotalInnerMatches *int32 `json:"total_inner_matches,omitempty"`
	// The unique identifier of the next page.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// NewSearchResultsPageInfo instantiates a new SearchResultsPageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultsPageInfo() *SearchResultsPageInfo {
	this := SearchResultsPageInfo{}
	return &this
}

// NewSearchResultsPageInfoWithDefaults instantiates a new SearchResultsPageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsPageInfoWithDefaults() *SearchResultsPageInfo {
	this := SearchResultsPageInfo{}
	return &this
}

// GetLimitPerPage returns the LimitPerPage field value if set, zero value otherwise.
func (o *SearchResultsPageInfo) GetLimitPerPage() int32 {
	if o == nil || IsNil(o.LimitPerPage) {
		var ret int32
		return ret
	}
	return *o.LimitPerPage
}

// GetLimitPerPageOk returns a tuple with the LimitPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsPageInfo) GetLimitPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.LimitPerPage) {
		return nil, false
	}
	return o.LimitPerPage, true
}

// HasLimitPerPage returns a boolean if a field has been set.
func (o *SearchResultsPageInfo) HasLimitPerPage() bool {
	if o != nil && !IsNil(o.LimitPerPage) {
		return true
	}

	return false
}

// SetLimitPerPage gets a reference to the given int32 and assigns it to the LimitPerPage field.
func (o *SearchResultsPageInfo) SetLimitPerPage(v int32) {
	o.LimitPerPage = &v
}

// GetPageExpiresAt returns the PageExpiresAt field value if set, zero value otherwise.
func (o *SearchResultsPageInfo) GetPageExpiresAt() string {
	if o == nil || IsNil(o.PageExpiresAt) {
		var ret string
		return ret
	}
	return *o.PageExpiresAt
}

// GetPageExpiresAtOk returns a tuple with the PageExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsPageInfo) GetPageExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.PageExpiresAt) {
		return nil, false
	}
	return o.PageExpiresAt, true
}

// HasPageExpiresAt returns a boolean if a field has been set.
func (o *SearchResultsPageInfo) HasPageExpiresAt() bool {
	if o != nil && !IsNil(o.PageExpiresAt) {
		return true
	}

	return false
}

// SetPageExpiresAt gets a reference to the given string and assigns it to the PageExpiresAt field.
func (o *SearchResultsPageInfo) SetPageExpiresAt(v string) {
	o.PageExpiresAt = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SearchResultsPageInfo) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsPageInfo) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SearchResultsPageInfo) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *SearchResultsPageInfo) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetTotalInnerMatches returns the TotalInnerMatches field value if set, zero value otherwise.
func (o *SearchResultsPageInfo) GetTotalInnerMatches() int32 {
	if o == nil || IsNil(o.TotalInnerMatches) {
		var ret int32
		return ret
	}
	return *o.TotalInnerMatches
}

// GetTotalInnerMatchesOk returns a tuple with the TotalInnerMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsPageInfo) GetTotalInnerMatchesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalInnerMatches) {
		return nil, false
	}
	return o.TotalInnerMatches, true
}

// HasTotalInnerMatches returns a boolean if a field has been set.
func (o *SearchResultsPageInfo) HasTotalInnerMatches() bool {
	if o != nil && !IsNil(o.TotalInnerMatches) {
		return true
	}

	return false
}

// SetTotalInnerMatches gets a reference to the given int32 and assigns it to the TotalInnerMatches field.
func (o *SearchResultsPageInfo) SetTotalInnerMatches(v int32) {
	o.TotalInnerMatches = &v
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *SearchResultsPageInfo) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsPageInfo) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *SearchResultsPageInfo) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *SearchResultsPageInfo) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

func (o SearchResultsPageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultsPageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LimitPerPage) {
		toSerialize["limit_per_page"] = o.LimitPerPage
	}
	if !IsNil(o.PageExpiresAt) {
		toSerialize["page_expires_at"] = o.PageExpiresAt
	}
	if !IsNil(o.TotalResults) {
		toSerialize["total_results"] = o.TotalResults
	}
	if !IsNil(o.TotalInnerMatches) {
		toSerialize["total_inner_matches"] = o.TotalInnerMatches
	}
	if !IsNil(o.NextPageToken) {
		toSerialize["next_page_token"] = o.NextPageToken
	}
	return toSerialize, nil
}

type NullableSearchResultsPageInfo struct {
	value *SearchResultsPageInfo
	isSet bool
}

func (v NullableSearchResultsPageInfo) Get() *SearchResultsPageInfo {
	return v.value
}

func (v *NullableSearchResultsPageInfo) Set(val *SearchResultsPageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultsPageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultsPageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultsPageInfo(val *SearchResultsPageInfo) *NullableSearchResultsPageInfo {
	return &NullableSearchResultsPageInfo{value: val, isSet: true}
}

func (v NullableSearchResultsPageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultsPageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


