/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// InlineObject19 - struct for InlineObject19
type InlineObject19 struct {
	Chapter *Chapter
	Highlight *Highlight
	Summary *Summary
}

// ChapterAsInlineObject19 is a convenience function that returns Chapter wrapped in InlineObject19
func ChapterAsInlineObject19(v *Chapter) InlineObject19 {
	return InlineObject19{
		Chapter: v,
	}
}

// HighlightAsInlineObject19 is a convenience function that returns Highlight wrapped in InlineObject19
func HighlightAsInlineObject19(v *Highlight) InlineObject19 {
	return InlineObject19{
		Highlight: v,
	}
}

// SummaryAsInlineObject19 is a convenience function that returns Summary wrapped in InlineObject19
func SummaryAsInlineObject19(v *Summary) InlineObject19 {
	return InlineObject19{
		Summary: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InlineObject19) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Chapter
	err = newStrictDecoder(data).Decode(&dst.Chapter)
	if err == nil {
		jsonChapter, _ := json.Marshal(dst.Chapter)
		if string(jsonChapter) == "{}" { // empty struct
			dst.Chapter = nil
		} else {
			if err = validator.Validate(dst.Chapter); err != nil {
				dst.Chapter = nil
			} else {
				match++
			}
		}
	} else {
		dst.Chapter = nil
	}

	// try to unmarshal data into Highlight
	err = newStrictDecoder(data).Decode(&dst.Highlight)
	if err == nil {
		jsonHighlight, _ := json.Marshal(dst.Highlight)
		if string(jsonHighlight) == "{}" { // empty struct
			dst.Highlight = nil
		} else {
			if err = validator.Validate(dst.Highlight); err != nil {
				dst.Highlight = nil
			} else {
				match++
			}
		}
	} else {
		dst.Highlight = nil
	}

	// try to unmarshal data into Summary
	err = newStrictDecoder(data).Decode(&dst.Summary)
	if err == nil {
		jsonSummary, _ := json.Marshal(dst.Summary)
		if string(jsonSummary) == "{}" { // empty struct
			dst.Summary = nil
		} else {
			if err = validator.Validate(dst.Summary); err != nil {
				dst.Summary = nil
			} else {
				match++
			}
		}
	} else {
		dst.Summary = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Chapter = nil
		dst.Highlight = nil
		dst.Summary = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InlineObject19)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InlineObject19)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InlineObject19) MarshalJSON() ([]byte, error) {
	if src.Chapter != nil {
		return json.Marshal(&src.Chapter)
	}

	if src.Highlight != nil {
		return json.Marshal(&src.Highlight)
	}

	if src.Summary != nil {
		return json.Marshal(&src.Summary)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InlineObject19) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Chapter != nil {
		return obj.Chapter
	}

	if obj.Highlight != nil {
		return obj.Highlight
	}

	if obj.Summary != nil {
		return obj.Summary
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj InlineObject19) GetActualInstanceValue() (interface{}) {
	if obj.Chapter != nil {
		return *obj.Chapter
	}

	if obj.Highlight != nil {
		return *obj.Highlight
	}

	if obj.Summary != nil {
		return *obj.Summary
	}

	// all schemas are nil
	return nil
}

type NullableInlineObject19 struct {
	value *InlineObject19
	isSet bool
}

func (v NullableInlineObject19) Get() *InlineObject19 {
	return v.value
}

func (v *NullableInlineObject19) Set(val *InlineObject19) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject19) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject19) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject19(val *InlineObject19) *NullableInlineObject19 {
	return &NullableInlineObject19{value: val, isSet: true}
}

func (v NullableInlineObject19) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject19) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


