/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the IndexModelsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexModelsInner{}

// IndexModelsInner struct for IndexModelsInner
type IndexModelsInner struct {
	// A string representing the name of the model.
	ModelName *string `json:"model_name,omitempty"`
	// An array of strings that contains the [model options](/v1.3/docs/concepts/modalities#model-options) enabled for this index. 
	ModelOptions []string `json:"model_options,omitempty"`
}

// NewIndexModelsInner instantiates a new IndexModelsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexModelsInner() *IndexModelsInner {
	this := IndexModelsInner{}
	return &this
}

// NewIndexModelsInnerWithDefaults instantiates a new IndexModelsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexModelsInnerWithDefaults() *IndexModelsInner {
	this := IndexModelsInner{}
	return &this
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *IndexModelsInner) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexModelsInner) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *IndexModelsInner) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *IndexModelsInner) SetModelName(v string) {
	o.ModelName = &v
}

// GetModelOptions returns the ModelOptions field value if set, zero value otherwise.
func (o *IndexModelsInner) GetModelOptions() []string {
	if o == nil || IsNil(o.ModelOptions) {
		var ret []string
		return ret
	}
	return o.ModelOptions
}

// GetModelOptionsOk returns a tuple with the ModelOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexModelsInner) GetModelOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ModelOptions) {
		return nil, false
	}
	return o.ModelOptions, true
}

// HasModelOptions returns a boolean if a field has been set.
func (o *IndexModelsInner) HasModelOptions() bool {
	if o != nil && !IsNil(o.ModelOptions) {
		return true
	}

	return false
}

// SetModelOptions gets a reference to the given []string and assigns it to the ModelOptions field.
func (o *IndexModelsInner) SetModelOptions(v []string) {
	o.ModelOptions = v
}

func (o IndexModelsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexModelsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.ModelOptions) {
		toSerialize["model_options"] = o.ModelOptions
	}
	return toSerialize, nil
}

type NullableIndexModelsInner struct {
	value *IndexModelsInner
	isSet bool
}

func (v NullableIndexModelsInner) Get() *IndexModelsInner {
	return v.value
}

func (v *NullableIndexModelsInner) Set(val *IndexModelsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexModelsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexModelsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexModelsInner(val *IndexModelsInner) *NullableIndexModelsInner {
	return &NullableIndexModelsInner{value: val, isSet: true}
}

func (v NullableIndexModelsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexModelsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


