/*
TwelveLabs Video Understanding API

Use the TwelveLabs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses. 

API version: 1.3.0
Contact: support@twelvelabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twelvelabs

import (
	"encoding/json"
)

// checks if the AudioEmbeddingResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioEmbeddingResult{}

// AudioEmbeddingResult An object that contains the generated embedding vector and associated information. 
type AudioEmbeddingResult struct {
	// An object that contains the embedding and its start time. 
	Segments []AudioSegment `json:"segments,omitempty"`
	// Error message if the embedding generation failed.
	ErrorMessage *string `json:"error_message,omitempty"`
	Metadata *BaseEmbeddingMetadata `json:"metadata,omitempty"`
}

// NewAudioEmbeddingResult instantiates a new AudioEmbeddingResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioEmbeddingResult() *AudioEmbeddingResult {
	this := AudioEmbeddingResult{}
	return &this
}

// NewAudioEmbeddingResultWithDefaults instantiates a new AudioEmbeddingResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioEmbeddingResultWithDefaults() *AudioEmbeddingResult {
	this := AudioEmbeddingResult{}
	return &this
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *AudioEmbeddingResult) GetSegments() []AudioSegment {
	if o == nil || IsNil(o.Segments) {
		var ret []AudioSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioEmbeddingResult) GetSegmentsOk() ([]AudioSegment, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *AudioEmbeddingResult) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []AudioSegment and assigns it to the Segments field.
func (o *AudioEmbeddingResult) SetSegments(v []AudioSegment) {
	o.Segments = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AudioEmbeddingResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioEmbeddingResult) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AudioEmbeddingResult) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AudioEmbeddingResult) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AudioEmbeddingResult) GetMetadata() BaseEmbeddingMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret BaseEmbeddingMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioEmbeddingResult) GetMetadataOk() (*BaseEmbeddingMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AudioEmbeddingResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given BaseEmbeddingMetadata and assigns it to the Metadata field.
func (o *AudioEmbeddingResult) SetMetadata(v BaseEmbeddingMetadata) {
	o.Metadata = &v
}

func (o AudioEmbeddingResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioEmbeddingResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableAudioEmbeddingResult struct {
	value *AudioEmbeddingResult
	isSet bool
}

func (v NullableAudioEmbeddingResult) Get() *AudioEmbeddingResult {
	return v.value
}

func (v *NullableAudioEmbeddingResult) Set(val *AudioEmbeddingResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioEmbeddingResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioEmbeddingResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioEmbeddingResult(val *AudioEmbeddingResult) *NullableAudioEmbeddingResult {
	return &NullableAudioEmbeddingResult{value: val, isSet: true}
}

func (v NullableAudioEmbeddingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioEmbeddingResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


